<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on Morgoth</title>
        <link>https://canuxcheng.com/tags/git/</link>
        <description>Recent content in Git on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 02 Apr 2016 21:11:33 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git</title>
        <link>https://canuxcheng.com/post/devops_git/</link>
        <pubDate>Sat, 02 Apr 2016 21:11:33 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_git/</guid>
        <description>&lt;h1 id=&#34;git&#34;&gt;Git&lt;/h1&gt;
&lt;p&gt;GIT: 分布式版本控制系统。&lt;/p&gt;
&lt;p&gt;SVN: subversion并发式版本控制系统。&lt;/p&gt;
&lt;p&gt;Mercurial: hg分布式版本控制。&lt;/p&gt;
&lt;p&gt;和git相关的产品：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;github&lt;/li&gt;
&lt;li&gt;bitbucket&lt;/li&gt;
&lt;li&gt;sourceForge&lt;/li&gt;
&lt;li&gt;gitlab&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Git安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install git
$ yum install git
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;git-config-git配置&#34;&gt;git config (Git配置)&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/zh/v2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/book/zh/v2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;git配置文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;/etc/gitconfig 系统级的配置文件，通过git config &amp;ndash;system设置&lt;/li&gt;
&lt;li&gt;~/.gitconfig 用户级的配置文件，通过git config &amp;ndash;global设置&lt;/li&gt;
&lt;li&gt;.git/config 仓库级的配置文件，通过git config &amp;ndash;local设置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;git配置：&lt;/p&gt;
&lt;p&gt;使用git config &amp;ndash;global命令配置,或者直接修改~/.gitconfig文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看帮助
git help config
man git-config
git config --help
git config -l/--list # 查看所有配置
git config --system
git config --global
git config --local
git config --global user.name &amp;quot;your_name&amp;quot;
git config --global user.email &amp;quot;your_email&amp;quot;
git config --global core.editor vim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多配置文件：&lt;/p&gt;
&lt;p&gt;在~/.gitconfig添加include可以调用其它配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[include]
    path = ~/myCode/pydeveloper/etc/git/gitcofig
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;git-remote-git-协议&#34;&gt;git remote (git 协议)&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;git有四个协议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;本地协议file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; file:///path/to/project.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSH协议&lt;/p&gt;
&lt;p&gt;拷贝ssh的公钥后不需要输入用户名和密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ssh://git@github.com/&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git
 git@github.com:&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http协议&lt;/p&gt;
&lt;p&gt;默认需要手动输入远程仓库的用户名和密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; https://github.com/&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git
 # 不用手动输入密码
 https://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@github.com/&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置http代理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; git config --global http.proxy &amp;quot;http://&amp;lt;server&amp;gt;:&amp;lt;port&amp;gt;&amp;quot;
 git config --global http.proxy &amp;quot;https://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;proxy&amp;gt;:&amp;lt;port&amp;gt;&amp;quot;
 git config --global https.proxy &amp;quot;https://&amp;lt;server&amp;gt;:&amp;lt;PORT&amp;gt;&amp;quot;
 # In gitconfig file
 [http]
     proxy = http://&amp;lt;server&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git协议&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; git://git@github.com/&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置git代理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; git config --global core.gitproxy ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设置git协议：&lt;/p&gt;
&lt;p&gt;如果公司的22端口被封，不能SSH到外网，用set-url将协议改成http即可。&lt;/p&gt;
&lt;p&gt;如果使用代理，配置http.proxy即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看帮助
git remote --help
git help remote
man git-remote
git remote -v # 查看远程仓库的详细信息
git remote add [-t &amp;lt;branch&amp;gt;] [-m &amp;lt;master&amp;gt;] [-f] [--[no-]tags] [--mirror=&amp;lt;fetch|push&amp;gt;] &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;
git remote add origin &amp;lt;url&amp;gt; # 给远程仓库origin添加url, 一个仓库可以添加多个url。
git remote rename &amp;lt;oldname&amp;gt; &amp;lt;newname&amp;gt; # 重命名远程仓库
git remote remove/rm &amp;lt;name&amp;gt; # 删除和远程仓库相关的所有信息
git remote set-head
git remote set-branches
git remote [-v | --verbose] show [-n] &amp;lt;name&amp;gt;...
git remote -v show origin # 查看远程仓库origin详细信息
git remote prune
git remote update
git remote set-url [--push] &amp;lt;name&amp;gt; &amp;lt;newurl&amp;gt; [&amp;lt;oldurl&amp;gt;]
git remote set-url origin &amp;lt;newurl&amp;gt; # 修改远程仓库origin的url
git remote set-url --add [--push] &amp;lt;name&amp;gt; &amp;lt;newurl&amp;gt;
git remote set-url --delete [--push] &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;projcetgitignore&#34;&gt;projcet/.gitignore&lt;/h1&gt;
&lt;p&gt;忽略文件&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/github/gitignore&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/github/gitignore&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;projectgitattributes&#34;&gt;project/.gitattributes&lt;/h1&gt;
&lt;p&gt;github显示编程语言&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* linguist-language=Python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/github/linguist&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/github/linguist&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;git相关项目&#34;&gt;git相关项目&lt;/h1&gt;
&lt;h2 id=&#34;gui&#34;&gt;GUI&lt;/h2&gt;
&lt;p&gt;Linux：&lt;/p&gt;
&lt;p&gt;git-gui gitk&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://repo.or.cz/w/git-gui.git/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://repo.or.cz/w/git-gui.git/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install gitk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;windows:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/downloads/guis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/downloads/guis&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-for-windows&#34;&gt;git-for-windows&lt;/h2&gt;
&lt;p&gt;windows的git&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/git-for-windows/git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/git-for-windows/git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;post-git&#34;&gt;post-git&lt;/h2&gt;
&lt;p&gt;powershell的git&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/dahlbyk/posh-git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/dahlbyk/posh-git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-extras&#34;&gt;git-extras&lt;/h2&gt;
&lt;p&gt;GIT utilities &amp;ndash; repo summary, repl, changelog population, author commit percentages and more&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/tj/git-extras&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/tj/git-extras&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo apt-get install git-extras
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;git-sweep&#34;&gt;git-sweep&lt;/h2&gt;
&lt;p&gt;A command-line tool that helps you clean up Git branches that have been merged into master.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/arc90/git-sweep&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/arc90/git-sweep&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo -E pip install git-sweep
$cd git-repo
$git-sweep preview # 查看哪些远程的branch已经merge到master.
$git-sweep cleanup # 删除远程已经merge到master的branch.
$git-sweep cleanup --skip integration, sandbox
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;git-imerge&#34;&gt;git-imerge&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mhagger/git-imerge&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/mhagger/git-imerge&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-standup&#34;&gt;git-standup&lt;/h2&gt;
&lt;p&gt;Recall what you did on the last working day. Psst! or be nosy and find what someone else in your team did ;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kamranahmedse/git-standup&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kamranahmedse/git-standup&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$npm install -g git-standup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;git-lfs&#34;&gt;git-lfs&lt;/h2&gt;
&lt;p&gt;git的大文件管理&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/git-lfs/git-lfs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/git-lfs/git-lfs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;gerrit&#34;&gt;Gerrit&lt;/h2&gt;
&lt;p&gt;Gerrit is a code review and project management tool for Git based projects.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gerrit-review/gerrit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/gerrit-review/gerrit&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;搭建私有git服务器&#34;&gt;搭建私有git服务器&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$sudo groupadd git
$sudo adduser git -g git
$ cd /home/git
$ mkdir src
$ git init --bare src
$ sudo chown -R git:git src
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;gitolite&#34;&gt;gitolite&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sitaramc/gitolite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/sitaramc/gitolite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;gitosis&#34;&gt;gitosis&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/res0nat0r/gitosis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/res0nat0r/gitosis&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;git命令&#34;&gt;Git命令&lt;/h1&gt;
&lt;p&gt;git的结构：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;working directory(工作目录),通过git init初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;staging area(暂存区),通过git add添加index到暂存区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;repository(仓库),通过git commit提交到repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; git help &amp;lt;verb&amp;gt;
 git &amp;lt;verb&amp;gt; --help
 man git-&amp;lt;verb&amp;gt;

 git help -a
 git help -g
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;archive&#34;&gt;archive&lt;/h2&gt;
&lt;p&gt;download one file from git server(github/gitlab/gerrit)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git archive --remote=ssh://user@gerrit.domain.com:port/group/project.git HEAD:path/to file | tar -x
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;init&#34;&gt;init&lt;/h2&gt;
&lt;p&gt;Create an empty Git repository or reinitialize an existing one&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init # 创建一个空repository
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add&#34;&gt;add&lt;/h2&gt;
&lt;p&gt;Add file contents to the index&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .  # 不包括删除的文件
git add -u # 不包括新建的文件
git add -A # 添加working tree下的所有文件到index
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;commit&#34;&gt;commit&lt;/h2&gt;
&lt;p&gt;Record changes to the repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;[1.0.0.0]init repository.&amp;quot;
git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;bisect&#34;&gt;bisect&lt;/h2&gt;
&lt;p&gt;Find by binary search the change that introduced a bug&lt;/p&gt;
&lt;h2 id=&#34;branch&#34;&gt;branch&lt;/h2&gt;
&lt;p&gt;List, create, or delete branches&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch [branch-name]
git branch -d [branch-name] # 删除已经merge到master的分支
git branch -D [branch-name] # 强制删除分支
git branch -m [old-name] [new-name] # 重命名
git branch -M [old-name] [new-name] # 强制重命名
git branch -vv   # 查看上游
git branch --unset-upstream [branch] # 取消上游
git branch -u &amp;lt;origin/branch&amp;gt; [branch] # 设置上游
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;blame&#34;&gt;blame&lt;/h2&gt;
&lt;p&gt;Show what revision and author last modified each line of a file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git blame filename # 查看文件的历史记录
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;checkout&#34;&gt;checkout&lt;/h2&gt;
&lt;p&gt;Checkout a branch or paths to the working tree&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout [branch-name]
git checkout -b [branch-name] [start-point] # 创建并切换到分支
git checkout -B [branch-name] [start-point] # 强制执行

git checkout -- file/path # 撤销工作目录中文件的修改
git checkout [branch-name] -- file/path # 获取远程仓库的文件到当前工作目录

git checkout -b &amp;lt;b-n&amp;gt; tags/v1.0.0 # 基于tag创建branch.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;clone&#34;&gt;clone&lt;/h2&gt;
&lt;p&gt;Clone a repository into a new directory&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone [url]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;diff&#34;&gt;diff&lt;/h2&gt;
&lt;p&gt;Show changes between commits, commit and working tree, etc&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git diff # 查看工作目录变化
git diff --staged # 查看暂存区变化
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fetch&#34;&gt;fetch&lt;/h2&gt;
&lt;p&gt;Download objects and refs from another repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git fetch
git fetch -p
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;grep&#34;&gt;grep&lt;/h2&gt;
&lt;p&gt;Print lines matching a pattern reinitialize an existing one&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git grep [&amp;lt;pathspec&amp;gt;...]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;log&#34;&gt;log&lt;/h2&gt;
&lt;p&gt;Show commit logs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log # 显示commit的log
git log --pretty=format:&#39;%h&#39; -n 1 // 查看commit id.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;merge&#34;&gt;merge&lt;/h2&gt;
&lt;p&gt;merge的5中策略:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resolve&lt;/li&gt;
&lt;li&gt;recursive&lt;/li&gt;
&lt;li&gt;octopus&lt;/li&gt;
&lt;li&gt;ours&lt;/li&gt;
&lt;li&gt;subtree&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Join two or more development histories together&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git merge [branch-name]
git merge --ff # fast-forward,默认直接两个分支合并，不会产生新的commit,看不到开发分支的分叉．
git merge --ff-only
git merge --no-ff # no fast-forward,每次合并会创建新的commit.可以看到开发分支的分叉
git merge --squash
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;mv&#34;&gt;mv&lt;/h2&gt;
&lt;p&gt;Move or rename a file, a directory, or a symlink&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git mv [old] [new] # 重命名暂存区文件
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pull&#34;&gt;pull&lt;/h2&gt;
&lt;p&gt;Fetch from and integrate with another repository or a local branch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;push&#34;&gt;push&lt;/h2&gt;
&lt;p&gt;Update remote refs along with associated objects&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global push.default simple

git push origin --delete &amp;lt;branch&amp;gt;
git push origin :&amp;lt;branch&amp;gt;

git push origin --tags -f # push所有tag
git push origin [tagname] # push单个tag
git push origin --delete tag [tagname]
git push origin :refs/tags/[tagname]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rebase&#34;&gt;rebase&lt;/h2&gt;
&lt;p&gt;Forward-port local commits to the updated upstream head&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase -i [commit] # 修改提交的信息
pick 
reword
edit
squash
fixup 
exec
drop
label
reset
merge
git rebase --continue
git rebase --abort
git rebase --skip
git rebase --edit-todo
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reset&#34;&gt;reset&lt;/h2&gt;
&lt;p&gt;Reset current HEAD to the specified state&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 硬重置, 之后的commit和 修改的文件都没了
git reset --hard [commit] # 全部回退

// 软重置, 之后commit没了，修改的文件还在
git reset --soft [commit]

git reset --mixed [commit]

git reset --merge [commit]

git reset --keep [commit]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rm&#34;&gt;rm&lt;/h2&gt;
&lt;p&gt;Remove files from the working tree and from the index&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rm &amp;lt;file&amp;gt; # 删除工作目录和暂存区的文件
git rm --cached &amp;lt;file&amp;gt; # 不删除工作目录的文件,　只删除暂存区.
git rm -r --cached &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;revert&#34;&gt;revert&lt;/h2&gt;
&lt;p&gt;Revert some existing commits&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git revert [commit] # 撤销一次merge
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reflog&#34;&gt;reflog&lt;/h2&gt;
&lt;p&gt;Manage reflog information&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 查看所有执行过的动作的日志
git reflog show 

git reflog expire

git reflog delete
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;show&#34;&gt;show&lt;/h2&gt;
&lt;p&gt;Show various types of objects&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git show
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;status&#34;&gt;status&lt;/h2&gt;
&lt;p&gt;Show the working tree status tag Create, list, delete or verify a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git status
git status -s # 显示状态的简介信息, 默认是--long

// 查看gitignore忽略了哪些文件。
git status --ignored
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;stash&#34;&gt;stash&lt;/h2&gt;
&lt;p&gt;Stash the changes in a dirty working directory away&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git stash # 暂存当前工作目录
git stash list # 查看暂存列表
git stash show [stash]
git stash pop --index stash@{N} # 恢复暂存区N和工作目录
git stash apply --index stash@{N} # 同上
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tag&#34;&gt;tag&lt;/h2&gt;
&lt;p&gt;Create, list, delete or verify a tag object signed with GPG&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git tag -l # 查看所有本地tag
git tag -d v1.0.0 # 删除本地tag
git tag -a v1.0.0 -m &amp;quot;release 1.0.0.&amp;quot; -f
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;submodule&#34;&gt;submodule&lt;/h2&gt;
&lt;p&gt;Initialize, update or inspect submodules&lt;/p&gt;
&lt;p&gt;会在项目产生.gitmodules文件，而且不被.gitignore忽略，所以不要在URL添加用户名和密码．&lt;/p&gt;
&lt;p&gt;添加子模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// push只会push创建的子模块空目录和.gitmodules文件.
git submodule add &amp;lt;repository&amp;gt; [&amp;lt;path&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;克隆子模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// git clone 只会clone空目录
git submodule init
git submodule update 
// 或者
git clone --recurse-submodules &amp;lt;sub-URL&amp;gt;
// 或者
git clone &amp;lt;URL&amp;gt;
git submodule update --init
// 或者
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;mergetool&#34;&gt;mergetool&lt;/h2&gt;
&lt;p&gt;Run merge conflict resolution tools to resolve merge conflicts.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git mergetool --tool=meld
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;best-prictise&#34;&gt;Best Prictise&lt;/h1&gt;
&lt;p&gt;merge远程tag&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b influxdata-1.5.2 master
git pull https://github.com/influxdata/influxdb.git v1.5.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gitignore忽略文件和目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path/to/file
path/
# 如果已经push：
git rm -r --cached path/to/file
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
