<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Builtin on Morgoth</title>
        <link>https://canuxcheng.com/tags/builtin/</link>
        <description>Recent content in Builtin on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 01 Jan 2018 10:49:21 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/tags/builtin/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GSL_builtin</title>
        <link>https://canuxcheng.com/post/gsl_builtin/</link>
        <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/gsl_builtin/</guid>
        <description>&lt;h1 id=&#34;builtin&#34;&gt;builtin&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pkg.go.dev/builtin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pkg.go.dev/builtin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;go的builtin package.&lt;/p&gt;
&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;true
false
iota // Untyped int.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;
&lt;p&gt;pointer, channel, func, interface, map, or slice type的zero value：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nil
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 分配并初始化各种类型的对象, 返回一个指针．
new(Type) *Type

# 分配并初始化一个Slice/Map/Channel的对象,返回相同类型的对象.
make(t Type, size ...IntegerType) Type

# 返回容量，　Array/ArrayPointer/Slice/Channel
cap(v Type) int

# 返回长度，　String/Array/ArrayPointer/Slice/Map/Channel
len(v Type) int

print(args ...Type)

println(args ...Type)

func max[T cmp.Ordered](x T, y ...T) T
func min[T cmp.Ordered](x T, y ...T) T
func clear[T ~[]Type | ~map[Type]Type1](t T)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;complex:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 把两个浮点数构造成一个复数
complex(r, i FloatType) ComplexType

# 返回复数c的实部
real(c ComplexType) FloatType

# 返回复数c的虚部
imag(c ComplexType) FloatType
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;slice:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 向切片末尾追加元素，返回新的切片．切片长度增加.
# 如果长度超过底层数组长度，就创建了一个新的底层数组. 否则底层数组不变．
# 在元素不超过1000的情况下，自动创建的底层数组容量翻倍.
append(slice []Type, elems ...Type) []Type

# 复制一个切片, 返回复制的元素的个数
copy(dst, src []Type) int
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;map:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 从映射删除一个键值对
delete(m map[Type]1, key Type)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;chan:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 由发送者关闭一个双向或只发送的信道
close(c chan&amp;lt;- Type)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 停止当前go程的正常执行(断言函数)
panic(v interface{})

# 管理panic过程中的go程
recover() interface{}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;types&#34;&gt;types&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;bool

uint
uintptr
uint8/byte (0 - 255)
uint16
uint32
uint64

int
int8 (-128 - 127)
int16
int32/rune
int64

float32
float64

complex64
complex128

string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文档类型:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Type
Type1
IntegerType
FloatType
ComplexType
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;错误处理:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;error

// go使用error值来表示错误状态，nil表示成功，非nil表示失败．
type error interface {
    ERROR() string
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;any:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type any = interface{}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;comparable&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type comparable interface{ comparable }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
