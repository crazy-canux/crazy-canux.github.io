<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Summary on Morgoth</title>
        <link>https://canuxcheng.com/tags/summary/</link>
        <description>Recent content in Summary on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 02 Apr 2016 16:06:14 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/tags/summary/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Summary</title>
        <link>https://canuxcheng.com/post/c_summary/</link>
        <pubDate>Sat, 02 Apr 2016 16:06:14 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/c_summary/</guid>
        <description>&lt;h1 id=&#34;c标准&#34;&gt;C标准&lt;/h1&gt;
&lt;p&gt;ISO C89(ANSI C89) -&amp;gt; ISO C99 -&amp;gt; ISO C11&lt;/p&gt;
&lt;p&gt;ANSI C 和 ISO C是对通用C语言的接口的定义。&lt;/p&gt;
&lt;p&gt;符合这种标准的实现为C语言标准库,也叫libc。&lt;/p&gt;
&lt;p&gt;Unix/Linux的POSIX包含libc。&lt;/p&gt;
&lt;p&gt;Linux的glibc包含libc及其扩展.&lt;/p&gt;
&lt;p&gt;Windows的msvcrt包含libc及其扩展.&lt;/p&gt;
&lt;p&gt;其它和C相关的标准：&lt;/p&gt;
&lt;p&gt;BSD&lt;/p&gt;
&lt;p&gt;System V&lt;/p&gt;
&lt;p&gt;XPG&lt;/p&gt;
&lt;p&gt;SUS&lt;/p&gt;
&lt;h1 id=&#34;glibc&#34;&gt;glibc&lt;/h1&gt;
&lt;p&gt;Linux的标准C库glibc&lt;/p&gt;
&lt;p&gt;遵循ISO C11 和 POSIX.1-2008, 还包括一些其它标准。&lt;/p&gt;
&lt;p&gt;关于ISO C 和 POSIX参考另外两篇博文。&lt;/p&gt;
&lt;h1 id=&#34;msvcrt&#34;&gt;msvcrt&lt;/h1&gt;
&lt;p&gt;windows的标准c库msvcrt.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;c注释&#34;&gt;C注释&lt;/h1&gt;
&lt;p&gt;单行注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// comment

/* comment */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多行注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*
 * comment1
 * commenet2
 */
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;文档&#34;&gt;文档&lt;/h1&gt;
&lt;p&gt;C程序可以用doxygen从程序中提取文档。&lt;/p&gt;
&lt;p&gt;文档注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * @file
 * @brief
 * @author
 * @date
 * @version
 * @copyright
 */
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;编译和链接&#34;&gt;编译和链接&lt;/h1&gt;
&lt;p&gt;编译只检查语法错误和函数以及变量是否申明．将*.c源文件编译成*.o目标文件．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcc -g -Wall -I/head/file/path -c -o helloworld.o helloworld.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;链接检查函数和变量的定义．将*.o目标文件链接之后生成可执行文件，或者打包成库文件*.a或*.so.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# normal
gcc -g -Wall -o helloworld helloworld.o
# static library *.a
gcc -g -Wall -o libstatic.a helloworld.o -L/static/lib/path -lstatic
# dynamic library *.o
gcc -g -Wall -o libdynamic.so helloworld.o -L/dynamic/lib/path -ldynamic -Wl, -rpath=/dynamic/lib/path
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
