<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Morgoth</title>
    <link>https://canuxcheng.com/tags/testing/</link>
    <description>Recent content in Testing on Morgoth</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Mar 2017 09:41:39 +0000</lastBuildDate>
    <atom:link href="https://canuxcheng.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing</title>
      <link>https://canuxcheng.com/post/testing/</link>
      <pubDate>Wed, 01 Mar 2017 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/testing/</guid>
      <description>&lt;h1 id=&#34;qa&#34;&gt;QA&lt;/h1&gt;&#xA;&lt;p&gt;Quality Assurance&lt;/p&gt;&#xA;&lt;p&gt;QA主要就是进行软件测试相关的工作.&lt;/p&gt;&#xA;&lt;p&gt;软件测试就是使用人工或自动的手段来运行或测量软件系统的过程，以检验软件系统是否满足规定的要求，并找出与预期结果之间的差异．&lt;/p&gt;&#xA;&lt;p&gt;软件测试五个要素：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;质量&lt;/li&gt;&#xA;&lt;li&gt;人员&lt;/li&gt;&#xA;&lt;li&gt;技术&lt;/li&gt;&#xA;&lt;li&gt;流程&lt;/li&gt;&#xA;&lt;li&gt;资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试两个目标：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;测试覆盖率&lt;/li&gt;&#xA;&lt;li&gt;测试效率&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试阶段：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单元测试(Unit Testing)&lt;/li&gt;&#xA;&lt;li&gt;集成测试(Integration Testing)&lt;/li&gt;&#xA;&lt;li&gt;系统测试(System Testing)&lt;/li&gt;&#xA;&lt;li&gt;验收测试(Acceptance Testing)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试的手段：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;手动测试/自动化测试&lt;/li&gt;&#xA;&lt;li&gt;静态测试/动态测试&lt;/li&gt;&#xA;&lt;li&gt;黑盒测试/白盒测试&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试的类型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;性能测试&lt;/li&gt;&#xA;&lt;li&gt;稳定性测试&lt;/li&gt;&#xA;&lt;li&gt;安全测试&lt;/li&gt;&#xA;&lt;li&gt;可用性测试&lt;/li&gt;&#xA;&lt;li&gt;兼容性测试&lt;/li&gt;&#xA;&lt;li&gt;文档测试&lt;/li&gt;&#xA;&lt;li&gt;本地化测试&lt;/li&gt;&#xA;&lt;li&gt;冒烟测试&lt;/li&gt;&#xA;&lt;li&gt;功能测试Functional Testing&lt;/li&gt;&#xA;&lt;li&gt;回归测试Regression Testing&lt;/li&gt;&#xA;&lt;li&gt;用户界面测试UI Testing&lt;/li&gt;&#xA;&lt;li&gt;端到端测试End-To-End Testing&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试的模型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传统的瀑布模型&lt;/li&gt;&#xA;&lt;li&gt;V模型&lt;/li&gt;&#xA;&lt;li&gt;W模型&lt;/li&gt;&#xA;&lt;li&gt;X模型&lt;/li&gt;&#xA;&lt;li&gt;H模型&lt;/li&gt;&#xA;&lt;li&gt;敏捷测试模型(金字塔模式)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试的模式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;金字塔模式Ideal Test Automation Pyramid&lt;/li&gt;&#xA;&lt;li&gt;蛋筒冰激凌模式Ice Cream Cone&lt;/li&gt;&#xA;&lt;li&gt;双金字塔模式Dual Test Pyramid&lt;/li&gt;&#xA;&lt;li&gt;纸杯蛋糕模式Cupcake&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;test-automation-pyramid&#34;&gt;Test Automation Pyramid&lt;/h1&gt;&#xA;&lt;p&gt;Mike Cohn的测试金字塔&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/bliki/TestPyramid.html&#34;&gt;https://martinfowler.com/bliki/TestPyramid.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Automated GUI Tests(10%)&lt;/li&gt;&#xA;&lt;li&gt;Automated Service Tests(Component/Integration/API)(20%)&lt;/li&gt;&#xA;&lt;li&gt;Automated Unit Tests(70%)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;unit-test单元测试&#34;&gt;Unit Test/单元测试&lt;/h1&gt;&#xA;&lt;p&gt;单元测试是开发者编写的测试一个单元（函数／类）的功能是否符合预期．&lt;/p&gt;</description>
    </item>
    <item>
      <title>RobotFramework</title>
      <link>https://canuxcheng.com/post/testing_robotframework/</link>
      <pubDate>Sat, 25 Feb 2017 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/testing_robotframework/</guid>
      <description>&lt;h1 id=&#34;robot-framework&#34;&gt;Robot Framework&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/robotframework/robotframework&#34;&gt;https://github.com/robotframework/robotframework&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/robotframework/QuickStartGuide&#34;&gt;https://github.com/robotframework/QuickStartGuide&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;支持python和java的API.&lt;/p&gt;&#xA;&lt;p&gt;Robot Framework is a generic test automation framework for acceptance testing and acceptance test-driven development (ATDD).&lt;/p&gt;&#xA;&lt;p&gt;Install:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ pip install robotframework&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Modular:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Test Data&lt;/li&gt;&#xA;&lt;li&gt;Robot Framework(test data syntax)&lt;/li&gt;&#xA;&lt;li&gt;Test Libraries(test library API) + Test Tools&lt;/li&gt;&#xA;&lt;li&gt;System under Test(system interface)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Use:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ robot --version&#xA;$ robot [options] data_sources&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;会生成三个文件：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;output.xml&lt;/li&gt;&#xA;&lt;li&gt;log.html&lt;/li&gt;&#xA;&lt;li&gt;report.html&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;setting-table&#34;&gt;setting table&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;*** Settings ***&#xA;# 前三个是加载外部文件&#xA;Library    Selenium2Library # 需要在sys.path路径里面&#xA;Resource    ${RESOURCES}/common.tsv&#xA;Variables    ${RESOURCES}/common.py&#xA;Documentation    Docs&#xA;Metadata    Version    2.0&#xA;Suite Setup&#xA;Suite Teardown&#xA;Force Tags&#xA;Default Tags&#xA;Test Setup&#xA;Test Teardown&#xA;Test Template&#xA;Test Timeout&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;test-case-table&#34;&gt;Test Case table&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/robotframework/HowToWriteGoodTestCases&#34;&gt;https://github.com/robotframework/HowToWriteGoodTestCases&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Selenium</title>
      <link>https://canuxcheng.com/post/testing_selenium/</link>
      <pubDate>Sat, 25 Feb 2017 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/testing_selenium/</guid>
      <description>&lt;h1 id=&#34;selenium&#34;&gt;Selenium&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/selenium&#34;&gt;https://github.com/SeleniumHQ/selenium&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;用于基于浏览器的web应用的自动化测试工具集．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;selenium1: deprecated.&#xA;selenium2: 默认支持firefox&amp;lt;=46. 支持python2.6+, python3.2+&#xA;selenium3: 支持firefox47+, 所有浏览器都需要安装webdriver.支持python2.6+, python3.3+, 必须重启OS.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;支持python, java, javascript等API.&lt;/p&gt;&#xA;&lt;p&gt;默认安装selenium3:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ pip install selenium&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;selenium3需要安装相应浏览器的driver, 然后重启OS:&lt;/p&gt;&#xA;&lt;p&gt;selenium, driver, browser三个版本都需要兼容才能工作．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;winfows放在C:\Python\Scripts\&#xA;linux放在/usr/local/bin/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/downloads&#34;&gt;https://sites.google.com/a/chromium.org/chromedriver/downloads&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mozilla/geckodriver/releases&#34;&gt;https://github.com/mozilla/geckodriver/releases&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;[Deprecated] Remote Control: 也就是selenium1.selenium2依然保留了selenium1的API.但是selenium3会彻底删除RC的API.&lt;/p&gt;&#xA;&lt;p&gt;[Deprecated] IDE: selenium IDE是一个firefox的插件，用于记录浏览器上的测试步骤，能用于生成测试代码，并且转换成编程语言．但是已经被WebDriver取代．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;webdriver&#34;&gt;WebDriver&lt;/h1&gt;&#xA;&lt;p&gt;也就是selenium2.已经取代了selenium RC和selenium IDE.&lt;/p&gt;&#xA;&lt;p&gt;python的API参考python博客．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;grid&#34;&gt;Grid&lt;/h1&gt;&#xA;&lt;p&gt;Selenium Grid用于分布式测试&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;定位元素&#34;&gt;定位元素&lt;/h1&gt;&#xA;&lt;p&gt;对应的python的API参考python博文．&lt;/p&gt;&#xA;&lt;p&gt;selenium提供８种定位web页面中元素的方法：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;id&lt;/li&gt;&#xA;&lt;li&gt;name&lt;/li&gt;&#xA;&lt;li&gt;class&lt;/li&gt;&#xA;&lt;li&gt;tag&lt;/li&gt;&#xA;&lt;li&gt;link&lt;/li&gt;&#xA;&lt;li&gt;partial_link&lt;/li&gt;&#xA;&lt;li&gt;通过xpath&lt;/li&gt;&#xA;&lt;li&gt;通过css&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在浏览器通过F12快捷键进入调试模式获取．&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
