<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Testing on Morgoth</title>
        <link>https://canuxcheng.com/tags/testing/</link>
        <description>Recent content in Testing on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 01 Mar 2017 09:41:39 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/tags/testing/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Testing</title>
        <link>https://canuxcheng.com/post/testing/</link>
        <pubDate>Wed, 01 Mar 2017 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/testing/</guid>
        <description>&lt;h1 id=&#34;qa&#34;&gt;QA&lt;/h1&gt;
&lt;p&gt;Quality Assurance&lt;/p&gt;
&lt;p&gt;QA主要就是进行软件测试相关的工作.&lt;/p&gt;
&lt;p&gt;软件测试就是使用人工或自动的手段来运行或测量软件系统的过程，以检验软件系统是否满足规定的要求，并找出与预期结果之间的差异．&lt;/p&gt;
&lt;p&gt;软件测试五个要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;质量&lt;/li&gt;
&lt;li&gt;人员&lt;/li&gt;
&lt;li&gt;技术&lt;/li&gt;
&lt;li&gt;流程&lt;/li&gt;
&lt;li&gt;资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试两个目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试覆盖率&lt;/li&gt;
&lt;li&gt;测试效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单元测试(Unit Testing)&lt;/li&gt;
&lt;li&gt;集成测试(Integration Testing)&lt;/li&gt;
&lt;li&gt;系统测试(System Testing)&lt;/li&gt;
&lt;li&gt;验收测试(Acceptance Testing)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试的手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动测试/自动化测试&lt;/li&gt;
&lt;li&gt;静态测试/动态测试&lt;/li&gt;
&lt;li&gt;黑盒测试/白盒测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能测试&lt;/li&gt;
&lt;li&gt;稳定性测试&lt;/li&gt;
&lt;li&gt;安全测试&lt;/li&gt;
&lt;li&gt;可用性测试&lt;/li&gt;
&lt;li&gt;兼容性测试&lt;/li&gt;
&lt;li&gt;文档测试&lt;/li&gt;
&lt;li&gt;本地化测试&lt;/li&gt;
&lt;li&gt;冒烟测试&lt;/li&gt;
&lt;li&gt;功能测试Functional Testing&lt;/li&gt;
&lt;li&gt;回归测试Regression Testing&lt;/li&gt;
&lt;li&gt;用户界面测试UI Testing&lt;/li&gt;
&lt;li&gt;端到端测试End-To-End Testing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试的模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统的瀑布模型&lt;/li&gt;
&lt;li&gt;V模型&lt;/li&gt;
&lt;li&gt;W模型&lt;/li&gt;
&lt;li&gt;X模型&lt;/li&gt;
&lt;li&gt;H模型&lt;/li&gt;
&lt;li&gt;敏捷测试模型(金字塔模式)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试的模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;金字塔模式Ideal Test Automation Pyramid&lt;/li&gt;
&lt;li&gt;蛋筒冰激凌模式Ice Cream Cone&lt;/li&gt;
&lt;li&gt;双金字塔模式Dual Test Pyramid&lt;/li&gt;
&lt;li&gt;纸杯蛋糕模式Cupcake&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;test-automation-pyramid&#34;&gt;Test Automation Pyramid&lt;/h1&gt;
&lt;p&gt;Mike Cohn的测试金字塔&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://martinfowler.com/bliki/TestPyramid.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://martinfowler.com/bliki/TestPyramid.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automated GUI Tests(10%)&lt;/li&gt;
&lt;li&gt;Automated Service Tests(Component/Integration/API)(20%)&lt;/li&gt;
&lt;li&gt;Automated Unit Tests(70%)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;unit-test单元测试&#34;&gt;Unit Test/单元测试&lt;/h1&gt;
&lt;p&gt;单元测试是开发者编写的测试一个单元（函数／类）的功能是否符合预期．&lt;/p&gt;
&lt;p&gt;单元测试的覆盖率是指测试的单元调用了多少代码．&lt;/p&gt;
&lt;p&gt;Unit Test的工具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java: Junit&lt;/li&gt;
&lt;li&gt;Python: unittest(pyunit), nose2, pytest&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;test-automation&#34;&gt;Test Automation&lt;/h1&gt;
&lt;p&gt;敏捷测试的核心就是自动化测试．&lt;/p&gt;
&lt;p&gt;自动化测试框架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Robot Framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ATDD: Acceptance test-driven development&lt;/p&gt;
&lt;p&gt;BDD: Behavior-driven development&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;big-list-of-naughty-strings&#34;&gt;big-list-of-naughty-strings&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/minimaxir/big-list-of-naughty-strings&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/minimaxir/big-list-of-naughty-strings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;测试中谨慎使用的字符串．&lt;/p&gt;
</description>
        </item>
        <item>
        <title>RobotFramework</title>
        <link>https://canuxcheng.com/post/testing_robotframework/</link>
        <pubDate>Sat, 25 Feb 2017 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/testing_robotframework/</guid>
        <description>&lt;h1 id=&#34;robot-framework&#34;&gt;Robot Framework&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/robotframework/robotframework&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/robotframework/robotframework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/robotframework/QuickStartGuide&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/robotframework/QuickStartGuide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;支持python和java的API.&lt;/p&gt;
&lt;p&gt;Robot Framework is a generic test automation framework for acceptance testing and acceptance test-driven development (ATDD).&lt;/p&gt;
&lt;p&gt;Install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install robotframework
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Modular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test Data&lt;/li&gt;
&lt;li&gt;Robot Framework(test data syntax)&lt;/li&gt;
&lt;li&gt;Test Libraries(test library API) + Test Tools&lt;/li&gt;
&lt;li&gt;System under Test(system interface)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ robot --version
$ robot [options] data_sources
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会生成三个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;output.xml&lt;/li&gt;
&lt;li&gt;log.html&lt;/li&gt;
&lt;li&gt;report.html&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;setting-table&#34;&gt;setting table&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;*** Settings ***
# 前三个是加载外部文件
Library    Selenium2Library # 需要在sys.path路径里面
Resource    ${RESOURCES}/common.tsv
Variables    ${RESOURCES}/common.py
Documentation    Docs
Metadata    Version    2.0
Suite Setup
Suite Teardown
Force Tags
Default Tags
Test Setup
Test Teardown
Test Template
Test Timeout
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;test-case-table&#34;&gt;Test Case table&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/robotframework/HowToWriteGoodTestCases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/robotframework/HowToWriteGoodTestCases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;test case:data_sources就是test cases files.robotframework测试用例可以使用带参数的简单表格语法，也可以是不带参数的关键字表格,也可以是数据驱动测试用例.&lt;/p&gt;
&lt;p&gt;Test Cases由keywords和可能的arguments组成．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Test Cases ***
Test Case Name
    [Documentation]    Docs
    [Tags]
    [Setup]
    [Teardown]
    [Template]
    [Timeout]
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test Case分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workflow tests&lt;/li&gt;
&lt;li&gt;higher-level tests&lt;/li&gt;
&lt;li&gt;Data-driven tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;keywords-table&#34;&gt;Keywords table&lt;/h1&gt;
&lt;p&gt;key word:测试用例使用关键词创建,关键词的2个来源是库关键字和用户关键字．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Keywords ***
Keyword name
    [Documentation]    docs
    [Tags]
    [Arguments]
    [Return]
    [Teardown]
    [Timeout]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keywords分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Library keywords&lt;/li&gt;
&lt;li&gt;User keywords&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;variables&#34;&gt;Variables&lt;/h1&gt;
&lt;p&gt;variables:测试用例中可能变化的数据定义成变量．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Variables ***
${ScalarVar}    first one    second one
@{ListVar}     one    two
&amp;amp;{DictVar}     key=value    key1=value1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;变量类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scalar variables标量&lt;/li&gt;
&lt;li&gt;list variables列表&lt;/li&gt;
&lt;li&gt;dictionary variables字典&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;organizing-test-cases&#34;&gt;Organizing test cases&lt;/h1&gt;
&lt;p&gt;test suites:测试用例的集合叫测试套件．每个包含测试用例的输入文件组成一个测试套件．&lt;/p&gt;
&lt;p&gt;test setup/suit setup: 在测试之前执行某些关键词．&lt;/p&gt;
&lt;p&gt;test teardown/suit teardown: 在测试之后执行某些关键词．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Settings ***
Suite Setup    Action/Keyword
Test Setup
Suite Teardown    Action/Keyword
Test Teardown
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tags:给测试用例设置标签，以便给他们自由的元数据．&lt;/p&gt;
&lt;p&gt;给测试套件加标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Settings ***
Force Tags    quickstart # 这个是case的强制的tag.
Default Tags    example smoke # 这个是case的默认的tag.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自定义标签注意多个标签之间用四个空格区分．&lt;/p&gt;
&lt;p&gt;给单个case加标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 自定义的tag名字多个单词最好用-连接，不要用空格．
[Tags]    Your-tags1    tag2 # 这个是自定义的tag.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;libraries&#34;&gt;Libraries&lt;/h1&gt;
&lt;p&gt;内置标准库和第三方库，自定义库都可以作为keywords.&lt;/p&gt;
&lt;p&gt;robotframework的强大之处在于可以根据自己的需要开发自己的库．&lt;/p&gt;
&lt;h2 id=&#34;standardbuild-in-libraries&#34;&gt;standard(build-in libraries)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BuiltIn&lt;/p&gt;
&lt;p&gt;内置标准库，默认唯一自动加载的库．其它的库都需要手动加载．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # Comment关键字用来注释．
  Comment    this is comment
  # Evaluate关键字用来调用python程序．
  ${var}    Evaluate    random.randint(1000, 999)    random
  # Import Library关键字用来导入python模块．
  Import Library    mytest.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DateTime&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dialogs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OperatingSystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remote&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Screenshot&lt;/p&gt;
&lt;p&gt;用于测试过程中的截屏．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # Take Screenshot关键字用来截屏
  Take Screenshot
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Telnet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XML&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;external&#34;&gt;External&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;selenium2library&lt;/p&gt;
&lt;p&gt;用于web自动化测试．提供了丰富的定位器，包括id,name, xpath, css.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/robotframework/Selenium2Library&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/robotframework/Selenium2Library&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  $ pip install robotframework-selenium2library
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other&#34;&gt;other&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tools&#34;&gt;Tools&lt;/h1&gt;
&lt;p&gt;robot framework相关的工具．&lt;/p&gt;
&lt;h2 id=&#34;build-in-tools&#34;&gt;build-in tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rebot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testdoc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Libdoc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tidy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;editors&#34;&gt;editors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RIDE&lt;/p&gt;
&lt;p&gt;robot framework的IDE.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/robotframework/RIDE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/robotframework/RIDE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # Only wxPython 2.8.12.1 with Unicode support is officially supported
  $ pip install robotframework-ride
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # 添加windows的桌面：
  # C:\Python27\python.exe -c &amp;quot;from robotide import main; main()&amp;quot;
  # C:\Python27\Lib\site-packages\robotide\widgets\robot.ico
  &amp;gt; ride.py
  $ ride.py
  # F5搜索关键字
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;build&#34;&gt;build&lt;/h2&gt;
&lt;h2 id=&#34;other-1&#34;&gt;other&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;robot-command&#34;&gt;robot command&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ robot tests.robot
$ robot -t/--test [test cases] tests.robot
$ robot -t My*test*case* tests.robot # 例如case叫My test case just for test.
$ robot -s/--suite [test suites] tests.robot
$ robot -i/--include [tags] tests.robot
$ robot -i My-test-tag tests.robot # 例如tag叫My-test-tag.
$ robot -e/--exclude [tags] tests.robot
-d --outputdir dir # 存放output, log, report文件的路径.
-o --output file
-l --log file
-r --report file
-W --consolewidth chars
-C --consolecolors auto|on|ansi|off
-K --consolemarkers auto|on|off
-L --loglevel level    # 格式LOGLEVEL:DEFAULT, 可选TRACE, DEBUG, INFO (default), WARN, NONE
# DEFAULT是log file中默认显示的日志级别
-b --debugfile # 存放debug log的文件．
-T --timestampoutputs # 表示所有在outputdir里面的文件都自动加时间戳．
-P --pythonpath path * # 指定PYTHONPATH, 可以指定正在开发的库用来测试，而不需要安装到site-packages.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;library&#34;&gt;Library&lt;/h1&gt;
&lt;p&gt;robotframework的灵活就在于可以自己开发第三方库，实现和自己业务相关的关键字．&lt;/p&gt;
&lt;p&gt;在robot中导入的这个库必须在sys.path路径里面．&lt;/p&gt;
&lt;p&gt;库API的三种类型： 静态库, 动态库, 混合库.&lt;/p&gt;
&lt;p&gt;以Selenium2Library为例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Selenium2Library
|-- docs
|-- tests
|-- Selenium2Library
    |-- __init__.py
    |-- keywords/*.py
    |-- ...
|-- setup.py
|-- ...

$ pip install robotframework-selenium2library
# C:\Python27\Lib\site-packages\Selenium2Library
# /usr/local/lib/python2.7/dist-packages/Selenium2Library
# 通过ride导入该库后，可以用F5查看关键字的帮助.

# __init__.py
# 一个类继承所有关键字所在的类．rf通过导入这个类导入所有关键字．
from .keywords import *
from .utils import LibraryListener
...

__version__ =  1.0.0

class Selenium2Library(keywords):
    &amp;quot;&amp;quot;&amp;quot;docs.&amp;quot;&amp;quot;&amp;quot;

    ROBOT_LIBRARY_SCOPE = &#39;GLOBAL&#39;
    ROBOT_LIBRARY_VERSION = __version__

    def __init__(self, ...):
       &amp;quot;&amp;quot;&amp;quot;docs&amp;quot;&amp;quot;&amp;quot;
       self.ROBOT_LIBRARY_LISTENER = LibraryListener()
       ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;static-librarty-api&#34;&gt;Static librarty API&lt;/h1&gt;
&lt;p&gt;使用一个模块或一个类，方法直接映射到关键字名称．静态API是最基本最常用的．&lt;/p&gt;
&lt;p&gt;robotframework在类和模块中寻找关键字对应的方法，会忽略单下划线或双下划线开头的方法．&lt;/p&gt;
&lt;p&gt;robotframework在类中寻找关键字对应的方法，不区分大小写，会自动忽略空格和下划线．&lt;/p&gt;
&lt;p&gt;robotframework测试库实现为类时，基类中的方法也被识别为关键字．&lt;/p&gt;
&lt;p&gt;robotframework测试库实现为模块时，导入的模块的命名空间的可能函数也被识别为关键字．此时要防止导入的库中的方法成为关键字．&lt;/p&gt;
&lt;p&gt;关键字跑出异常，该关键字状态就是failed,否则就是pass.&lt;/p&gt;
&lt;h1 id=&#34;dylamic-library-api&#34;&gt;dylamic library API&lt;/h1&gt;
&lt;p&gt;可以在运行时动态确定要实现的关键字的名称以及执行方法．&lt;/p&gt;
&lt;h1 id=&#34;hybird-library-api&#34;&gt;hybird library API&lt;/h1&gt;
&lt;p&gt;静态和动态都有的方式．&lt;/p&gt;
&lt;h1 id=&#34;测试库范围&#34;&gt;测试库范围&lt;/h1&gt;
&lt;p&gt;要确保一个测试用例对状态的更改不会影响其它用例．&lt;/p&gt;
&lt;p&gt;测试库可以控制何时使用类属性创建新库．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ROBOT_LIBRARY_SCOPE
# Global: 只有一个instance创建，并且所有test cases共享．
# TEST CASE: 为每个test case创建一个instance.
# TEST SUITE: 为每个test suite创建一个instance.
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;测试库版本&#34;&gt;测试库版本&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;ROBOT_LIBRARY_VERSION
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;指定文档格式&#34;&gt;指定文档格式&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;ROBOT_LIBRARY_DOC_FORMAT
# reST: 需要安装docutils模块
# ROBOT: 默认的html格式
# TEXT:　纯文本格式
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;listener&#34;&gt;Listener&lt;/h1&gt;
&lt;p&gt;Listener监听器接口允许外部监听器获取关于测试执行的通知．&lt;/p&gt;
&lt;p&gt;同名的默认方法会先调用，然后调用自定义的方法．&lt;/p&gt;
&lt;p&gt;可以实现的方法有：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;start_suite(name, attribute)/end_suite(name, attribute) # test suite开始/结束的时候调用
start_test(name, attribute)/end_test(name, attribute) # test case开始/结束的时候调用
start_keyword(name, attributes)/end_keyword(name, attribute) # keyword开始/结束的时候调用
close() # 相当于teardown.
log_message(message) # 当执行的keyword写log的时候调用
message(message) # 当framework写system log的时候调用
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-interface-methods&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-interface-methods&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# librarylistener.py
# rf的外部监听程序

from robot.api import logger
...

class LibraryListener(object):
    &amp;quot;&amp;quot;&amp;quot;docs&amp;quot;&amp;quot;&amp;quot;
    # version 2 for rf&amp;gt;=2.1
    # version 3 for rf&amp;gt;=3.0
    ROBOT_LISTENER_API_VERSION = 2
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Selenium</title>
        <link>https://canuxcheng.com/post/testing_selenium/</link>
        <pubDate>Sat, 25 Feb 2017 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/testing_selenium/</guid>
        <description>&lt;h1 id=&#34;selenium&#34;&gt;Selenium&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/SeleniumHQ/selenium&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/SeleniumHQ/selenium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用于基于浏览器的web应用的自动化测试工具集．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;selenium1: deprecated.
selenium2: 默认支持firefox&amp;lt;=46. 支持python2.6+, python3.2+
selenium3: 支持firefox47+, 所有浏览器都需要安装webdriver.支持python2.6+, python3.3+, 必须重启OS.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;支持python, java, javascript等API.&lt;/p&gt;
&lt;p&gt;默认安装selenium3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install selenium
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;selenium3需要安装相应浏览器的driver, 然后重启OS:&lt;/p&gt;
&lt;p&gt;selenium, driver, browser三个版本都需要兼容才能工作．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;winfows放在C:\Python\Scripts\
linux放在/usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sites.google.com/a/chromium.org/chromedriver/downloads&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://sites.google.com/a/chromium.org/chromedriver/downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozilla/geckodriver/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/mozilla/geckodriver/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[Deprecated] Remote Control: 也就是selenium1.selenium2依然保留了selenium1的API.但是selenium3会彻底删除RC的API.&lt;/p&gt;
&lt;p&gt;[Deprecated] IDE: selenium IDE是一个firefox的插件，用于记录浏览器上的测试步骤，能用于生成测试代码，并且转换成编程语言．但是已经被WebDriver取代．&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;webdriver&#34;&gt;WebDriver&lt;/h1&gt;
&lt;p&gt;也就是selenium2.已经取代了selenium RC和selenium IDE.&lt;/p&gt;
&lt;p&gt;python的API参考python博客．&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;grid&#34;&gt;Grid&lt;/h1&gt;
&lt;p&gt;Selenium Grid用于分布式测试&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;定位元素&#34;&gt;定位元素&lt;/h1&gt;
&lt;p&gt;对应的python的API参考python博文．&lt;/p&gt;
&lt;p&gt;selenium提供８种定位web页面中元素的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;tag&lt;/li&gt;
&lt;li&gt;link&lt;/li&gt;
&lt;li&gt;partial_link&lt;/li&gt;
&lt;li&gt;通过xpath&lt;/li&gt;
&lt;li&gt;通过css&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在浏览器通过F12快捷键进入调试模式获取．&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
