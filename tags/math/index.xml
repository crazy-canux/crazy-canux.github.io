<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Math on Morgoth</title>
        <link>https://canuxcheng.com/tags/math/</link>
        <description>Recent content in Math on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 01 Jan 2018 10:49:21 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/tags/math/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GSL_math</title>
        <link>https://canuxcheng.com/post/gsl_math/</link>
        <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/gsl_math/</guid>
        <description>&lt;h1 id=&#34;math&#34;&gt;math&lt;/h1&gt;
&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;
&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;
&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mathbig&#34;&gt;math/big&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mathcmplx&#34;&gt;math/cmplx&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mathrand&#34;&gt;math/rand&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sort&#34;&gt;sort&lt;/h1&gt;
&lt;h2 id=&#34;functions-1&#34;&gt;functions&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;func Ints(a []int)
func IntAreSorted(a []int) bool
func SearchInts(a []int, x int) int

func Float64s(a []float64)
func Float64sArerSorted(a []float64) bool
func SearchFloat64s(a []float64, x float64) int

func Strings(a []string)
func StringsAreSorted(a []string) bool
func SearchStrings(a []string, x string) int

func Sort(data Interface)
func Stable(data Interface)
func IsSorted(data Interface) bool
func Reverse(data Interface) Interface
// 二分查找
func Search(n int, f func(int) bool) int
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;interface&#34;&gt;Interface&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;type Interface interface {
    Len() int
    Less(i, j int) bool
    Swap(i, j int)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;initslice&#34;&gt;InitSlice&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;type InitSlice []int
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;float64slice&#34;&gt;Float64Slice&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;type Float64Slice []float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;stringslice&#34;&gt;StringSlice&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;type StringSlice []string
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>PSL_Math</title>
        <link>https://canuxcheng.com/post/psl_math/</link>
        <pubDate>Fri, 12 Aug 2016 16:56:45 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/psl_math/</guid>
        <description>&lt;h1 id=&#34;numeric-and-mathematical-modules&#34;&gt;Numeric and Mathematical Modules&lt;/h1&gt;
&lt;h2 id=&#34;random&#34;&gt;random&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;import random
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;classes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# random.Random
Random()
# methods:
seed([self,], a=None)
randint(a, b) # 随机一个[a,b]中的整数．
choice(self, seq) # 从seq中随机选择一个元素
uniform(self, a, b) # 随机一个[a,b]中的浮点数．
sample(self, population, k)
randint(self, a, b)
randrange(self, start, stop=None, step=1, _int=&amp;lt;type &#39;int&#39;&amp;gt;, _maxwidth=9007199254740992L)

# random.SystemRandom(Random)
SystemRandom(Random)

# random.WichmannHill(Random)
WichmannHill(Random)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;random(self) # 随机一个小于１的数．
# 所有Random类的methods也可以直接使用．
seed(self, a=None) # 设置随机数种子．
uniform(self, a, b) # 随机一个[a,b]中的浮点数．
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fractions&#34;&gt;fractions&lt;/h2&gt;
&lt;h2 id=&#34;cmath&#34;&gt;cmath&lt;/h2&gt;
&lt;h2 id=&#34;math&#34;&gt;math&lt;/h2&gt;
&lt;h2 id=&#34;numbers&#34;&gt;numbers&lt;/h2&gt;
&lt;h2 id=&#34;decimal&#34;&gt;decimal&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;functional-programming-modules&#34;&gt;Functional Programming Modules&lt;/h1&gt;
&lt;h2 id=&#34;functools&#34;&gt;functools&lt;/h2&gt;
&lt;p&gt;函数式编程相关的模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import functools
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;classes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# functools.partial
partial(func, *args, **keywords) # 返回functools.partial类型的对象, partial是functools内置的偏函数类类型.
RED = partial(lambda content, color: color + str(content) + Fore.RESET, color=Fore.RED)
RED(&amp;quot;show me red&amp;quot;) == lambda content, color: Fore.RED + str(&amp;quot;show me red&amp;quot;) + Fore.RESET
# 相当于通过partial传一个参数给func，然后剩下的参数通过返回的偏函数传入．这样可以固化一部分参数．
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reduce(function, sequence[, initial]) # 如果initial存在，就把initial作为function的第一个参数，如果function有两个参数，就再从sequence取第一个元素作为function的第二个参数，然后调用function，返回的结果作为function的第一个参数，再继续从sequence获取元素作为参数，继续调用function, 直到sequence为空．
reduce(lambda x,y: x+y, range(5))

cmp_to_key(mycmp)
total_ordering(cls)
update_wrapper(wrapper, wrapped, assigned=(&#39;__module__&#39;, &#39;__name__&#39;, &#39;__doc__&#39;), updated=(&#39;__dict__&#39;,))

wraps(wrapped, assigned=(&#39;__module__&#39;, &#39;__name__&#39;, &#39;__doc__&#39;), updated=(&#39;__dict__&#39;,))
# example:
def deco(func):
    @wraps(func):
    def wrapper(*args, **kwargs):
        &amp;quot;&amp;quot;&amp;quot;Docs for wrapper.&amp;quot;&amp;quot;&amp;quot;
        pass

@deco
def foo()
    &amp;quot;&amp;quot;&amp;quot;Docs for new function.&amp;quot;&amp;quot;&amp;quot;
    pass

# 不用wraps被装饰的函数foo的属性其实是原来函数的属性，也就是wrapper的属性
# 用了wraps被装饰的函数foo的属性就是foo自己的属性．
print foo.__name__
print foo.__doc__
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operator&#34;&gt;operator&lt;/h2&gt;
&lt;p&gt;操作符相关的模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import operator
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;itertools&#34;&gt;itertools&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;import itertools
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
