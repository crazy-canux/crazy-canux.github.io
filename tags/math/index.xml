<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Math on Morgoth</title>
    <link>https://canuxcheng.com/tags/math/</link>
    <description>Recent content in Math on Morgoth</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2018 10:49:21 +0000</lastBuildDate>
    <atom:link href="https://canuxcheng.com/tags/math/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GSL_math</title>
      <link>https://canuxcheng.com/post/gsl_math/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_math/</guid>
      <description>&lt;h1 id=&#34;math&#34;&gt;math&lt;/h1&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;mathbig&#34;&gt;math/big&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;mathcmplx&#34;&gt;math/cmplx&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;mathrand&#34;&gt;math/rand&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sort&#34;&gt;sort&lt;/h1&gt;&#xA;&lt;h2 id=&#34;functions-1&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;func Ints(a []int)&#xA;func IntAreSorted(a []int) bool&#xA;func SearchInts(a []int, x int) int&#xA;&#xA;func Float64s(a []float64)&#xA;func Float64sArerSorted(a []float64) bool&#xA;func SearchFloat64s(a []float64, x float64) int&#xA;&#xA;func Strings(a []string)&#xA;func StringsAreSorted(a []string) bool&#xA;func SearchStrings(a []string, x string) int&#xA;&#xA;func Sort(data Interface)&#xA;func Stable(data Interface)&#xA;func IsSorted(data Interface) bool&#xA;func Reverse(data Interface) Interface&#xA;// 二分查找&#xA;func Search(n int, f func(int) bool) int&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;interface&#34;&gt;Interface&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Interface interface {&#xA;    Len() int&#xA;    Less(i, j int) bool&#xA;    Swap(i, j int)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;initslice&#34;&gt;InitSlice&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;type InitSlice []int&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;float64slice&#34;&gt;Float64Slice&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Float64Slice []float64&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;stringslice&#34;&gt;StringSlice&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;type StringSlice []string&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>PSL_Math</title>
      <link>https://canuxcheng.com/post/psl_math/</link>
      <pubDate>Fri, 12 Aug 2016 16:56:45 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_math/</guid>
      <description>&lt;h1 id=&#34;numeric-and-mathematical-modules&#34;&gt;Numeric and Mathematical Modules&lt;/h1&gt;&#xA;&lt;h2 id=&#34;random&#34;&gt;random&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import random&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# random.Random&#xA;Random()&#xA;# methods:&#xA;seed([self,], a=None)&#xA;randint(a, b) # 随机一个[a,b]中的整数．&#xA;choice(self, seq) # 从seq中随机选择一个元素&#xA;uniform(self, a, b)&#xA;sample(self, population, k)&#xA;randint(self, a, b)&#xA;randrange(self, start, stop=None, step=1, _int=&amp;lt;type &#39;int&#39;&amp;gt;, _maxwidth=9007199254740992L)&#xA;&#xA;# random.SystemRandom(Random)&#xA;SystemRandom(Random)&#xA;&#xA;# random.WichmannHill(Random)&#xA;WichmannHill(Random)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;getrandbits(k)&#xA;random(self) # 随机一个小于１的数．&#xA;# 所有Random类的methods也可以直接使用．&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;fractions&#34;&gt;fractions&lt;/h2&gt;&#xA;&lt;h2 id=&#34;functools&#34;&gt;functools&lt;/h2&gt;&#xA;&lt;p&gt;函数式编程相关的模块&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import functools&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# functools.partial&#xA;partial(func, *args, **keywords) # 返回functools.partial类型的对象, partial是functools内置的偏函数类类型.&#xA;RED = partial(lambda content, color: color + str(content) + Fore.RESET, color=Fore.RED)&#xA;RED(&amp;quot;show me red&amp;quot;) == lambda content, color: Fore.RED + str(&amp;quot;show me red&amp;quot;) + Fore.RESET&#xA;# 相当于通过partial传一个参数给func，然后剩下的参数通过返回的偏函数传入．这样可以固化一部分参数．&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
