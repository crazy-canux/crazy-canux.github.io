<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oss on Morgoth</title>
    <link>https://canuxcheng.com/tags/oss/</link>
    <description>Recent content in Oss on Morgoth</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jan 2020 20:55:52 +0800</lastBuildDate>
    <atom:link href="https://canuxcheng.com/tags/oss/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Contribution</title>
      <link>https://canuxcheng.com/post/k8s_oss/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_oss/</guid>
      <description>&lt;h1 id=&#34;kubernetes-contribution&#34;&gt;Kubernetes Contribution&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/guide/contributor-cheatsheet/README-zh.md&#34;&gt;https://github.com/kubernetes/community/blob/master/contributors/guide/contributor-cheatsheet/README-zh.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建google账号&#34;&gt;创建google账号&lt;/h2&gt;&#xA;&lt;p&gt;推荐申请一个google邮箱。&lt;/p&gt;&#xA;&lt;p&gt;在开发机配置git&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ git config --global user.email name@gmail.com   &#xA;$ git config user.email name@gmail.com            &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;签cla并阅读coc&#34;&gt;签CLA并阅读CoC&lt;/h2&gt;&#xA;&lt;p&gt;个人开发者需要签署CLA, 选择individual contributors并用github账号登陆，然后去邮箱授权；之后重新进入，再去邮箱签字。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://identity.linuxfoundation.org/projects/cncf&#34;&gt;https://identity.linuxfoundation.org/projects/cncf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;读一下CoC和CV&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cncf/foundation/blob/master/code-of-conduct-languages/zh.md&#34;&gt;https://github.com/cncf/foundation/blob/master/code-of-conduct-languages/zh.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/values.md&#34;&gt;https://github.com/kubernetes/community/blob/master/values.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置开发环境&#34;&gt;配置开发环境&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/devel/README.md#setting-up-your-dev-environment-coding-and-debugging&#34;&gt;https://github.com/kubernetes/community/blob/master/contributors/devel/README.md#setting-up-your-dev-environment-coding-and-debugging&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以在docker里面编译，也可以直接在操作系统上编译。&lt;/p&gt;&#xA;&lt;p&gt;在docker里面编译&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/ae9ca48f01ddb03731e7903cfe91ef3db9ce8990/build/README.md&#34;&gt;https://github.com/kubernetes/kubernetes/blob/ae9ca48f01ddb03731e7903cfe91ef3db9ce8990/build/README.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;build/run.sh make 只编译linux平台&#xA;build/run.sh make cross 编译所有平台&#xA;build/run.sh make kubectl KUBE_BUILD_PLATFORMS=darwin/amd64 编译指定平台的指定组件&#xA;&#xA;build/run.sh make test 单元测试&#xA;build/run.sh make test-integration 集成测试&#xA;build/run.sh make test-cmd  命令行测试&#xA;&#xA;build/copy-output.sh 将编译的binary从_output/dockerized/bin拷贝到本地&#xA;&#xA;build/make-clean.sh 清空_output&#xA;&#xA;build.shell.sh 交互模式进入编译的container&#xA;&#xA;build/release.sh 编译，测试，打包，kubernetes.tar.gz&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在操作系统上编译&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/devel/development.md#building-kubernetes-on-a-local-osshell-environment&#34;&gt;https://github.com/kubernetes/community/blob/master/contributors/devel/development.md#building-kubernetes-on-a-local-osshell-environment&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装依赖&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;sudo apt-get install build-essential&#xA;// apt: docker, rsync, jq, go, &#xA;// python: pyyaml,&#xA;&#xA;// 安装etcd用于集成测试&#xA;./hack/install-etcd.sh&#xA;export PATH=&amp;quot;$GOPATH/src/k8s.io/kubernetes/third_party/etcd:${PATH}&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;编译和测试&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contribution</title>
      <link>https://canuxcheng.com/post/go_oss/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/go_oss/</guid>
      <description>&lt;h1 id=&#34;golang-contribution&#34;&gt;Golang Contribution&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://go.dev/doc/contribute&#34;&gt;https://go.dev/doc/contribute&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建google账号&#34;&gt;创建google账号&lt;/h2&gt;&#xA;&lt;p&gt;推荐申请一个google邮箱。&lt;/p&gt;&#xA;&lt;p&gt;在开发机配置git&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ git config --global user.email name@example.com   &#xA;$ git config user.email name@example.com            &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;签cla&#34;&gt;签CLA&lt;/h2&gt;&#xA;&lt;p&gt;个人开发者需要签署CLA。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cla.developers.google.com/about/google-individual&#34;&gt;https://cla.developers.google.com/about/google-individual&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置git认证&#34;&gt;配置git认证&lt;/h2&gt;&#xA;&lt;p&gt;点击“Generate Password”， 用google邮箱登陆，根据提示配置git。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://go.googlesource.com/&#34;&gt;https://go.googlesource.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建gerrit账号&#34;&gt;创建gerrit账号&lt;/h2&gt;&#xA;&lt;p&gt;用google邮箱登陆即可。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://go-review.googlesource.com/dashboard/self&#34;&gt;https://go-review.googlesource.com/dashboard/self&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装git-codereview&#34;&gt;安装git-codereview&lt;/h2&gt;&#xA;&lt;p&gt;windows:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ go get golang.org/x/review/git-codereview@latest&#xA;$ git --exec-path&#xA;&#xA;&amp;gt; copy git-codereview.exe from GOBIN to Git\mingw64\libexec\git-core&#xA;&#xA;$ git codereview help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;linux/mac:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ go install golang.org/x/review/git-codereview@latest&#xA;$ git codereview help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;选取修改的cl&#34;&gt;选取修改的CL&lt;/h2&gt;&#xA;&lt;p&gt;从github选取一个还没有人提交CL(change log/list)的Issue进行修改。&lt;/p&gt;&#xA;&lt;p&gt;issue三种类型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;NeedsInvestigation&lt;/li&gt;&#xA;&lt;li&gt;NeedsDecision&lt;/li&gt;&#xA;&lt;li&gt;NeedsFix    选这个里面还没有CL的做&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/issues?q=is%3Aissue+is%3Aopen+label%3ANeedsFix+NOT+%22golang.org%2Fcl%22&#34;&gt;https://github.com/golang/go/issues?q=is%3Aissue+is%3Aopen+label%3ANeedsFix+NOT+%22golang.org%2Fcl%22&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;提交patch&#34;&gt;提交patch&lt;/h2&gt;&#xA;&lt;p&gt;支持github或者gerrit提交patch。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
