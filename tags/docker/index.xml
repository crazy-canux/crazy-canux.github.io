<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Morgoth</title>
    <link>https://canuxcheng.com/tags/docker/</link>
    <description>Recent content in Docker on Morgoth</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Jan 2020 21:53:40 +0800</lastBuildDate>
    <atom:link href="https://canuxcheng.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compose</title>
      <link>https://canuxcheng.com/post/cncf_compose/</link>
      <pubDate>Sat, 04 Jan 2020 21:53:40 +0800</pubDate>
      <guid>https://canuxcheng.com/post/cncf_compose/</guid>
      <description>&lt;h1 id=&#34;docker-compose&#34;&gt;docker-compose&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker/compose&#34;&gt;https://github.com/docker/compose&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过一个yaml文件来管理容器中的服务，包括网络和存储。&lt;/p&gt;&#xA;&lt;p&gt;安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;https://docs.docker.com/compose/install/&#xA;$ sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose&#xA;$ sudo chmod +x /usr/local/bin/docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;docker-compose命令&#34;&gt;docker-compose命令&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker-compose [-f &amp;lt;arg&amp;gt;...] [options] [COMMAND] [ARGS...]&#xA;-f/--file&#xA;-p/--project-name # 默认目录名&#xA;-H/--host&#xA;&#xA;# 拉取compose文件中指定的镜像&#xA;$ docker-compose -f service.yml pull&#xA;&#xA;# 根据docker-compose.yml把stack打包成一个Distributed Application Bundles文件.&#xA;$ docker-compose bundle -o &amp;lt;project name&amp;gt;.dab&#xA;&#xA;$ docker-compose start [servoce...]&#xA;$ docker-compose stop [service...]&#xA;$ docker-compose restart [service...]&#xA;$ docker-compose up -d [service...]&#xA;$ docker-compose down -v&#xA;&#xA;$ docker-compose logs -f&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;docker-composeyml&#34;&gt;docker-compose.yml&lt;/h1&gt;&#xA;&lt;p&gt;compose中的变量：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Image</title>
      <link>https://canuxcheng.com/post/cncf_image/</link>
      <pubDate>Tue, 03 Dec 2019 21:50:47 +0800</pubDate>
      <guid>https://canuxcheng.com/post/cncf_image/</guid>
      <description>&lt;h1 id=&#34;image&#34;&gt;image&lt;/h1&gt;&#xA;&lt;p&gt;容器镜像&lt;/p&gt;&#xA;&lt;p&gt;docker image driver: aufs, btrfs, devicemapper, overlay.&lt;/p&gt;&#xA;&lt;h2 id=&#34;multi-platform-images&#34;&gt;multi-platform images&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/build/building/multi-platform/&#34;&gt;https://docs.docker.com/build/building/multi-platform/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;qemu&#34;&gt;qemu&lt;/h3&gt;&#xA;&lt;p&gt;使用qume:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 安装bitfmt&#xA;docker run --privileged --rm tonistiigi/binfmt --install all&#xA;&#xA;// 查看支持的平台&#xA;ls -l /proc/sys/fs/binfmt_misc/qemu-*&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;multiple-native-nodes&#34;&gt;multiple native nodes&lt;/h3&gt;&#xA;&lt;p&gt;安装&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// linux&#xA;sudo apt install docker-buildx-plugin&#xA;&#xA;// mac&#xA;brew install docker-buildx&#xA;mkdir -p ~/.docker/cli-plugins&#xA;ln -sfn $(which docker-buildx) ~/.docker/cli-plugins/docker-buildx&#xA;docker buildx install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看版本&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker buildx version&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;管理builder instance&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker buildx create&#xA;--append 添加node到builder实例。&#xA;--leave 从builder实例删除node&#xA;--driver Driver to use(&amp;quot;docker&amp;quot;, &amp;quot;docker-container&amp;quot;, &amp;quot;kubernetes&amp;quot;)&#xA;--name&#xA;--use&#xA;--node&#xA;--platform &#xA;--bootstrap 启动实例（以容器的形式启动）&#xA;&#xA;// 以本地是amd64为例，创建一个实例.&#xA;docker buildx create --use --bootstrap --platform linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/arm/v7,linux/arm/v6 --name canux-builder&#xA;&#xA;// 如果没有qumu，可以把不同平台的远程机器加到builder实例.&#xA;docker buildx create \&#xA;--name local_remote_builder \&#xA;--append --node &amp;lt;my-arm-server&amp;gt; \&#xA;--platform linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6 \&#xA;ssh://user@&amp;lt;my-arm-server&amp;gt; &#xA;&#xA;docker buildx rm&#xA;&#xA;docker buildx stop&#xA;&#xA;docker buildx inspect&#xA;&#xA;docker buildx use&#xA;&#xA;// 查看当前可用的builders&#xA;docker buildx ls&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;构建多平台镜像&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://canuxcheng.com/post/cncf_docker/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/cncf_docker/</guid>
      <description>&lt;h1 id=&#34;docker&#34;&gt;Docker&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://store.docker.com/&#34;&gt;https://store.docker.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/&#34;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker&#34;&gt;https://github.com/docker&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/moby/moby&#34;&gt;https://github.com/moby/moby&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Docker是一个容器引擎, 分为社区版CE, 和企业版EE, Docker不是虚拟机, 也不依赖虚拟化技术．&lt;/p&gt;&#xA;&lt;p&gt;docker-cli -&amp;gt; dockerd -&amp;gt; containerd -&amp;gt; shim -&amp;gt; runc&lt;/p&gt;&#xA;&lt;p&gt;containerd是容器运行时管理引擎.&lt;/p&gt;&#xA;&lt;p&gt;shim用于管理容器生命周期.&lt;/p&gt;&#xA;&lt;p&gt;Docker包括三个基本概念:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;仓库repository,集中存放镜像文件的场所,docker hub/store是最大的公开仓库．&lt;/li&gt;&#xA;&lt;li&gt;镜像image, 镜像是一个文件系统.&lt;/li&gt;&#xA;&lt;li&gt;容器container, 容器是镜像的运行的实例．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;修改docker存储路径:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ service docker stop&#xA;$ mv /var/lib/docker /opt/ssd/docker&#xA;$ ln -s /opt/ssd/docker /var/lib/docker&#xA;$ service docker start&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Install:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;windows:&#xA;&amp;lt;https://docs.docker.com/docker-for-windows/install/&amp;gt;&#xA;&#xA;linux:&#xA;&amp;lt;https://docs.docker.com/engine/install/ubuntu/&amp;gt;&#xA;&#xA;mac:&#xA;&amp;lt;https://github.com/abiosoft/colima/blob/main/docs/FAQ.md#docker&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;config&#34;&gt;config&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file&#34;&gt;https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;docker配置文件:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/etc/docker/daemon.json&#xA;/lib/systemd/system/docker.service&#xA;&#xA;{&#xA;    // debug&#xA;    &amp;quot;debug&amp;quot;: true,&#xA;    &#xA;    &amp;quot;data-root&amp;quot;： &amp;quot;/var/lib/docker&amp;quot;,&#xA;    &#xA;    &amp;quot;features&amp;quot;: {&#xA;        &amp;quot;buildkit&amp;quot;: true&#xA;    },&#xA;&#xA;    //容器访问外网:&#xA;    ip-forward=true 会设置 net.ipv4.ip_forward=1, 才能访问外网&#xA;    // 容器之间访问:&#xA;    icc=true, &#xA;    iptables=true  会修改iptables的forward策略为accept,&#xA;&#xA;    // 修改默认docker0&#xA;    &amp;quot;bridge&amp;quot;:&#xA;    &amp;quot;bip&amp;quot;: &amp;quot;10.0.0.1/16&amp;quot;  // subnet + gateway&#xA;    &amp;quot;fixed-cidr&amp;quot;: &amp;quot;10.41.0.0/24&amp;quot; // iprange&#xA;    &amp;quot;fixed-cidr-v6&amp;quot;: &amp;quot;&amp;quot;,&#xA;    &amp;quot;mtu&amp;quot;: 1500&#xA;    &amp;quot;default-gateway&amp;quot;:&#xA;&#x9;&amp;quot;default-gateway-v6&amp;quot;: &amp;quot;&amp;quot;,&#xA;&#xA;    // 修改默认dns&#xA;    &amp;quot;dns&amp;quot; : [&#xA;        &amp;quot;114.114.114.114&amp;quot;,&#xA;        &amp;quot;8.8.8.8&amp;quot;&#xA;    ]&#xA;    &amp;quot;dns-opts&amp;quot;: [],&#xA;    &amp;quot;dns-search&amp;quot;: [],&#xA;&#xA;    // ipv6&#xA;    &amp;quot;ipv6&amp;quot;: true&#xA;&#xA;    // private registry&#xA;  &#x9;&amp;quot;insecure-registries&amp;quot;: [],&#xA;&#xA;    // 修改registry&#xA;    &amp;quot;registry-mirrors&amp;quot;: [&#xA;        &amp;quot;https://registry.docker-cn.com&amp;quot;,&#xA;        &amp;quot;https://z4yd270h.mirror.aliyuncs.com&amp;quot;,&#xA;        &amp;quot;http://f1361db2.m.daocloud.io&amp;quot;,&#xA;        &amp;quot;https://docker.mirrors.ustc.edu.cn&amp;quot;&#xA;    ]&#xA;&#xA;    &amp;quot;hosts&amp;quot;: [],&#xA;    &amp;quot;log-level&amp;quot;: &amp;quot;&amp;quot;,&#xA;    &amp;quot;tls&amp;quot;: true,&#xA;    &amp;quot;tlsverify&amp;quot;: true,&#xA;    &amp;quot;tlscacert&amp;quot;: &amp;quot;&amp;quot;,&#xA;    &amp;quot;tlscert&amp;quot;: &amp;quot;&amp;quot;,&#xA;    &amp;quot;tlskey&amp;quot;: &amp;quot;&amp;quot;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;proxy for pull image from google(gcr):&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
