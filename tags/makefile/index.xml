<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Makefile on Morgoth</title>
        <link>https://canuxcheng.com/tags/makefile/</link>
        <description>Recent content in Makefile on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 12 Jan 2017 21:18:33 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/tags/makefile/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Makefile</title>
        <link>https://canuxcheng.com/post/linux_makefile/</link>
        <pubDate>Thu, 12 Jan 2017 21:18:33 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/linux_makefile/</guid>
        <description>&lt;h1 id=&#34;make&#34;&gt;Make&lt;/h1&gt;
&lt;p&gt;make的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制源代码的编译&lt;/li&gt;
&lt;li&gt;手册页的编写&lt;/li&gt;
&lt;li&gt;将应用程序安装到目标目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;make的使用规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果工程没有编译过，需要编译所有源文件和链接所有目标文件．&lt;/li&gt;
&lt;li&gt;如果工程里某几个目标文件被修改，只需要编译修改的源文件，并链接所有目标文件．&lt;/li&gt;
&lt;li&gt;如果头文件被修改，只需要编译引用了被修改的头文件的源文件，并链接所有目标文件．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;makefile文件查找顺序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前目录找makefile&lt;/li&gt;
&lt;li&gt;当前目录找Makefile&lt;/li&gt;
&lt;li&gt;当前目录找GNUmakefile&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;make命令&#34;&gt;make命令&lt;/h1&gt;
&lt;p&gt;make命令会执行当前目录的makefile/Makefile/GNUmakefile文件．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make [options] [target] ...
-f FILE, --file=FILE, --makefile=FILE    # 指定makefile文件
-n, --just-print, --dry-run, --recon # 只打印，不执行
-k, --keep-going　# 忽略错误继续执行

make
make all
make install
make clean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;make的工作顺序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读入所有makefile文件&lt;/li&gt;
&lt;li&gt;读入include的其它makefile文件&lt;/li&gt;
&lt;li&gt;初始化变量&lt;/li&gt;
&lt;li&gt;推导隐晦规则，分析所有规则&lt;/li&gt;
&lt;li&gt;为所有目标文件创建依赖关系链&lt;/li&gt;
&lt;li&gt;根据依赖关系决定哪些目标需要重新生成&lt;/li&gt;
&lt;li&gt;执行生成的命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;makefile语法&#34;&gt;makefile语法&lt;/h1&gt;
&lt;p&gt;make命令执行makefile文件时，会比较target和prerequisites的时间戳，如果后者比前者新，或者前者不存在，就会执行command,否则会跳过command.&lt;/p&gt;
&lt;p&gt;其中#表示注释，\表示续行．@表示该命令的执行不会打印到stdout,-表示忽略错误继续执行．&lt;/p&gt;
&lt;p&gt;makefile中的command必须以tab开头，target和prerequisites有多个时用空格分开．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# comment
target...: prerequisites...
    command
    command1 too \
    long
    @command2
    -command3
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;makefile变量赋值:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var=val
var := val  覆盖之前的值
var ?= val  如果没有被赋值过，就赋值
var += val  添加一个值
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过命令定义变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var := $(shell &amp;lt;command&amp;gt;)
为了区分makefile变量和shell命令里面的变量，用$$var表示shell变量
var := $(shell cat file | awk &#39;/.*/{print $$0}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;makefile的变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义变量：
obj=a.o b.o c.o
使用变量：
$(obj)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自动化变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$&amp;lt;    # 第一个依赖文件
$^    # 所有的依赖文件
$@    # 目标文件
$*    # 不包含扩展名的目标文件名称
$+    # 所有的依赖文件，用空格分开
$?    # 所有时间戳比目标文件晚的依赖文件，以空格分开
$%    # 如果目标是归档成员，则表示目标的归档成员
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;清空目标文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clean:
    -rm elf $(obj)
# 或者用.PHONY表示clean是一个伪目标
.PHONY: clean
clean:
    -rm elf $(obj)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在makefile中引用外部makefile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 优先在当前目录查找，-l可以指定额外的查找路径
-include a.makefile b.makefile ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;makefile支持的通配符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~    # 用来表示$HOME环境变量
*    # 用来表示任意长度字符串
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自动推导和隐晦规则：&lt;/p&gt;
&lt;p&gt;伪目标：&lt;/p&gt;
&lt;p&gt;查找路径：&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
