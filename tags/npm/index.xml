<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Npm on Morgoth</title>
        <link>https://canuxcheng.com/tags/npm/</link>
        <description>Recent content in Npm on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 27 Sep 2016 03:31:25 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/tags/npm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>NPM</title>
        <link>https://canuxcheng.com/post/js_npm/</link>
        <pubDate>Tue, 27 Sep 2016 03:31:25 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/js_npm/</guid>
        <description>&lt;h1 id=&#34;npm&#34;&gt;NPM&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.npmjs.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.npmjs.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;npm: node package manager.&lt;/p&gt;
&lt;p&gt;npm 由三部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;website &lt;a class=&#34;link&#34; href=&#34;https://www.npmjs.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.npmjs.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CLI&lt;/li&gt;
&lt;li&gt;registry &lt;a class=&#34;link&#34; href=&#34;https://registry.npmjs.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://registry.npmjs.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 修改registry
$ npm config set registry https://registry.npm.taobao.org
$ npm config get registry

// 修改默认全局安装路径
mkdir /path/npm_global
npm config set prefix /path/npm_global
echo &#39;export PATH=/path/npm_global/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.profile
source ~/.profile

// 查看配置
$ npm config ls -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 根据当前目录package.json安装到当前目录node_modules
$ npm install

// 安装pkg到当前目录的 node_modules
$ npm install &amp;lt;pkg&amp;gt;

// 安装到全局的node_modules
$ npm install -g &amp;lt;name&amp;gt;

--save-dev // 安装并自动更新到package.json的devDependencies.
--no-save // 不保存到package.json 和 package-lock.json.
--no-package-lock // 不生成package-lock.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;list:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 查看安装了哪些包
$ npm list --depth=0 --global
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;init:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 创建package.json
$ npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;publish:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 注册npm账号
# 添加账号
npm adduser
# 验证账号 
npm whoami
# 发布
npm publish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发布好了可以去npm网站查看.&lt;/p&gt;
&lt;p&gt;npm + shrinkwrap = yarn lock
npm-shrinkwrap.json = yarn.lock&lt;/p&gt;
&lt;h2 id=&#34;folders&#34;&gt;folders&lt;/h2&gt;
&lt;p&gt;nodejs加载的路径:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 当前目录
2. $HOME/.node_modules
   $HOME/.node_libraries
   $PREFIX/lib/node_modules
3. $NODE_PATH

// 查看prefix (也是-g 安装的目录)
$ npm config ls -l | grep prefix
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;npmrc&#34;&gt;npmrc&lt;/h2&gt;
&lt;p&gt;get token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -u&amp;lt;username&amp;gt;:&amp;lt;api-key&amp;gt; https://artifactory.canux.com/artifactory/api/npm/auth
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;ldquo;.npmrc&amp;rdquo; 配置private registry&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;registry=https://artifactory.canux.com/artifactory/api/npm/iep.npm-virtual
always-auth=true 
email=&amp;lt;user-email&amp;gt;
//artifactory.arm.com/artifactory/api/npm/:_auth=&amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;npmignore&#34;&gt;npmignore&lt;/h2&gt;
&lt;p&gt;打包的时候忽略的文件和目录，优先级高于gitignore。&lt;/p&gt;
&lt;h2 id=&#34;packagejson&#34;&gt;package.json&lt;/h2&gt;
&lt;p&gt;package.json&lt;/p&gt;
&lt;p&gt;package-locks&lt;/p&gt;
&lt;p&gt;package-lock.json&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;yarn&#34;&gt;yarn&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://yarnpkg.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://yarnpkg.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用corepack安装yarn。&lt;/p&gt;
&lt;p&gt;激活corepack&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ corepack enable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装yarn&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ corepack prepare yarn@3.8.1 --activate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// yarn config, yarn 会读npmrc
yarn config

cacheFolder: $HOME/.yarn/berry/cache
globalFolder: $HOME/.yarn/berry

// create package.json
$ yarn init

// 设置project的yarn version，自动下载.yarn/release/yarn-&amp;lt;version&amp;gt;.cjs
yarn set version berry

// remove all local archives
$ yarn cache clean  

// add/remove/install dependencies
$ yarn add ...
$ yarn remove ...
$ yarn install --inline-builds

// nodejs
$ yarn node

// check npm package information
$ yarn npm info react

// run script defined in package.json
$ yarn run &amp;lt;scriptName&amp;gt;

//  plugin management
$ yarn plugin ......

//  workspace management
$ yarn workspaces ...
$ yarn workspaces list
$ yarn workspaces foreach // run command on all workspaces

// login to private registry
yarn npm login
yarn npm logout
yarn npm publish

    npmRegistries:
        &amp;quot;https://artifactory.arm.com/artifactory/api/npm/iep.npm-virtual&amp;quot;: 
            npmAuthToken: &amp;lt;token&amp;gt;

yarn build 
&amp;quot;exports&amp;quot;: {
    &amp;quot;.&amp;quot;: &amp;quot;./src/index.ts&amp;quot;,
    &amp;quot;./alpha&amp;quot;: &amp;quot;./src/alpha.ts&amp;quot;,
    &amp;quot;./package.json&amp;quot;: &amp;quot;./package.json&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
