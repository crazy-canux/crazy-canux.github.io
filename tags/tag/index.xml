<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Tag on Morgoth</title>
        <link>https://canuxcheng.com/tags/tag/</link>
        <description>Recent content in Tag on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 10 Jan 2020 20:58:01 +0800</lastBuildDate><atom:link href="https://canuxcheng.com/tags/tag/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Kubectl</title>
        <link>https://canuxcheng.com/post/k8s_kubectl/</link>
        <pubDate>Fri, 10 Jan 2020 20:58:01 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/k8s_kubectl/</guid>
        <description>&lt;h1 id=&#34;kubectl&#34;&gt;kubectl&lt;/h1&gt;
&lt;p&gt;kubectl是kubernetes的管理工具.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/tasks/tools/#kubectl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/docs/tasks/tools/#kubectl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/cloudnativelabs/kube-shell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/cloudnativelabs/kube-shell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jonmosco/kube-ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jonmosco/kube-ps1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ahmetb/kubectx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ahmetb/kubectx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在master上通过kubectl命令管理集群.&lt;/p&gt;
&lt;p&gt;kubectl 版本和集群版本之间的差异必须在一个小版本号内。 例如：v1.24 版本的客户端能与 v1.23、 v1.24 和 v1.25 版本的控制面通信。 用最新兼容版的 kubectl 有助于避免不可预见的问题。&lt;/p&gt;
&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;kubectl options # 查看所有命令可用选项

--kubeconfig
kubectl --kubeconfig=$HOME/.kube.config (default)

-n/--namespace
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;basic-command&#34;&gt;basic command&lt;/h2&gt;
&lt;p&gt;create:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 通过yaml或json文件创建资源
$ kubectl create -f FILENAME [options]

options:
-f/--filename

kubectl create secret tls kubernetes-dashboard-tls --key ca.key --cert ca.crt -n kubernetes-dashboard

// 输出一个资源的yaml格式.
kubectl create deployment &amp;lt;name&amp;gt; --image=&amp;lt;img-name&amp;gt; --dry-run=client --output=yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delete:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 删除资源
$ kubectl delete (-f FILENAME | -k DICT | TYPE [(NAME|-l label|--all)]) [optiions]

options:
-f/--filename
--all  
--all-namespaces
--force

$ kubectl delete pods --all
$ kubectl delete pod &amp;lt;name&amp;gt;
// 删除指定ns下所有资源.
$ kubectl delete all --all -n {namespace}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;删除带有finalizers字段的对象，对象实际被更新了，没有真的被删除。可以通过patch来删除。&lt;/p&gt;
&lt;p&gt;删除带有ownerReferences字段的对象，删除父对象默认会删除所有子对象，通过&amp;ndash;cascade=false只删除父对象。&lt;/p&gt;
&lt;p&gt;expose:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 创建serivce:
$ kubectl expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=...] [--name=...] [--external-ip=...] [--type=type] [options]

# 创建service，并且使用NodePort
# nodeport可以使用任意节点的IP访问.
$ kubectl expose deployment hello-world --type=NodePort --name=example-service

// 获取service的yaml
kubectl expose deployment &amp;lt;deploy-name&amp;gt; --type=LoadBalancer --port=80 --dry-run=client --output=yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 创建pod/container(docker run):
$ kubectl run NAME --image=image [--env=&amp;quot;key=value&amp;quot;] [--port=port] [--replicas=replicas] [--dry-run=bool] [--overrides=inline-json] [--command] -- [COMMAND] [args...] [options]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;set:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl set SUBCOMMAND [options]

// 更新镜像
$ kubectl set image deployment.v1.apps/&amp;lt;deploy-name&amp;gt; &amp;lt;container-name&amp;gt;=&amp;lt;image:tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 获取resource信息(docker ps)
$ kubectl [-n &amp;lt;namespace&amp;gt;] get [resource] [flags] [options]

options:
-A/--all-namespaces
-f/--filename
-o/--output json/yaml/json/wide/name/...
-w/--watch
--watch-only

kubectl get nodes --show-labels

kubectl get nodes/no # 获取node节点信息
kubectl get namespace/ns # 获取namespace信息
kubectl get componentstatuses/cs

kubectl get all --all-namespaces
kubectl -n kube-system get all 

kubectl get pod/pods/po 
kubectl get po -w/--watch
kubectl get po -o wide

kubectl get deployment/deployments/deploy

kubectl get service/services/svc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;explain:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 查看资源解析
$ kubectl explain RESOURCE [options]

kubectl explain deploy.spec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;edit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 在线修改资源，直接生效.
$ kubectl edit
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;advanced-commands&#34;&gt;advanced commands&lt;/h2&gt;
&lt;p&gt;apply:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl apply
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;diff:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl diff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;patch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl patch

// 删除terminating状态的resource
$ kubectl patch  persistentvolumeclaim/storage -p &#39;{&amp;quot;metadata&amp;quot;:{&amp;quot;finalizers&amp;quot;:null}}&#39; -n &amp;lt;ns&amp;gt;

$ kubectl replace

$ kubectl wait

$ kubectl kustomize
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;deploy-command&#34;&gt;deploy command&lt;/h2&gt;
&lt;p&gt;scale:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl scale
$ kubectl scale deployment &amp;lt;deploy-name&amp;gt; -n &amp;lt;ns&amp;gt; --replicas=0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;autoscale:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl autoscale
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;rollout:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 回滚
$ kubectl rollout

// 暂停/恢复/重启 deployment.
kubectl rollout pause/resume/restart  deploy/katib-mysql -n kubeflow
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;debugtroubleshoot&#34;&gt;debug&amp;amp;troubleshoot&lt;/h2&gt;
&lt;p&gt;describe:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// like docker inspect
$ kubectl describe (-f FILENAME | TYPE ... | TYPE/NAME) [options]

options:
-A/--all-namespaces
-f/--filename

// 查看node信息
$ kubectl describe nodes &amp;lt;name&amp;gt;

//查看pod详细信息
$ kubectl describe pods &amp;lt;name&amp;gt; 

// 获取k8s-dashboard的token
$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &#39;{print $1}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;logs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# like docker logs
$ kubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER] [options]

options:
--all-containers
-f/--follow
-p/--previous

// 查看pod中指定container log
kubectl logs -f &amp;lt;pod&amp;gt; -c &amp;lt;container&amp;gt; -n &amp;lt;ns&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exec:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# like docker exec
$ kubectl exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...] [options]

options:
-c/--container
-i/--stdin
-t/--tty

$ kubectl exec -it &amp;lt;pod&amp;gt; -n &amp;lt;ns&amp;gt; -- /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;port-forward:&lt;/p&gt;
&lt;p&gt;由于已知的限制，目前的端口转发仅适用于 TCP 协议.&lt;/p&gt;
&lt;p&gt;只能通过运行转发命令的IP/FQDN访问。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl port-forward

// 转发本地端口到deploy/rs/svc/pod
$ kubectl port-forward svc/redis-service 6379:6379 -n redis

$ kubectl port-forward --address 0.0.0.0 -n kubernetes-dashboard service/kubernetes-dashboard 8080:443
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;proxy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl proxy

// 通过proxy可以访问默认的clusterIP服务.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;attach:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl attach
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cp:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl cp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;auth:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl auth
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;debug:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl debug

// debug node -- 直接进入node的shell，log在/host/var/log
kubectl debug node/&amp;lt;name&amp;gt;  -it   --image=ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cluster-management&#34;&gt;cluster management&lt;/h2&gt;
&lt;p&gt;top:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl top

$ kubectl cluster-info

$ kubectl certificate

// 节点变成unschedulable
$ kubectl cordon

// 节点变成schedulable
$ kubectl uncordon

// 安全下线节点：Ready,SchedulingDisabled
$ kubectl drain
kubectl drain &amp;lt;node&amp;gt; --delete-emptydir-data --ignore-daemonsets

//定义污点
$ kubectl taint
kubectl taint nodes &amp;lt;node&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;:NoSchedule-
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;settings-commands&#34;&gt;Settings Commands&lt;/h2&gt;
&lt;p&gt;label&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;label          Update the labels on a resource

kubectl label nodes &amp;lt;your-node-name&amp;gt; disktype=ssd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;annotate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;annotate       Update the annotations on a resource
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;completion:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;completion     Output shell completion code for the specified shell (bash or zsh)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;others&#34;&gt;others&lt;/h2&gt;
&lt;p&gt;api-resources:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// api-resources  Print the supported API resources on the server.
kubectl api-resources
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;api-versions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// api-versions   Print the supported API versions on the server, in the form of &amp;quot;group/version&amp;quot;.
kubectl api-versions
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 参考kubectx
config         Modify kubeconfig files.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;plugin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 参考krew
plugin         Provides utilities for interacting with plugins.

// 查看安装的plugin
$ kubectl plugin list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version        Print the client and server version information.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;shell-auotcompletion&#34;&gt;shell-auotcompletion&lt;/h2&gt;
&lt;p&gt;bash/zsh 自动补全工具.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/#enabling-shell-autocompletion&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/docs/tasks/tools/install-kubectl/#enabling-shell-autocompletion&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;krew&#34;&gt;krew&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes-sigs/krew&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes-sigs/krew&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装kubectl plugin的工具&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 下载插件列表
$ kubectl krew update

// 查找插件
$ kubectl krew search

// 安装插件
$ kubectl krew install &amp;lt;name&amp;gt;

// 升级插件
$ kubectl krew upgrade

// 卸载插件
$ kubectl krew uninstall &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;kubectx&#34;&gt;kubectx&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ahmetb/kubectx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ahmetb/kubectx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在cluster和namespace之间切换的命令行工具.&lt;/p&gt;
&lt;p&gt;包括kubectx 和 kubedns&lt;/p&gt;
&lt;p&gt;通过krew安装，作为kubectl的plugin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl krew install ctx
$ kubectl krew install ns
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;circtl&#34;&gt;circtl&lt;/h1&gt;
&lt;p&gt;用于对node调试.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes-sigs/cri-tools&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes-sigs/cri-tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/tasks/debug/debug-cluster/crictl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/docs/tasks/debug/debug-cluster/crictl/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nerdctl&#34;&gt;nerdctl&lt;/h2&gt;
&lt;p&gt;调试node。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/containerd/nerdctl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/containerd/nerdctl&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;telepresence&#34;&gt;telepresence&lt;/h2&gt;
&lt;p&gt;用于本地调试集群上的服务.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/telepresenceio/telepresence&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/telepresenceio/telepresence&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
