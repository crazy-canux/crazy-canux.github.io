<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container on Morgoth</title>
    <link>https://canuxcheng.com/tags/container/</link>
    <description>Recent content in Container on Morgoth</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Apr 2018 22:02:31 +0000</lastBuildDate>
    <atom:link href="https://canuxcheng.com/tags/container/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Container</title>
      <link>https://canuxcheng.com/post/cncf_container/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/cncf_container/</guid>
      <description>&lt;h1 id=&#34;container&#34;&gt;Container&lt;/h1&gt;&#xA;&lt;p&gt;OCI: Open Container Initiative.&lt;/p&gt;&#xA;&lt;p&gt;CRI: Container Runtime Interface.&lt;/p&gt;&#xA;&lt;p&gt;CNI: Container Network Interface.&lt;/p&gt;&#xA;&lt;p&gt;CSI: Container Storage Interface.&lt;/p&gt;&#xA;&lt;h1 id=&#34;oci&#34;&gt;OCI&lt;/h1&gt;&#xA;&lt;p&gt;Open Container Initiative，也就是常说的OCI，是由多家公司共同成立的项目，并由linux基金会进行管理，致力于container runtime的标准的制定和runc的开发等工作.&lt;/p&gt;&#xA;&lt;p&gt;是container的标准.&lt;/p&gt;&#xA;&lt;p&gt;目前主要有两个标准文档：容器运行时标准 （runtime spec）和 容器镜像标准（image spec）&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.opencontainers.org/&#34;&gt;https://www.opencontainers.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;runc&#34;&gt;runc&lt;/h2&gt;&#xA;&lt;p&gt;docker(libcontainer)&lt;/p&gt;&#xA;&lt;p&gt;runc支持OCI.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;https://github.com/opencontainers/runc&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;rkt&#34;&gt;rkt&lt;/h2&gt;&#xA;&lt;p&gt;redhat(coreos)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rkt/rkt&#34;&gt;https://github.com/rkt/rkt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tools&#34;&gt;tools&lt;/h1&gt;&#xA;&lt;h2 id=&#34;dumb-init&#34;&gt;dumb-init&lt;/h2&gt;&#xA;&lt;p&gt;管理pid=1的进程的子进程:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Yelp/dumb-init&#34;&gt;https://github.com/Yelp/dumb-init&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;baseimage-docker&#34;&gt;baseimage-docker&lt;/h2&gt;&#xA;&lt;p&gt;处理container中运行多个进程的问题:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/phusion/baseimage-docker&#34;&gt;https://github.com/phusion/baseimage-docker&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;watchtower&#34;&gt;watchtower&lt;/h2&gt;&#xA;&lt;p&gt;根据registry中的更新自动更新 container:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/containrrr/watchtower/&#34;&gt;https://github.com/containrrr/watchtower/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;hadolint&#34;&gt;hadolint&lt;/h2&gt;&#xA;&lt;p&gt;dockerfile 语法检查:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint&#34;&gt;https://github.com/hadolint/hadolint&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;gosu&#34;&gt;gosu&lt;/h2&gt;&#xA;&lt;p&gt;权限管理&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tianon/gosu&#34;&gt;https://github.com/tianon/gosu&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;swarm-cronjob&#34;&gt;swarm-cronjob&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/crazy-max/swarm-cronjob&#34;&gt;https://github.com/crazy-max/swarm-cronjob&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;misc&#34;&gt;misc&lt;/h1&gt;&#xA;&lt;p&gt;get host ip(docker/docker_gwbridge) from container:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ip route | awk &#39;/default/ { print $3 }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Namespace</title>
      <link>https://canuxcheng.com/post/cncf_ns/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/cncf_ns/</guid>
      <description>&lt;h1 id=&#34;ns&#34;&gt;NS&lt;/h1&gt;&#xA;&lt;p&gt;namespace 是 Linux 内核用来隔离内核资源的方式&lt;/p&gt;&#xA;&lt;p&gt;Linux namespace资源：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Mount: 挂载点&lt;/li&gt;&#xA;&lt;li&gt;Network: 网络设备/协议栈/端口&lt;/li&gt;&#xA;&lt;li&gt;IPC: 进程间通信&lt;/li&gt;&#xA;&lt;li&gt;USR: 用户和用户组&lt;/li&gt;&#xA;&lt;li&gt;PID: 进程&lt;/li&gt;&#xA;&lt;li&gt;UTS: 主机名和域名&lt;/li&gt;&#xA;&lt;li&gt;Cgroup: 控制组&lt;/li&gt;&#xA;&lt;li&gt;Time&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;cgroup&#34;&gt;Cgroup&lt;/h1&gt;&#xA;&lt;p&gt;Cgroup: Control Groups.是linux下用于对一个或一组进程资源控制和监控的机制.可以管理cpu, memory,diskIO 等资源.不同资源的具体管理工作由相应的cgrouup子系统来实现.&lt;/p&gt;&#xA;&lt;p&gt;cgroup在不同的系统资源管理子系统中以层级树(Hierarchy)的方式来组织管理, 每个cgroup可以包含其它子cgroup.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ls -l /sys/fs/cgroup&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;cgroup子系统:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cpu&lt;/li&gt;&#xA;&lt;li&gt;cpuacct&lt;/li&gt;&#xA;&lt;li&gt;cpuset&lt;/li&gt;&#xA;&lt;li&gt;memory&lt;/li&gt;&#xA;&lt;li&gt;blkio&lt;/li&gt;&#xA;&lt;li&gt;devices&lt;/li&gt;&#xA;&lt;li&gt;freezer&lt;/li&gt;&#xA;&lt;li&gt;ns&lt;/li&gt;&#xA;&lt;li&gt;pid&lt;/li&gt;&#xA;&lt;li&gt;net_cls&lt;/li&gt;&#xA;&lt;li&gt;net_prio&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;lsns&#34;&gt;lsns&lt;/h1&gt;&#xA;&lt;p&gt;查看系统的namespace&lt;/p&gt;&#xA;&lt;p&gt;ns类型: mnt, net, ipc, user, pid, uts, cgroup&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$lsns -l&#xA;$lsns -t net&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;unshare&#34;&gt;unshare&lt;/h1&gt;&#xA;&lt;p&gt;使用非共享的NS运行程序&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 创建unshare 的 ns类型.&#xA;$unshare -f -m/-n/-i/-U/-p/-u/-C ... &#xA;&#xA;// 在net类型的namespace执行sleep命令&#xA;$unshare -fn sleep 10&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;nsenter&#34;&gt;nsenter&lt;/h1&gt;&#xA;&lt;p&gt;ns enter: Namespace enter.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
