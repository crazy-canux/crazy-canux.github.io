<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Powershell on Morgoth</title>
        <link>https://canuxcheng.com/tags/powershell/</link>
        <description>Recent content in Powershell on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 26 Apr 2016 09:52:02 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/tags/powershell/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>PowerShell</title>
        <link>https://canuxcheng.com/post/ps/</link>
        <pubDate>Tue, 26 Apr 2016 09:52:02 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/ps/</guid>
        <description>&lt;h1 id=&#34;powershell&#34;&gt;PowerShell&lt;/h1&gt;
&lt;p&gt;Console: command line interface&lt;/p&gt;
&lt;p&gt;ISE: script editor and console combination&lt;/p&gt;
&lt;p&gt;Version:&lt;/p&gt;
&lt;p&gt;2.0,3.0,4.0,5.0&lt;/p&gt;
&lt;p&gt;C:\Windows\System32\powershell 存放64位powershell&lt;/p&gt;
&lt;p&gt;C:\Windows\SysWOW64\powershell 存放32位powershell&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;$PSVersionTable
&amp;gt;$HOST
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install/Update:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/zh-CN/download/details.aspx?id=40855&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.microsoft.com/zh-CN/download/details.aspx?id=40855&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装Windows Management Framework4.0即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;$PSHOME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多版本时切换版本:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;powershell -version 2
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;powershell相关项目&#34;&gt;powershell相关项目&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Microsoft&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Microsoft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShellOrg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShellOrg&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;win32-openssh&#34;&gt;win32-openssh&lt;/h2&gt;
&lt;p&gt;windows的SSH。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/Win32-OpenSSH&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell/Win32-OpenSSH&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;powershell命令&#34;&gt;powershell命令&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;powershell -?
&amp;gt;powershell /?
&amp;gt;powershell -help
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;powershell-script&#34;&gt;powershell script&lt;/h1&gt;
&lt;p&gt;powershell是默认大小写不敏感的。&lt;/p&gt;
&lt;p&gt;同一行多个命令需要用分号;隔开。&lt;/p&gt;
&lt;p&gt;powershell的安全策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;restricted(default)&lt;/li&gt;
&lt;li&gt;allsigned&lt;/li&gt;
&lt;li&gt;remotesigned&lt;/li&gt;
&lt;li&gt;unrestricted&lt;/li&gt;
&lt;li&gt;bypass&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;注释&#34;&gt;注释&lt;/h1&gt;
&lt;p&gt;单行注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# comment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多行注释(文档注释)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;#
comment1
comment2
...
#&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;帮助文档:&lt;/p&gt;
&lt;p&gt;在脚本开头的注释中用下面关键字插入文档。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;#
.SYNOPSIS
Write your synopsis here.

.DESCRIPTION
Write your description here.

.PARAMETER param1
Write your param1 information here.

.EXAMPLE
Write your example1 here.

.NOTES
Write your notes here.

.LINK
http://test.com
#&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;
&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;
&lt;p&gt;所有的变量都存储在Variable驱动器中,可以用Variable驱动器对变量操作。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls Variable: # 查看所有变量
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;系统变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$_    # 表示管道中的当前对象
?    # True表示上一个命令成功执行,False失败
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自定义变量：&lt;/p&gt;
&lt;p&gt;变量以$开头定义,但是$不是变量名的一部分。&lt;/p&gt;
&lt;p&gt;变量包含数字，字母和小划线。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$var1=&amp;quot;test&amp;quot;
$var1

# 交换两个变量的值
$var1,$var2=$var2,$var1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;变量类型：&lt;/p&gt;
&lt;p&gt;可以不用指定变量类型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[string]$str=&amp;quot;123&amp;quot;
[int]$num=123
[boolean]bool=&amp;quot;True&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;判断变量类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$str -is [string]
$num -as [int]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数组&#34;&gt;数组&lt;/h2&gt;
&lt;p&gt;包含多个变量就是一个数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$var2=1,2,3
$var2[index]
$var2[0] # 数组第一个元素
$var2[-1] # 数组最后一个元素
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字典&#34;&gt;字典：&lt;/h2&gt;
&lt;p&gt;hash类型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@{L=&amp;lt;key&amp;gt;;
E={$_.&amp;lt;value&amp;gt;};
formatstring=&amp;lt;format&amp;gt;}

@{N=&amp;lt;key&amp;gt;;E={$_.&amp;lt;value&amp;gt;}}
@{Label=&amp;lt;key&amp;gt;;E={$_.&amp;lt;value&amp;gt;}}
@{Name=&amp;lt;key&amp;gt;;E={$_.&amp;lt;value&amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;运算符&#34;&gt;运算符&lt;/h1&gt;
&lt;p&gt;基本运算符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;= # 赋值运算符，可以把任何数据类型包括对象赋值给变量
+ # 加法和字符串拼接
- # 减法
* # 乘法
/ # 除法
() # 优先运算符
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特殊运算符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$($procs[0].name) # 子变量
&#39;$var&#39; # 单引号中的变量原样输出
&amp;quot;$var&amp;quot; # 双引号中的变量被替换
&amp;quot;`$var&amp;quot; # `重音符可以用在双引号中转义
`t    # 制表符
`n    # 换行符
kb/mb/gt/tb/pb # 单位可以运算
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;比较运算符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-eq
-ne
-gt
-ge
-lt
-le
-contains 包含
-notcontains
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;布尔运算符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-not 求反
-and
-or
-xor
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;控制流&#34;&gt;控制流&lt;/h1&gt;
&lt;p&gt;powershell支持foreach循环。&lt;/p&gt;
&lt;p&gt;if条件语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($this -eq $that) {
    expression
} elseif ($those -gt $these) {
    expression2
} else {
    expression3
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;switch条件语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;switch ($condition) {
    val1 {
        expression
        break
    }
    val2 {
        expression2; break
    }
    default {
        default_expression
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;foreach循环语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foreach ($name in $names) {
    expression
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for循环语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for ($loop=1; condition; $loop++)
{
    expression
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;while循环语句:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while (condition)
{
    expression
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;do-while循环语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;do {
    expression
} while (condition)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;break语句：&lt;/p&gt;
&lt;p&gt;break用于循环和switch语句。&lt;/p&gt;
&lt;p&gt;continue语句：&lt;/p&gt;
&lt;p&gt;continue用于循环语句。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;函数&#34;&gt;函数&lt;/h1&gt;
&lt;p&gt;函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function name {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用函数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.\file.ps1
name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[CmdletBinding()]
Param(
    [Parameter(Mandatory=$True)]
    [String]$ComputerName, # ComputerName强制为通过命令行输入参数

    [int]$EventID=1234, # EventID有默认参数

    [Parameter(Mandatory=$True)][ValidateRange(0,23)]
    [int]$Number # 给出参数的范围
)

[CmdletBinding(SupportsShouldProcess$True)] # 支持-whatif和-confirm
[ValidateSet(1,3,8)] # 给出参数的可选值
[alias(&amp;quot;id&amp;quot;, &amp;quot;nunber&amp;quot;)] # 给参数指定别名
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;模块&#34;&gt;模块&lt;/h1&gt;
&lt;p&gt;系统模块路径：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c:\Windows\System32\WindowsPowershell\v1.0\Modules\
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数可以打包成模块放在系统模块路径或用户自己的模块路径。&lt;/p&gt;
&lt;p&gt;模块放到同名的目录mytools下，取名mytools.psm1&lt;/p&gt;
&lt;p&gt;导入用户自己路径下的模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Import-Module -name C:\Modules\mytools
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;异常和错误处理&#34;&gt;异常和错误处理&lt;/h1&gt;
&lt;p&gt;调试语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Write-Verbose &amp;quot;print verbose information.&amp;quot; # 打印调试信息

Write-Debug &amp;quot;print debug information.&amp;quot; # 使用-Debug进入debug模式，exit退出。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调试相关系统变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ErrorActionPreference=&#39;Continue&#39; # 调试的系统变量，默认报错继续执行

$DebugPreference=&#39;SilentlyContinue&#39;

$ErrorView=&#39;NormalView&#39;

$Error 存储整个shell的错误。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异常捕获：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Try {
    expressions
}
Catch {
    &amp;quot;execute when catch the error.&amp;quot;
}
Finally {
    &amp;quot;execute anyway.&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;断点调试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$Condition = {if ($a -is [int] -and $a -gt 100) {Write-Host &amp;quot;`$a was modified&amp;quot;}}
$Breakpoint = Set-PSBreakpoint -Variable a -Mode Write -Script $psise.CurrentFile.FullPath -Action $Condition
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
