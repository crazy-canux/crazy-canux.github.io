<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>View on Morgoth</title>
        <link>https://canuxcheng.com/tags/view/</link>
        <description>Recent content in View on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 04 Oct 2016 04:20:39 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/tags/view/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>View</title>
        <link>https://canuxcheng.com/post/django_view/</link>
        <pubDate>Tue, 04 Oct 2016 04:20:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_view/</guid>
        <description>&lt;h1 id=&#34;viewspy&#34;&gt;views.py&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义自己的视图函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse
from django.template import RequestContext, loader

# 导入模板中的类
from .models import Question

def index(request):
    ...
    t = loader.get_template(&#39;application/index.html&#39;)
    c = RequestContext(request, {&#39;foo&#39;: &#39;bar&#39;})
    return HttpResponse(t.render(c), content_type=&amp;quot;text/html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当请求一个页面时django会建立一个包含请求元数据的HttpRequest对象，当django加载对应视图时，这个对象作为视图第一个参数。&lt;/p&gt;
&lt;p&gt;每个视图会返回一个HttpResponse对象。&lt;/p&gt;
&lt;p&gt;每个视图函数都用HttpRequest对象（通常用request）作为第一个参数。&lt;/p&gt;
&lt;p&gt;每个视图函数都返回一个HttpResponse对象，包含生成的响应。&lt;/p&gt;
&lt;p&gt;HttpRquest和HttpResponse在django.http包中，参考：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://python.usyiyi.cn/documents/django_182/ref/request-response.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://python.usyiyi.cn/documents/django_182/ref/request-response.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HttpRequest对象属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;request.scheme # http/https
request.body
request.path
request.path_info
request.method # GET/POST
request.encoding
request.user
request.session
request.urlconf
request.GET
request.POST
request.REQUEST
request.COOKIES
request.FILES
request.META
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HttpRequest对象方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;request.get_host()
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HttpResponse对象属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;response.content
response.charset
response.status_code
response.reason_phrase
response.streaming
response.closed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HttpResponse对象的方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;response.getvalue()
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回错误：&lt;/p&gt;
&lt;p&gt;HttpResponse的子类提供了对不同类型HTTP响应。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.http import HttpResponseBadRequest, HttpResponseNotFound, HttpResponseForbidden, HttpResponseServerError,
return HttpResponseNotFound(&amp;quot;&amp;lt;h1&amp;gt;Page not found&amp;lt;/h1&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;http404异常：&lt;/p&gt;
&lt;p&gt;在应用的模板目录顶层定义一个404.html模板文件，当跑出Http404异常就会调用这个模板文件展示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.http import Http404

def index(request):
    try:
        ...
    except Application.DoesNotExist:
        raise Http404(&amp;quot;Application does not exist&amp;quot;)
    return HttpResponse(...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自定义错误视图：&lt;/p&gt;
&lt;p&gt;参考urls中的内容。&lt;/p&gt;
&lt;h1 id=&#34;快捷函数&#34;&gt;快捷函数&lt;/h1&gt;
&lt;p&gt;django.shortcuts中定义了多个快捷函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
render(request, template_name, context=None, context_instance=&amp;lt;object object&amp;gt;, content_type=None, status=None, current_app=&amp;lt;object object&amp;gt;, dirs=&amp;lt;object object&amp;gt;, dictionary=&amp;lt;object object&amp;gt;, using=None)
# render第一个参数是request，根据给定模板和上下文字典，返回一个渲染后的HttpResponse对象。
return render(request, &#39;application/index.html&#39;, {&#39;foo&#39;: &#39;bar&#39;}, content_type=&amp;quot;text/html&amp;quot;)

from django.shortcuts import get_object_or_404
get_object_or_404(klass, *args, **kwargs)
# 在给定的模型管理器调用get()，如果不存在引发Http404异常。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;基于类的视图&#34;&gt;基于类的视图&lt;/h1&gt;
&lt;p&gt;基于类的视图的基类在django.views.generic中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.generic import View
def MyView(View):
    def get(self, request):
        return HttpResponse(...)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;templateresponse和simpletemplateresponse&#34;&gt;TemplateResponse和SimpleTemplateResponse&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;from django.template.response import TemplateResponse, SimpleTemplateResponse
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;视图装饰器&#34;&gt;视图装饰器&lt;/h1&gt;
&lt;p&gt;django.views.decorators包中定义了视图的装饰器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.decorators import *
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;内建的视图&#34;&gt;内建的视图&lt;/h1&gt;
&lt;p&gt;django.views.static.serve定义了开发环境的文件服务器视图，仅用于开发。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.static import serve
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;django.views.defaults定义了内建的错误处理的视图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.defaults import *
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
