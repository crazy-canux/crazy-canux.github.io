<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Url on Morgoth</title>
        <link>https://canuxcheng.com/tags/url/</link>
        <description>Recent content in Url on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 04 Oct 2016 04:20:39 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/tags/url/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>URL</title>
        <link>https://canuxcheng.com/post/django_url/</link>
        <pubDate>Tue, 04 Oct 2016 04:20:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_url/</guid>
        <description>&lt;h1 id=&#34;urlspy&#34;&gt;urls.py&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;from django.urls import path, include
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;django请求站点的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ROOT_URLCONF，在settings.py中设置。&lt;/li&gt;
&lt;li&gt;寻找urlpatterns，它是django.conf.urls.url()实例的一个python列表。&lt;/li&gt;
&lt;li&gt;dnango依次匹配每个URL模式，在第一个匹配停下。&lt;/li&gt;
&lt;li&gt;一旦一个正则表达式匹配，django就调用对应的视图，视图获得HttpRequest实例,如果是没有命名的组返回内容作为位置参数，如果是命名的组返回内容作为关键字参数。&lt;/li&gt;
&lt;li&gt;如果没有匹配到或者过程跑出异常，django调用合适的错误处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;项目的url&#34;&gt;项目的URL&lt;/h1&gt;
&lt;p&gt;项目的URL主要用来包含应用的URL以及全局的URL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    # 默认的项目的admin的url
    path(&#39;admin/&#39;, admin.site.urls),
    
    # 在项目URL添加链接到应用URL：
    # 在下面添加你的所有应用的url,
    path(&#39;polls/&#39;, include(&#39;polls.urls&#39;)),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;应用的url&#34;&gt;应用的URL&lt;/h1&gt;
&lt;p&gt;将应用的视图映射到URL,需要在应用目录新建urls.py文件,然后在项目的url中包含应用的url。&lt;/p&gt;
&lt;p&gt;urlpatterns是url()实例类型的python列表。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.urls import path
from . import views

app_name = &#39;polls&#39;

urlpatterns = [
    # 普通视图
    path(&#39;&#39;, views.index, name=&#39;index&#39;),
    # 类视图
    path(&#39;&#39;, views.IndexView.as_view(), name=&#39;index&#39;),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;没有命名的组&#34;&gt;没有命名的组&lt;/h1&gt;
&lt;p&gt;视图函数只有request参数，匹配的正则表达式作为位置参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r&#39;^pattern1/pattern2/$&#39;, views.index, name=&#39;index&#39;),

def index(request):
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;命名组&#34;&gt;命名组&lt;/h1&gt;
&lt;p&gt;视图函数除了request参数还有关键字参数，匹配的命名表达式组作为关键字参数,覆盖默认的关键字参数。&lt;/p&gt;
&lt;p&gt;使用命名的正则表达式组： (?P&lt;name&gt;pattern)&lt;/p&gt;
&lt;p&gt;name就是关键字参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r&#39;^pattern1/(?P&amp;lt;name&amp;gt;pattern)/pattern2/$), views.index, name=&#39;index),

def index(request, name):
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;错误处理&#34;&gt;错误处理&lt;/h1&gt;
&lt;p&gt;django会调用一个错误处理视图处理异常。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;handler404 页面没找到&lt;/li&gt;
&lt;li&gt;handler500 服务器错误&lt;/li&gt;
&lt;li&gt;handler403 权限被拒绝&lt;/li&gt;
&lt;li&gt;handler400 无效的请求&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你也可以在项目的urls.py中重新定义这些默认视图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;handler404 = &#39;mysite.views.your_custom_page_not_found_view&#39;
handler500 = &#39;mysite.views.your_custom_error_view&#39;
handler403 = &#39;mysite.views.your_custom_permission_denied_view&#39;
handler400 = &#39;mysite.views.your_custom_bad_request_view&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
