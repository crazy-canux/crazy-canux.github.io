<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on Morgoth</title>
    <link>https://canuxcheng.com/tags/devops/</link>
    <description>Recent content in Devops on Morgoth</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jan 2025 09:41:39 +0000</lastBuildDate>
    <atom:link href="https://canuxcheng.com/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DevOps Metrics</title>
      <link>https://canuxcheng.com/post/devops_metrics/</link>
      <pubDate>Fri, 10 Jan 2025 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops_metrics/</guid>
      <description>&lt;h1 id=&#34;devops-metrics&#34;&gt;DevOps Metrics&lt;/h1&gt;&#xA;&lt;p&gt;从业务角度来看，公司希望更准确地度量其开发人员的生产力，原因如下:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Monitoring progress over time&lt;/li&gt;&#xA;&lt;li&gt;Creation of benchmarks&lt;/li&gt;&#xA;&lt;li&gt;Rewarding top performers&lt;/li&gt;&#xA;&lt;li&gt;Determining resource allocation&lt;/li&gt;&#xA;&lt;li&gt;Identification of more productive development processes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;框架是想法、概念和关系的简单总结，因此基于您的上下文、环境和团队，您可以选择一组您可以解释的指标，以确定团队是否在它应该在的地方。&lt;/p&gt;&#xA;&lt;h2 id=&#34;dora&#34;&gt;DORA&lt;/h2&gt;&#xA;&lt;p&gt;DevOps Research and Assessment.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://getdx.com/&#34;&gt;https://getdx.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;speed-metrics&#34;&gt;Speed metrics&lt;/h3&gt;&#xA;&lt;p&gt;Deployment frequency: This measures how often a team deploys code to production.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Low performance: once per month - once per semester. (inadequate integration, lack of automation.)&lt;/li&gt;&#xA;&lt;li&gt;Medium performance: once per month - once per week.&lt;/li&gt;&#xA;&lt;li&gt;High performance: daily for multiple times per day.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Lead time for change: This measures the time it takes from the moment a code change is made until it is successfully deployed to production.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Devops</title>
      <link>https://canuxcheng.com/post/go_devops/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/go_devops/</guid>
      <description>&lt;h1 id=&#34;go&#34;&gt;Go&lt;/h1&gt;&#xA;&lt;p&gt;go有三种安装方式：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;源码安装&lt;/li&gt;&#xA;&lt;li&gt;标准包安装&lt;/li&gt;&#xA;&lt;li&gt;第三方工具安装&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;GOROOT:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT 就是go的安装目录&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;windows标准包安装go:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;msi指定安装路径，自动添加%GOROOT%/bin到环境变量&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;linux标准包安装go:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;下载.tar.gz包解压到/usr/local/go&#xA;GOROOT=/usr/local/go&#xA;export PATH=$PATH:/usr/local/go/bin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;验证安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ go --help&#xA;$ go version&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;第三方工具gvm安装go:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://github.com/moovweb/gvm&#34;&gt;http://github.com/moovweb/gvm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ gvm install go1.9.2&#xA;$ gvm use go1.9.2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;gopath&#34;&gt;GOPATH&lt;/h1&gt;&#xA;&lt;p&gt;gopath用来存放go源码，go的可运行文件，以及相应的编译之后的包文件．&lt;/p&gt;&#xA;&lt;p&gt;GOPATH 从go1.1到1.7都需要设置，而且不能是go的安装目录, go1.8开始有默认值:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;GOPATH=$USERPROFILE%go&#xA;GOPATH=$HOME/go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;gopath结构：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;src    存放源码&#xA;pkg    编译后的库文件&#xA;bin    编译后生成的可执行文件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;gopath有多个值时用冒号分开即可.&lt;/p&gt;&#xA;&lt;h1 id=&#34;gobin&#34;&gt;GOBIN&lt;/h1&gt;&#xA;&lt;p&gt;默认值&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;GOBIN=$HOME/go/bin&#xA;export PATH=$PATH:$HOME/go/bin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;go get 和 go install 安装的二进制到GOBIN。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;go命令&#34;&gt;go命令&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ go help [command]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;get&lt;/p&gt;</description>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://canuxcheng.com/post/devops/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops/</guid>
      <description>&lt;h1 id=&#34;devops&#34;&gt;DevOps&lt;/h1&gt;&#xA;&lt;p&gt;DevOps包括ChatOps, 敏捷开发，持续集成,持续交付,持续发布/部署，QA(自动化测试），智能监控和日志管理等内容．&lt;/p&gt;&#xA;&lt;p&gt;DevOps涉及到三个部门：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Development&lt;/li&gt;&#xA;&lt;li&gt;Operations&lt;/li&gt;&#xA;&lt;li&gt;Quality Assurance&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;ci&#34;&gt;CI&lt;/h1&gt;&#xA;&lt;p&gt;Continuous Integration.&lt;/p&gt;&#xA;&lt;p&gt;持续集成包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编译代码.&lt;/li&gt;&#xA;&lt;li&gt;静态代码分析.&lt;/li&gt;&#xA;&lt;li&gt;自动化测试，例如selenium.&lt;/li&gt;&#xA;&lt;li&gt;代码覆盖率分析.&lt;/li&gt;&#xA;&lt;li&gt;构建，例如docker.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;cd&#34;&gt;CD&lt;/h1&gt;&#xA;&lt;p&gt;Continuous Delivery.&lt;/p&gt;&#xA;&lt;p&gt;持续交付包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将通过测试的代码部署到Staging.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;continuous-releasedeploy&#34;&gt;Continuous Release/Deploy&lt;/h1&gt;&#xA;&lt;p&gt;持续部署/发布包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将通过评审的交付代码部署到Production.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cicd的工具&#34;&gt;CI/CD的工具&lt;/h1&gt;&#xA;&lt;p&gt;持续集成和部署&lt;/p&gt;&#xA;&lt;h2 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h2&gt;&#xA;&lt;h2 id=&#34;travis-ci&#34;&gt;travis CI&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;https://travis-ci.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;travis CI是基于github的CI工具, 部署代码然后运行测试代码.&lt;/p&gt;&#xA;&lt;p&gt;在github项目添加.travis.yml文件：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;language: python&#xA;python:&#xA;  - &amp;quot;2.7&amp;quot;&#xA;install:&#xA;  - pip install -r requirements.txt&#xA;  - pip install coveralls&#xA;script:&#xA;  - coverage run --source=pymonitoringplugins setup.py test&#xA;after_success:&#xA;  - coveralls&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;circleci&#34;&gt;circleci&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/&#34;&gt;https://circleci.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;coverage的工具&#34;&gt;coverage的工具&lt;/h1&gt;&#xA;&lt;p&gt;统计单元测试的覆盖率&lt;/p&gt;&#xA;&lt;h2 id=&#34;coveralls&#34;&gt;coveralls&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/&#34;&gt;https://coveralls.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;codecov&#34;&gt;codecov&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/&#34;&gt;https://codecov.io/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://canuxcheng.com/post/c_devops/</link>
      <pubDate>Mon, 11 Apr 2016 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/c_devops/</guid>
      <description>&lt;h1 id=&#34;ide&#34;&gt;IDE&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Visual Studio&lt;/li&gt;&#xA;&lt;li&gt;VSCode&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;compilers&#34;&gt;Compilers&lt;/h2&gt;&#xA;&lt;p&gt;编译器组成：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;frontend&lt;/li&gt;&#xA;&lt;li&gt;optimizer&lt;/li&gt;&#xA;&lt;li&gt;backend&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh.cppreference.com/w/cpp/compiler_support&#34;&gt;https://zh.cppreference.com/w/cpp/compiler_support&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;windows:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;llvm clang&lt;/li&gt;&#xA;&lt;li&gt;Mingw&lt;/li&gt;&#xA;&lt;li&gt;Msvc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;linux:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;llvm clang&lt;/li&gt;&#xA;&lt;li&gt;gcc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;mac:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;llvm clang&lt;/li&gt;&#xA;&lt;li&gt;gcc&lt;/li&gt;&#xA;&lt;li&gt;apple clang&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;gcc&#34;&gt;gcc&lt;/h3&gt;&#xA;&lt;p&gt;gnu gcc,g++&lt;/p&gt;&#xA;&lt;h3 id=&#34;llvm-clang&#34;&gt;llvm clang&lt;/h3&gt;&#xA;&lt;p&gt;llvm: low level virtual machine. (backend)&lt;/p&gt;&#xA;&lt;p&gt;clang: c language.(frontend)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;tools&#34;&gt;tools&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CMake&lt;/li&gt;&#xA;&lt;li&gt;MSBuild&lt;/li&gt;&#xA;&lt;li&gt;Makefile&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;gcc-1&#34;&gt;GCC&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;-ansi&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;for c: == -std=c90&#xA;for cpp: ==-std=c++98&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;-std&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;c++17, gnu++17, gnu17,c17&#xA;gnu2x: 下个ISO C标准。&#xA;c2x:下个ISO C标准。&#xA;c++2a: 下个ISO C++标准&#xA;gnu+2a:下个ISO C++标准&lt;/p&gt;&#xA;&lt;p&gt;gcc8 开始支持c++20.&#xA;gcc11开始支持c++23.&lt;/p&gt;&#xA;&lt;h2 id=&#34;vscode&#34;&gt;vscode&lt;/h2&gt;&#xA;&lt;p&gt;for macOS:&lt;/p&gt;</description>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://canuxcheng.com/post/python_devops/</link>
      <pubDate>Sun, 03 Apr 2016 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/python_devops/</guid>
      <description>&lt;h1 id=&#34;python&#34;&gt;Python&lt;/h1&gt;&#xA;&lt;p&gt;python2的最后一个版本是python2.7, 2020年停止更新.&lt;/p&gt;&#xA;&lt;p&gt;Windows安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Python2.7.9之后的版本直接下载msi安装即可．&#xA;选择自动设置PATH，默认安装pip和setuptools.&#xA;可以使用IDLE或python命令行或cmd执行python命令&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Linux安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$sudo apt-get install python&#xA;$sudo yum install python&#xA;&#xA;$sudo apt-get install python-dev&#xA;$sudo apt-get install python3-dev&#xA;$sudo yum install python-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;标准库的路径：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;C:\Python*\Lib&#xA;/usr/lib/python*/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;python的IDE：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Windows: IDLE&lt;/li&gt;&#xA;&lt;li&gt;Linux: Vim&lt;/li&gt;&#xA;&lt;li&gt;Pycharm/VS&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;python命令&#34;&gt;python命令&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ python/ipython     # 进入python解释器&#xA;&amp;gt;&amp;gt;&amp;gt;exit()/Ctrl+d     # 退出python解释器&#xA;&amp;gt;&amp;gt;&amp;gt;help()            # 进入help工具&#xA;help&amp;gt;quit            # 退出help工具&#xA;$ pydoc --help        # 文档工具&#xA;&#xA;# -c　cmd, __name__ != &#39;__main__&#39;&#xA;$ python -c &#39;import module/package; expressions&#39;&#xA;# -m mod, __name__ == &#39;__main__&#39;&#xA;$ python -m &#39;module/package&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;python的可用接口&#34;&gt;python的可用接口&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;python内置常量，函数，类和异常．&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
