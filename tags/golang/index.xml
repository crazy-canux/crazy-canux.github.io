<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Golang on Morgoth</title>
        <link>https://canuxcheng.com/tags/golang/</link>
        <description>Recent content in Golang on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 20 Jul 2018 23:14:07 +0800</lastBuildDate><atom:link href="https://canuxcheng.com/tags/golang/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Gin</title>
        <link>https://canuxcheng.com/post/gin/</link>
        <pubDate>Fri, 20 Jul 2018 23:14:07 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/gin/</guid>
        <description>&lt;h1 id=&#34;gin&#34;&gt;Gin&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gin-gonic/gin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/gin-gonic/gin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;install&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ go get -u github.com/gin-gonic/gin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;import&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/gin-gonic/gin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Go</title>
        <link>https://canuxcheng.com/post/go/</link>
        <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/go/</guid>
        <description>&lt;h1 id=&#34;go概述&#34;&gt;Go概述&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://golang.org/ref/spec&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://golang.org/ref/spec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;go语言表达能力强，简洁，清晰，高效．&lt;/p&gt;
&lt;p&gt;go是一个快速的，静态的，强类型的，编译型语言．&lt;/p&gt;
&lt;p&gt;go具有高并发和垃圾回收功能.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go基本语法&#34;&gt;Go基本语法&lt;/h1&gt;
&lt;p&gt;go源程序叫*.go&lt;/p&gt;
&lt;p&gt;go大小写敏感&lt;/p&gt;
&lt;p&gt;go程序都是由包组成，程序的入口是main包中的main函数，每个程序有且只有一个．&lt;/p&gt;
&lt;p&gt;go中只有首字母大写的名称才能从包中导出．&lt;/p&gt;
&lt;p&gt;go的类型在变量名后面．&lt;/p&gt;
&lt;p&gt;go函数外的每个语句都必须以关键字开始.&lt;/p&gt;
&lt;p&gt;go标识符(函数名／变量名／常量名／类型名／语句标号／包名)以字母或下划线开头，后面还可以包含数字,不能用关键字.&lt;/p&gt;
&lt;p&gt;go使用大括号{}表示一个代码块.&lt;/p&gt;
&lt;p&gt;go使用分号;表示一个语句结束, 一般一行写多个语句才需要显示添加分号．&lt;/p&gt;
&lt;p&gt;go的包名一般是小写的单个单词(文件所在的最后一层目录名).&lt;/p&gt;
&lt;p&gt;go一般使用驼峰命名法.&lt;/p&gt;
&lt;p&gt;go没有逗号操作符.&lt;/p&gt;
&lt;p&gt;go中++/&amp;ndash;是语句不是表达式．&lt;/p&gt;
&lt;p&gt;go中大写字母开头的变量或函数是公有的，小写字母开头的是包私有的.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go注释&#34;&gt;Go注释&lt;/h1&gt;
&lt;p&gt;单行注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// comment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多行注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* comment */
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go关键字&#34;&gt;Go关键字&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;var const 
break continue for if else switch case default goto fallthrough
func return defer
package import
range type struct map
interface
select go chan
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go运算符和优先级&#34;&gt;Go运算符和优先级&lt;/h1&gt;
&lt;p&gt;go中的运算都是从左到右结合．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^    #
!    # 逻辑非

*
/    # 结果取整数
%
&amp;lt;&amp;lt;   # 位运算，左移
&amp;gt;&amp;gt;   # 位运算，右移
&amp;amp;    # 位运算，　按位与
&amp;amp;^   #

+
-
|    # 位运算,按位或
^    # 位运算,按位异或

==
!=
&amp;lt;
&amp;lt;=
&amp;gt;
&amp;gt;=

&amp;lt;- # chan运算符

&amp;amp;&amp;amp;   # 逻辑与
||   # 逻辑或
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go数据类型&#34;&gt;Go数据类型&lt;/h1&gt;
&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;
&lt;p&gt;定义/申明变量:&lt;/p&gt;
&lt;p&gt;通过关键字var在包或函数中申明/定义变量&lt;/p&gt;
&lt;p&gt;在函数或块中定义的变量作用域就是当前函数或当前块。&lt;/p&gt;
&lt;p&gt;在函数外部定义的全局变量作用域是整个包.&lt;/p&gt;
&lt;p&gt;大写字母开头的全局变量能被其它包引用。&lt;/p&gt;
&lt;p&gt;全局变量必须使用var关键字．&lt;/p&gt;
&lt;p&gt;没有初始化的变量在申明的时候赋予零值.&lt;/p&gt;
&lt;p&gt;已经申明但没有使用的变量在编译时会报错．&lt;/p&gt;
&lt;p&gt;通过等号给变量赋值就是定义变量.&lt;/p&gt;
&lt;p&gt;大写字母开头的变量是public, 小写字母开头的是private变量.&lt;/p&gt;
&lt;p&gt;申明变量:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 一个变量一种类型
var varname Type

# 多个变量一种类型
var varname varname1 ... Type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义(初始化)变量:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 定义的时候初始化
var i, j int = 1, 2
# 初始化使用表达式可以省略类型，从值中获取类型
var i, j = true, &amp;quot;str&amp;quot;

# 多个变量多种类型
var (
    var1 Type1 = val1
    var2 Type2 = val2
    # 给类型取别名
    variable alias Type = value
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特殊变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_  # 下划线是个特殊变量名，用于忽略一个值.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;常量&#34;&gt;常量&lt;/h2&gt;
&lt;p&gt;定义常量：&lt;/p&gt;
&lt;p&gt;通过关键字const在包或函数中定义常量．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 常量可以是bool, string, 数值
const Pi float = 3.14
const World = &amp;quot;China&amp;quot;
const Truth = true
# 定义多个常量
const (
    Pi = 3.14
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;枚举:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# iota内置常量用来统计枚举中的行数
const (
    con = val
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常量不能用:=语法来申明。&lt;/p&gt;
&lt;h2 id=&#34;bool&#34;&gt;bool&lt;/h2&gt;
&lt;p&gt;bool类型变量的零值是false.&lt;/p&gt;
&lt;p&gt;bool类型是值传递．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数值类型&#34;&gt;数值类型&lt;/h2&gt;
&lt;p&gt;数值类型变量的零值是0.&lt;/p&gt;
&lt;p&gt;数值类型是值传递.&lt;/p&gt;
&lt;p&gt;有符号类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int int8 int16 int32(rune) int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;无符号类型:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;uint uint8(byte) uint16 uint32 uint64 uintptr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;int, uint, uintptr 在32位系统是32bit, 在64位系统是64bit&lt;/p&gt;
&lt;p&gt;浮点类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;float32
float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;复数类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;complex64
complex128
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;string&#34;&gt;string&lt;/h2&gt;
&lt;p&gt;string类型变量的零值是&amp;quot;&amp;quot;.&lt;/p&gt;
&lt;p&gt;string类型是值传递.&lt;/p&gt;
&lt;p&gt;go中的字符串都采用utf-8编码.&lt;/p&gt;
&lt;p&gt;go中的字符串用双引号  或者　反引号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 单行字符串
var str string = &amp;quot;hello&amp;quot;
# 多行字符串(原样输出)
var str string = `hello
                 world`

var str = &amp;quot;hello&amp;quot; // 类型可以通过值确定
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go中的字符串是不可变的, 修改字符串：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 使用类型转换
var str string = &amp;quot;hello&amp;quot;
c := []byte(str) # str转换成 []byte 类型
c[index] = value # 重新赋值
newString := string(c) # []byte 转换成 string

# 使用索引运算
s := &amp;quot;hello&amp;quot;
s = &amp;quot;str&amp;quot; + s[1:]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;字符串运算：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s1 := &amp;quot;hello&amp;quot;
s2 := &amp;quot;world&amp;quot;
s3 := s1 + s2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;遍历字符串：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for index, value := range s {...}
for index := range s {...}
for _, value := range s {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;结构体struct&#34;&gt;结构体/struct&lt;/h2&gt;
&lt;p&gt;结构体就是字段的集合．结构体字段通过点操作符来访问．&lt;/p&gt;
&lt;p&gt;结构体是值传递.&lt;/p&gt;
&lt;p&gt;申明一个结构体类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type StructName struct {
    var Type
    var1 Type1
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;申明多个结构体类型:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type (
    StructB struct {
        ...
    }

    StructB struct {
    }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;申明一个结构体类型的变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var s StructName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义结构体变量:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 列出全部字段
var s = StructName{val, ...}
s := StructName{val, ...}

# 使用val: 可以仅列出部分字段, 未列出的字段使用默认值
var s = StructName{
    var: val,
    ...
}
s := StructName{
    var: val,
    ...
}

# 给字段赋值
s.var1 = value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结构体指针:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type StructName struct {
    var Type
    var1 Type1
}

var s = &amp;amp;StructName{}
s := &amp;amp;StructName{}

(*s).Var1 = val1
s.Var1 = val1 // go允许隐士间接引用

s := StructName{val, val1}
p := &amp;amp;s
# 原本应该通过(*p).var来访问，go允许隐式间接引用．
p.var = p.var1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;指针pointer&#34;&gt;指针/pointer&lt;/h2&gt;
&lt;p&gt;指针的零值为nil.&lt;/p&gt;
&lt;p&gt;go的指针保存了值的内存地址, go没有指针运算．&lt;/p&gt;
&lt;p&gt;通过指针实现引用传递.&lt;/p&gt;
&lt;p&gt;申明一个指针变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var point *int
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;操作符会生成一个指向其操作数的指针(保存变量的地址)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;point = &amp;amp;variable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;*操作符表示指针指向的数值(读写该地址保存的值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*point = value
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数组array&#34;&gt;数组/array&lt;/h2&gt;
&lt;p&gt;数组通过下标来访问．数组不能改变大小（长度）&lt;/p&gt;
&lt;p&gt;数组是值传递．&lt;/p&gt;
&lt;p&gt;数组的属性有类型和长度,只有长度和类型都相同的才是同类型数组,才能相互赋值.&lt;/p&gt;
&lt;p&gt;数组长度和容量相同．&lt;/p&gt;
&lt;p&gt;申明数组:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ArrayName [number]Type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义数组：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ArrayName = [number]Type{}

ArrayName := [number]Type{val, val1, ...}
ArrayName := [number]Type{index: value, ...} // 给指定索引赋值,其余为零值
ArrayName := []Type{val, ...} // 容量也可以由初始化的元素个数决定.

ArrayName := [number]*Type{0: new(int), 1: new(string), ...} // 指针数组
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数组元素赋值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ArrayName[0] = val

*ArrayName[0] = val // 指针数组
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数组赋值（值传递）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 只有类型和长度相同的数组才能赋值
# 非指针数组赋值，会另外开辟地址空间.
 # 修改newArray的值，不会改变ArrayName的值
 newArray = ArrayName

# 指针类型的数组赋值，指向的是相同的地址.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多维数组(嵌套数组):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;doubleArray := [2][4]int{[4]int{1, 2, 3, 4}, [4]int{5, 6 7, 8}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;遍历数组：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for index, value := range a {
    fmt.Println(&#39;%d, %d\n&#39;, index, value)
}

# 只要索引, 去掉,value即可
for index := range a {...}
# 只要值，用_忽略索引
for _, value := range a {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;切片slice&#34;&gt;切片/slice&lt;/h2&gt;
&lt;p&gt;切片的零值是nil, nil切片的长度和容量都是０，且没有底层数组．&lt;/p&gt;
&lt;p&gt;切片传递的是地址(引用传递),修改切片的元素值其实就是修改底层数组的对应的元素的值,共享该元素的其它切片的值也相应改变．&lt;/p&gt;
&lt;p&gt;切片的属性包括指向底层数组的指针，切片的长度，切片的容量.&lt;/p&gt;
&lt;p&gt;切片不存储数据，只是描述数组的一段,因此切片不指定大小（长度）.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 表示切片类型
[]Type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;申明切片:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var SliceName []Type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义切片：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 通过字面量定义
var SliceName = []Type{}
SliceName := []Type{val, val1, ...}

SliceName := []Type{index: value}   // 索引就表示长度和容量

// 通过make函数创建切片
var SliceName = make([]type, len, cap)
SliceName := make([]Type, len, cap)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过切片定义新切片:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;切片的操作返回新的切片。
NewS := SName[i:j]
cap(SName) = k
NewS 长度和容量：
len = j-i
cap = k-i
NewS 无法访问指向的底层数组第一个元素之前的元素。
也不能访问超出长度之后的索引,但是可以通过append增加切片长度之后访问.
NewS[index] //当index &amp;gt;= j编译器报错 ，超出了NewS 的长度，无法访问。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;三索引操作:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NewS := SName[i:j:k]
三索引表示容量， i:j 表示长度， i:k 表示容量.
容量不能超过可用容量(也就是SName的容量).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;切片操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 半开区间，不包括最后一个下标
s[low:high]
s[:high] // low=0, default
s[low:] // high=max, default
s[:] // s[0:max], default

s[:0] // 把切片的长度变为０（清空切片)
s[:4] // 扩展为４
s[2:] // 扩展为 arrayname[2:4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;二维切片：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[][]Type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;遍历切片：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 切片遍历和数组相同
for index, value := range s {
    ...
}
for index := range s {...}
for _, value := range s {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;slice作为函数参数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;切片作为函数参数，传递的其实是值,函数会使用和切片相同的底层数组创建一个新的切片来操作.
所以函数内部修改了切片的值,作为参数的切片的值也被修改了.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;映射map&#34;&gt;映射/map&lt;/h2&gt;
&lt;p&gt;映射的零值是nil, 既没有键，也不能添加键．&lt;/p&gt;
&lt;p&gt;map是引用传递．是存储键值对的无序集合.&lt;/p&gt;
&lt;p&gt;map是无序的，只能通过key索引，没有下标操作.&lt;/p&gt;
&lt;p&gt;map的key需要支持==或!= 运算，不能是函数，映射，切片&lt;/p&gt;
&lt;p&gt;申明:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 申明值为nil的空映射，不能用于存储键值对.
var MapName map[keyType]ValueType
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义映射：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var MapName = map[keyType]ValueType{}
var MapName = map[keyType]ValueType{
    key: value,
    ...
}

MapName := map[keyType]valueType{}
MapName := map[KeyType]ValueType{
    &amp;quot;key&amp;quot;: value,
    ...
}

# 通过make定义map
var MapName = make(map[keyType]ValueType, cap)
MapName := make(map[keyType]ValueType, cap)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;m[key] = value

value = m[key]
# 若key在m中ok为true, 否则为false, 且value是对应类型的零值
value, ok := m[key]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;遍历映射：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for key, value := range m {...}
for key := range m {...}
for _, value := range m {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;map作为函数参数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;不会创建该映射的副本，该函数对映射的修改就是对原始参数指向的映射的修改.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;类型转换&#34;&gt;类型转换&lt;/h2&gt;
&lt;p&gt;go中兼容的类型才能转换，而且必须显示转换．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ValueA [:]= TypeA(ValueB)

floatA := float64(uint64Var)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;others&#34;&gt;others&lt;/h2&gt;
&lt;p&gt;any&lt;/p&gt;
&lt;p&gt;comparable&lt;/p&gt;
&lt;p&gt;byte&lt;/p&gt;
&lt;p&gt;error&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go控制流&#34;&gt;Go控制流&lt;/h1&gt;
&lt;p&gt;go控制流的左大括号不能另起一行．&lt;/p&gt;
&lt;p&gt;golang没有内置的while循环。&lt;/p&gt;
&lt;h2 id=&#34;for循环&#34;&gt;for循环&lt;/h2&gt;
&lt;p&gt;go只有for可以循环．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i := 0; i &amp;lt; 10; i++ {
    sum += i
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for循环有三种模式：&lt;/p&gt;
&lt;p&gt;for循环后面没有小括号，代码块必须要大括号．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for init; condition; statement {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for循环的初始化语句init和后置语句statement可以省略,相当于while．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for condition {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;无限循环, 相当于for(;;)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;if条件语句&#34;&gt;if条件语句&lt;/h2&gt;
&lt;p&gt;if后面的小括号不要，但是代码块需要大括号．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if condition {
    ...
} else if condition {
    ...
} else {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;switch条件语句&#34;&gt;switch条件语句&lt;/h2&gt;
&lt;p&gt;go中的switch-case的variable无需为常量，且取值可以不是整数．&lt;/p&gt;
&lt;p&gt;go中的只执行匹配的case，相当于默认在每个case后面加了break语句．&lt;/p&gt;
&lt;p&gt;case匹配到的语句如果只有一行可以和case语句写在同一行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;switch variable {
case value1:
    ...
case value2: expression
default:
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多个条件可以放到一个case:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;switch variable {
    case value1, value2, ...: expression
    case valuen: fallthrough
    defalut:
        ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;没有条件的switch-case&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;switch {
case condition:
    ...
...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不需要默认的break,需要添加fallthrough:&lt;/p&gt;
&lt;p&gt;fallthrough不会判断后面的case的condition,而是直接执行后面所有的case.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;switch variable {
case val1:
    ...
    fallthrough
...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;label&#34;&gt;label&lt;/h2&gt;
&lt;p&gt;golang的label不需要缩进:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LabelName:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;break&#34;&gt;break&lt;/h2&gt;
&lt;p&gt;break用于跳出for/switch/select循环.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;break
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;break也支持label:&lt;/p&gt;
&lt;p&gt;break的label可以跳出外层循环.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;break [tag]

label:
for i := 0; i &amp;lt; 1000; i++ {
    for j :=0; j &amp;lt; 1000; j++ {
        if j &amp;lt; i {
            break label // 跳出最外层循环.
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;continue&#34;&gt;continue&lt;/h2&gt;
&lt;p&gt;continue语句只能在for循环中使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;continue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;continue也支持label:&lt;/p&gt;
&lt;p&gt;continue的label可以从外层循环继续执行.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;continue [tag]

next:
for outer := 2; outer &amp;lt; 3000; outer++ {
    for inner :=2; inner &amp;lt; outer; inner++ {
        if outer%inner == 0 {
            continue next // 并非继续内存循环，而是从外层循环继续执行.
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;goto&#34;&gt;goto&lt;/h2&gt;
&lt;p&gt;goto跳转语句，跳转到指定标签运行．&lt;/p&gt;
&lt;p&gt;标签区分大小写.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Label:
    expression

...
goto Label
continue LABEL
break LABEL
...
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go函数&#34;&gt;Go函数&lt;/h1&gt;
&lt;p&gt;函数的零值是nil.&lt;/p&gt;
&lt;p&gt;函数是引用类型.&lt;/p&gt;
&lt;p&gt;大写字母开头的函数是public, 小写字母开头的是private.&lt;/p&gt;
&lt;p&gt;创建函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func FuncName(var Type, var1 Type1) rType {
    ...
    return ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多值返回：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func FuncName(var Type) (rType, rType1, ...) {
    ...
    return ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命名返回值(必须用括号)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 一般return后面不带返回值，否则需要返回定义的所有变量
func FuncName(var Type) (rvar rType, rvar1 rType) {
    ...
    rvar = ...
    rvar1 = ...
    return
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多个变量类型相同时保留最后一个的类型即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func FuncName(var, var1 Type) (rvar, rvar1 rType) {
    ...
    return ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;变量作用域：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;函数内部定义的变量是局部变量
函数外定义的变量是全局变量．
局部变量优先使用．
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;形式参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;形式参数的作用域范围和函数体中的局部变量一致．
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;函数返回值的作用域范围和函数体中的局部变量一致．
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实际参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;实际参数可以是值传递，也可以是引用传递．
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指针参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 实参必须是指针才能调用该函数
func FuncName(v *Type) rType {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数中短变量申明(局部变量):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 在函数内部，明确值的类型的情况下可以用 := 代替var关键字定义变量
func FuncName() {
    variable := value
    var1, var2, ... := val1, val2, ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重复申明短变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;本次申明与已申明的变量在同一作用域．
在初始化中与已申明的变量类型相同才能赋值．
本次申明中至少另有一个变量是新申明的．
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;defer关键字：&lt;/p&gt;
&lt;p&gt;defer会将函数推迟到外层函数返回之后执行.&lt;/p&gt;
&lt;p&gt;推迟调用的函数其参数会立即求值，然后压入defer栈中,外层函数返回后按照后进先出的顺序调用．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func FuncOut() {
    ...
    defer FuncName()
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数也是值，也可以传递，可以用作函数的参数或返回值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func FuncName(variable func(Type, ...) rType) rType {
    ...
}

FuncName := func(variable Type, ...) rType {
    ..
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;匿名函数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func(&amp;lt;arguments&amp;gt;) (returns) {}()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可变参数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func FuncName(vars ...Type) rType {}
FuncName(vars..)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;closures/闭包:&lt;/p&gt;
&lt;p&gt;init函数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 每个包中可以有任意个init函数.
# 这些init函数会在main函数执行之前调用.
# init函数不能有参数和返回值
# main中的init最后调用.
func init() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go文件和输入输出&#34;&gt;Go文件和输入输出&lt;/h1&gt;
&lt;p&gt;go的标准库fmt实现了类似于C语言的printf和scanf格式化I/O函数.&lt;/p&gt;
&lt;p&gt;还有io和bufio标准库可用&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;输入&lt;/h2&gt;
&lt;p&gt;输入的本质就是从Stdin读取&lt;/p&gt;
&lt;p&gt;fmt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var input string
fmt.Scan*(&amp;amp;input)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bufio.Reader:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inputReader := bufio.NewReader(os.Stdin)
inputReader.Read*()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;输出&#34;&gt;输出&lt;/h2&gt;
&lt;p&gt;输出的本质就是往os.Stdout写&lt;/p&gt;
&lt;p&gt;fmt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fmt.Print*()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;os.File:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;os.Stdout.Write*(&amp;quot;hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bufio.Writer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;outputWriter := bufio.NewWriter(os.Stdout)
outputWriter.Writer*()
outputWriter.Flush()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;文件&#34;&gt;文件&lt;/h2&gt;
&lt;p&gt;标准库os.File结构的指针用来表示文件句柄&lt;/p&gt;
&lt;p&gt;标准库bufio提供了带缓冲的操作&lt;/p&gt;
&lt;p&gt;读文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;readFile, err := os.Open(&amp;quot;filename&amp;quot;)
readFile.Read*()

inputReader := bufio.NewReader(readFile)
inputReader.Read*(&#39;\n&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;写文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;writeFile, err := os.Create(&amp;quot;filename&amp;quot;)
writeFile.Write*()

outputWriter := bufio.NewWriter(outputFile)
outputWriter.Write*(&amp;quot;string&amp;quot;)
outputWriter.Flush()
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go错误和异常&#34;&gt;Go错误和异常&lt;/h1&gt;
&lt;p&gt;go的标准库errors实现了用于错误处理的函数.&lt;/p&gt;
&lt;p&gt;内置函数panic是断言函数，会触发一个异常，用于终止当前的线程(会在defer执行完之后终止线程)&lt;/p&gt;
&lt;p&gt;内置接口定义了error接口类型, error类型都有一个Error方法.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type error interface {
    Error() string
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义错误:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var errName error = errors.New(&amp;quot;error message.&amp;quot;)

err := errors.New(&amp;quot;error message.&amp;quot;)

err := fmt.Errorf(format string, a ...interface{})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;panic:&lt;/p&gt;
&lt;p&gt;相当于抛出一个异常，在运行完defer之后,返回到调用者继续运行defer，直到最外层的defer执行完毕，终止程序.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;panic(v interface{})
panic(&amp;quot;ERROR: command not found&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;recover:&lt;/p&gt;
&lt;p&gt;只能用于defer修饰的函数，用于接收panic调用中传递过来的错误值,没有panic返回nil.&lt;/p&gt;
&lt;p&gt;当前函数的后面不会被执行，recover捕获异常之后会返回到调用者继续执行.&lt;/p&gt;
&lt;p&gt;相当于catch一个异常.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;recover() interface{}
defer func() {
    if err := recover(); err != nil {
        fmt.Println(e)
        // &amp;quot;ERROR: command not found&amp;quot;
    }
}()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在包内部，总是应该从panic中recover．&lt;/li&gt;
&lt;li&gt;总是向包的调用者返回错误值，而不是panic.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go包&#34;&gt;Go包&lt;/h1&gt;
&lt;p&gt;创建包：&lt;/p&gt;
&lt;p&gt;包名一般和所在路径的最后一层目录一致．一般是小写的单个单词.&lt;/p&gt;
&lt;p&gt;同一个目录中的代码文件使用同一个包名．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package pkg1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;单个导入:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;quot;pkg1&amp;quot;
import &amp;quot;pkg2&amp;quot;
# 导入时创建别名
import alias &amp;quot;pkg&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;组合导入:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import (
    &amp;quot;pkg1&amp;quot;
    &amp;quot;pkg2&amp;quot;
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;包内的函数名首字母大些才能被其它包导入，否则就是私有的．&lt;/p&gt;
&lt;p&gt;命名导入:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import (
    alias &amp;quot;pkg&amp;quot; # 给包取别名
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;导入副作用：&lt;/p&gt;
&lt;p&gt;只执行导入包中的init函数并初始化全局变量，不导入其它内容．&lt;/p&gt;
&lt;p&gt;编译时不检查该导入是否使用.也不能通过包名调用其中的导出函数.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import _ &amp;quot;path/pkg&amp;quot;

import (
    _ &amp;quot;path/pkg&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go包查找顺序:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$GOROOT/src/... # 安装golang的路径里面的标准库
$GOPATH
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go文档&#34;&gt;Go文档&lt;/h1&gt;
&lt;p&gt;通过注释编写文档，godoc会自动识别．对包，函数，类型，全局变量都可以.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// this is documents
func Fucntion() {}

/*
    This is documents
*/
type St struct {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以给包写一段文字较多的文档，通过在包内创建doc.go.&lt;/p&gt;
&lt;p&gt;这段文档会显示在所有其它文档之前．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim doc.go
/*
    This docs for package
    ...
*/
package pkg # 使用和包一样的名字.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>GSL_golang</title>
        <link>https://canuxcheng.com/post/gsl_golang/</link>
        <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/gsl_golang/</guid>
        <description>&lt;h1 id=&#34;runtime&#34;&gt;runtime&lt;/h1&gt;
&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;// 指定编译器
const Compiler = &amp;quot;gc&amp;quot;/&amp;quot;gccgo&amp;quot;

// 处理器架构: 386/amd64/arm
const GOARCH string = theGoarch

// 操作系统: linux/freebsd/darwin/win
const GOOS string = theGoos
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;var MemProfileRate int = 512 * 1024
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;func GOROOT() string
func Version() string

// 返回本地机器的逻辑cpu个数
func NumCPU() int

//更改调度器可以使用的逻辑cpu数量, 默认只用一个cpu.
func GOMAXPROCS(n int) int

// 使当前goroutine让出绑定的cpu,其它goroutine可以继续执行.
// 当前goroutine放回队列等待继续执行.
func Gosched()

// 终止当前goroutine,终止前执行所有defer.
func Goexit()
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;runtimedebug&#34;&gt;runtime/debug&lt;/h1&gt;
&lt;h2 id=&#34;function&#34;&gt;function&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;// 设置最大线程数，默认1000.
func SetMaxThreads(threads int) int
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;runtimecgo&#34;&gt;runtime/cgo&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;runtimepprof&#34;&gt;runtime/pprof&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;runtimerace&#34;&gt;runtime/race&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;runtimetrace&#34;&gt;runtime/trace&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go&#34;&gt;go&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;expvar&#34;&gt;expvar&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;context&#34;&gt;context&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;unsafe&#34;&gt;unsafe&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;errors&#34;&gt;errors&lt;/h1&gt;
&lt;h2 id=&#34;function-1&#34;&gt;function&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;// 使用字符串创建一个错误, 返回一个error
func New(text string) error
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
