<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container on Morgoth</title>
    <link>http://canuxcheng.com/categories/container/</link>
    <description>Recent content in Container on Morgoth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Jan 2020 20:55:52 +0800</lastBuildDate>
    
	<atom:link href="http://canuxcheng.com/categories/container/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Yaml</title>
      <link>http://canuxcheng.com/post/k8s_yaml/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_yaml/</guid>
      <description>yaml 部署k8s可以通过yaml文件来配置资源. 5个基本组成部分: 1 2 3 4 5 apiVersion: Kind: metadata: spec: status: 查看apiVersion: 1 kubectl api-versions 查看Kind: 1 kubectl api-resources metadata spec status</description>
    </item>
    
    <item>
      <title>Compose</title>
      <link>http://canuxcheng.com/post/compose/</link>
      <pubDate>Sat, 04 Jan 2020 21:53:40 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/compose/</guid>
      <description>docker-compose https://github.com/docker/compose 通过一个yaml文件来管理容器中的服务，包括网络和存储。 安装: 1 2 3 https://docs.docker.com/compose/install/ $ sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose $ sudo chmod +x /usr/local/bin/docker-compose docker-compose命令 1 2 3</description>
    </item>
    
    <item>
      <title>Ingress</title>
      <link>http://canuxcheng.com/post/k8s_ingress/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_ingress/</guid>
      <description>Ingress-Nginx https://github.com/kubernetes/ingress-nginx 1 2 3 4 5 6 7 8 9 10 11 // 部署 $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml // 验证部署 $ kubectl get pods --all-namespaces -l app.kubernetes.io/name=ingress-nginx --watch // Detect installed version POD_NAMESPACE=ingress-nginx POD_NAME=$(kubectl get pods -n $POD_NAMESPACE -l app.kubernetes.io/name=ingress-nginx -o jsonpath=&amp;#39;{.items[0].metadata.name}&amp;#39;) $ kubectl exec -it $POD_NAME -n $POD_NAMESPACE -- /nginx-ingress-controller --version traefik</description>
    </item>
    
    <item>
      <title>Flannel</title>
      <link>http://canuxcheng.com/post/k8s_flannel/</link>
      <pubDate>Mon, 30 Dec 2019 22:06:48 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_flannel/</guid>
      <description>Flannel flannel是k8s最常用的网络插件. https://github.com/coreos/flannel 部署: 1 $ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml 重新部署网络插件: 1 2 3 4 5 6 7 8 9 10 11 12 $ kubectl delete -f X.yml // 第二步，在node节点清</description>
    </item>
    
    <item>
      <title>Kubeadm</title>
      <link>http://canuxcheng.com/post/k8s_kubeadm/</link>
      <pubDate>Mon, 30 Dec 2019 21:47:17 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/k8s_kubeadm/</guid>
      <description>kubeadm https://kubernetes.io/zh/docs/setup/independent/create-cluster-kubeadm/ kubeadm是k8s自带的部署集群的工具. Install 在每台机器上安装 kubeadm, kubelet, kubectl: 1 2 3 4 $ echo &amp;#34;deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&amp;#34; | sudo tee /etc/apt/sources.list.d/kubernetes.list $ sudo apt-get update $ sudo apt-get --yes --allow-unauthenticated install kubeadm kubelet kubectl $ apt-mark hold kubelet kubeadm kubect Kubeadm</description>
    </item>
    
    <item>
      <title>Rancher</title>
      <link>http://canuxcheng.com/post/rancher/</link>
      <pubDate>Tue, 03 Dec 2019 21:54:05 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/rancher/</guid>
      <description> Rancher Deploy </description>
    </item>
    
    <item>
      <title>Alpine</title>
      <link>http://canuxcheng.com/post/alpine/</link>
      <pubDate>Tue, 03 Dec 2019 21:50:47 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/alpine/</guid>
      <description> alpine https://www.alpinelinux.org/
issue command not found:
1 2  # mkdir /lib64 # ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2  </description>
    </item>
    
    <item>
      <title>OpenShift</title>
      <link>http://canuxcheng.com/post/openshift/</link>
      <pubDate>Mon, 02 Dec 2019 21:43:24 +0800</pubDate>
      
      <guid>http://canuxcheng.com/post/openshift/</guid>
      <description>OpenShift readhat kubernetes.
Deploy pre-install:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  &amp;gt; check &amp;#34;sysctl net.ipv4.ip_forward&amp;#34; is set to 1 /etc/containers/registries.conf [registries.insecure] registries = [&amp;#39;172.30.0.0/16&amp;#39;] /etc/docker/daemon.json { &amp;#34;insecure-registries&amp;#34;: [ &amp;#34;172.30.0.0/16&amp;#34; ] } $ sudo systemctl daemon-reload $ sudo systemctl restart docker docker network inspect -f &amp;#34;{{range .IPAM.Config }}{{ .Subnet }}{{end}}&amp;#34; bridge # firewall-cmd --permanent --new-zone dockerc # firewall-cmd --permanent --zone dockerc --add-source 172.</description>
    </item>
    
    <item>
      <title>Helm</title>
      <link>http://canuxcheng.com/post/helm/</link>
      <pubDate>Thu, 05 Sep 2019 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/helm/</guid>
      <description>Helm helm有两个组件: helm: 客户端 tiller: 服务端(helm3被移除) 概念: chart: 一个helm包，包含运行一个应用所需的镜像，依赖和资源. release: 在k8s集群上运</description>
    </item>
    
    <item>
      <title>CRI</title>
      <link>http://canuxcheng.com/post/cri/</link>
      <pubDate>Wed, 05 Jun 2019 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/cri/</guid>
      <description>CRI CRI: Container Runtime Intarface 定义了k8s和container runtime进行交互的接口. 是k8s与container交互的标准. containerd docker. https://github.com/containerd/containerd CRI-O redhat. https://github.com/cri-o/cri-o kata https://github.com/kata-containers/runtime rkt redhat(coreos) https://github.com/rkt/rkt</description>
    </item>
    
    <item>
      <title>CNI</title>
      <link>http://canuxcheng.com/post/cni/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/cni/</guid>
      <description>CNI CNI: Container Network Intarface 单台host上的container通信 none host bridge 多台host之间的container通信 overlay macvlan 提供overlay/macvlan的网络服</description>
    </item>
    
    <item>
      <title>CSI</title>
      <link>http://canuxcheng.com/post/csi/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/csi/</guid>
      <description>CSI CSI: Container Storage Interface CSI提供容器的数据持久化服务. 容器管理数据的两种方式： 数据卷(Volumes) 挂载主机目录(bind mounts) 临时文件系统(tmpfs)</description>
    </item>
    
    <item>
      <title>Container</title>
      <link>http://canuxcheng.com/post/container/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/container/</guid>
      <description>Container OCI: Open Container Initiative. CRI: Container Runtime Interface. CNI: Container Network Interface. CSI: Container Storage Interface. OCI Open Container Initiative，也就是常说的OCI，是由多家公司共同成立的项目，并由linux基金会进行管理，</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://canuxcheng.com/post/docker/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/docker/</guid>
      <description>Docker https://store.docker.com/ https://hub.docker.com/ https://github.com/docker https://github.com/moby/moby Docker是一个容器引擎, 分为社区版CE, 和企业版EE, Docker不是虚拟机, 也不依赖虚拟化技术． docker-cli -&amp;gt; dockerd -&amp;gt; containerd -&amp;gt; docker-shim -&amp;gt; runc Docke</description>
    </item>
    
    <item>
      <title>Harbor</title>
      <link>http://canuxcheng.com/post/harbor/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/harbor/</guid>
      <description>Harbor https://github.com/goharbor/harbor Habor是由VMWare中国团队开源的容器镜像仓库, 用于存储和分发docker镜像的registry服务器. 安装步骤: 下载并解压安装包</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>http://canuxcheng.com/post/kubernetes/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/kubernetes/</guid>
      <description>Kubernetes https://github.com/kubernetes/kubernetes https://github.com/kubernetes/kubeadm https://github.com/kubernetes/kops https://github.com/kubernetes-sigs/kubespray kubernetes简称k8s, 是开源的容器编排工具。 安装单机版k8s: minikube 安装k8s集群: kubeadm (k8s内置的，类似于docker swarm mode,</description>
    </item>
    
    <item>
      <title>Swarm</title>
      <link>http://canuxcheng.com/post/swarm/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      
      <guid>http://canuxcheng.com/post/swarm/</guid>
      <description>Swarm docker swarm 是 docker内置的容器编排工具。 从docker1.12开始swarm内置于docker engine. swarm mode具有内置kv存储，服务发现，负载均</description>
    </item>
    
  </channel>
</rss>