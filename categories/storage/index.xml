<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Storage on Morgoth</title>
        <link>https://canuxcheng.com/categories/storage/</link>
        <description>Recent content in Storage on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 23 Apr 2021 22:02:31 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/categories/storage/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AWS Storage</title>
        <link>https://canuxcheng.com/post/aws_storage/</link>
        <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/aws_storage/</guid>
        <description>&lt;h1 id=&#34;aws-storage&#34;&gt;AWS Storage&lt;/h1&gt;
&lt;h2 id=&#34;s3&#34;&gt;S3&lt;/h2&gt;
&lt;p&gt;Simple Storage Service.&lt;/p&gt;
&lt;p&gt;S3分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S3标准&lt;/li&gt;
&lt;li&gt;S3标准-IA&lt;/li&gt;
&lt;li&gt;S3单区-IA&lt;/li&gt;
&lt;li&gt;S3智能分层&lt;/li&gt;
&lt;li&gt;S3 Glacier&lt;/li&gt;
&lt;li&gt;S3 Glacire Deep Archive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无限存储&lt;/li&gt;
&lt;li&gt;单个对象达到5Tb&lt;/li&gt;
&lt;li&gt;一次写入，多次读取&lt;/li&gt;
&lt;li&gt;99%持久性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;s3-glacier&#34;&gt;S3 Glacier&lt;/h2&gt;
&lt;p&gt;用于存放归档文件，按照访问量收费。&lt;/p&gt;
&lt;h2 id=&#34;ebs&#34;&gt;EBS&lt;/h2&gt;
&lt;p&gt;Elastic Block Store.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes-sigs/aws-ebs-csi-driver&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes-sigs/aws-ebs-csi-driver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EBS可以连接到EC2实例，可用区级资源，需要位于同一可用区中才能连接到EC2实例，卷不会自动扩展。&lt;/p&gt;
&lt;p&gt;EBS只能被单个EC2实例访问。&lt;/p&gt;
&lt;p&gt;特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大小高达16Tb&lt;/li&gt;
&lt;li&gt;EC2实例终止后仍然存在&lt;/li&gt;
&lt;li&gt;默认情况下为固态(SSD)&lt;/li&gt;
&lt;li&gt;提供IOPS SSD和HDD选项&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;efs&#34;&gt;EFS&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes-sigs/aws-efs-csi-driver&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes-sigs/aws-efs-csi-driver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elastic File System 是linux的NFS服务.&lt;/p&gt;
&lt;p&gt;EFS是区域性服务，将数据存储在多个可用区中。可以被上千个EC2实例同时访问。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全托管的NFS文件系统&lt;/li&gt;
&lt;li&gt;为linux负载而设计&lt;/li&gt;
&lt;li&gt;支持PB级别数据&lt;/li&gt;
&lt;li&gt;可以跨多个区域存储数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EFS提供两种存储类型(StorageClass): Standard, Infrequent access.&lt;/p&gt;
&lt;h2 id=&#34;fsx&#34;&gt;FSx&lt;/h2&gt;
&lt;p&gt;FSx是windows File Server服务.&lt;/p&gt;
&lt;h2 id=&#34;storage-gateway&#34;&gt;Storage Gateway&lt;/h2&gt;
&lt;p&gt;支持三种类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tape gateway&lt;/li&gt;
&lt;li&gt;Volume gateway&lt;/li&gt;
&lt;li&gt;File Gateway&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;aws-backup&#34;&gt;AWS Backup&lt;/h2&gt;
&lt;h2 id=&#34;aws-edr&#34;&gt;AWS EDR&lt;/h2&gt;
&lt;p&gt;Elastic Disaster Recovery.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;snow-family&#34;&gt;Snow Family&lt;/h1&gt;
&lt;h2 id=&#34;snowcone&#34;&gt;Snowcone&lt;/h2&gt;
&lt;h2 id=&#34;snowball&#34;&gt;Snowball&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;针对large-scale 数据传输&lt;/li&gt;
&lt;li&gt;支持PB级别数据&lt;/li&gt;
&lt;li&gt;通过物理设备上传数据到S3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;snowmobile&#34;&gt;Snowmobile&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;针对large-scale数据传输&lt;/li&gt;
&lt;li&gt;支持EB级别数据&lt;/li&gt;
&lt;li&gt;通过工作站上传数据到S3&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;transfer-family&#34;&gt;Transfer family&lt;/h1&gt;
&lt;p&gt;SFTP, FTPS, FTP.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;aws-migration-and-transfer&#34;&gt;AWS Migration and Transfer&lt;/h1&gt;
&lt;h2 id=&#34;ads&#34;&gt;ADS&lt;/h2&gt;
&lt;p&gt;Application Discovery Service.&lt;/p&gt;
&lt;h2 id=&#34;ams&#34;&gt;AMS&lt;/h2&gt;
&lt;p&gt;Application Migration Service.&lt;/p&gt;
&lt;h2 id=&#34;dms&#34;&gt;DMS&lt;/h2&gt;
&lt;p&gt;Database Migration Service.&lt;/p&gt;
&lt;p&gt;让您能够迁移关系数据库、非关系数据库和其他类型的数据存储。&lt;/p&gt;
&lt;h2 id=&#34;sct&#34;&gt;SCT&lt;/h2&gt;
&lt;p&gt;Schema Conversion Tool&lt;/p&gt;
&lt;h2 id=&#34;datasync&#34;&gt;DataSync&lt;/h2&gt;
&lt;h2 id=&#34;migration-hub&#34;&gt;Migration Hub&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>K8S CSI</title>
        <link>https://canuxcheng.com/post/k8s_csi/</link>
        <pubDate>Wed, 25 Mar 2020 20:55:52 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/k8s_csi/</guid>
        <description>&lt;h1 id=&#34;csi&#34;&gt;CSI&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/container-storage-interface/spec&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/container-storage-interface/spec&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rook&lt;/li&gt;
&lt;li&gt;cubefs&lt;/li&gt;
&lt;li&gt;longhorn&lt;/li&gt;
&lt;li&gt;ceph&lt;/li&gt;
&lt;li&gt;minio&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;卷volume&#34;&gt;卷Volume&lt;/h2&gt;
&lt;p&gt;和docker中的一样。&lt;/p&gt;
&lt;p&gt;volume支持的卷类型有: awsEBS, azureDisk, azureFile, gcePD, secret, configMap, emptyDir, hostPath, local, nfs等.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
  name: test-ebs
spec:
  containers:
  - image: k8s.gcr.io/test-webserver
    name: test-container
    volumeMounts:
    - mountPath: /test-ebs
      name: test-volume
  volumes:
  - name: test-volume
    # 此 AWS EBS 卷必须已经存在
    awsElasticBlockStore:
      volumeID: &amp;quot;&amp;lt;volume-id&amp;gt;&amp;quot;
      fsType: ext4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AWS的EBS和EFS需要安装驱动:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes-sigs/aws-ebs-csi-driver&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes-sigs/aws-ebs-csi-driver&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes-sigs/aws-efs-csi-driver&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes-sigs/aws-efs-csi-driver&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;存储类storageclass&#34;&gt;存储类StorageClass&lt;/h2&gt;
&lt;p&gt;storageclass没有namespace.&lt;/p&gt;
&lt;p&gt;每个存储类包含provisioner, parameters和reclaimPolicy.&lt;/p&gt;
&lt;p&gt;内置provisioner的卷插件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awsEBS&lt;/li&gt;
&lt;li&gt;azureFile&lt;/li&gt;
&lt;li&gt;azureDisk&lt;/li&gt;
&lt;li&gt;gcePD&lt;/li&gt;
&lt;li&gt;openstack cinder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;没有provisioner的卷类型可以使用外部插件或者自己开发.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes-sigs/sig-storage-lib-external-provisioner&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes-sigs/sig-storage-lib-external-provisioner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;awsEBS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: sourcegraph
labels:
  deploy: sourcegraph
# provisioner: ebs.csi.aws.com
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2 # This configures SSDs (default).
  fsType: ext4 # (default)
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;nfs:&lt;/p&gt;
&lt;p&gt;kubernetes不包含nfs驱动，需要使用外部驱动创建nfs存储类.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: example-nfs
provisioner: example.com/external-nfs
parameters:
  server: nfs-server.example.com
  path: /share
  readOnly: false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;local:&lt;/p&gt;
&lt;p&gt;本地卷不支持动态制备.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;持久卷pv&#34;&gt;持久卷PV&lt;/h2&gt;
&lt;p&gt;persistentvolume没有namespace, 用来指定具体的存储资源。有静态和动态两种方式，最终需要绑定到pvc上。&lt;/p&gt;
&lt;p&gt;pv的回收策略ReclaimPolicy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retained保留&lt;/li&gt;
&lt;li&gt;Deleted删除&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pv的卷绑定模式volumeBindingMode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WaitForFirstConsumer&lt;/li&gt;
&lt;li&gt;Immediate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;卷模式volumeMode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filesystem(默认)&lt;/li&gt;
&lt;li&gt;Block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;访问模式accessMode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RWO: ReadWriteOnce&lt;/li&gt;
&lt;li&gt;ROX: ReadOnlyMany&lt;/li&gt;
&lt;li&gt;RWX: ReadWriteMany&lt;/li&gt;
&lt;li&gt;RWOP: ReadWriteOncePod&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;卷的阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avaliable&lt;/li&gt;
&lt;li&gt;Bound&lt;/li&gt;
&lt;li&gt;Released&lt;/li&gt;
&lt;li&gt;Failed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-volume-provisioning&#34;&gt;static volume provisioning&lt;/h3&gt;
&lt;p&gt;静态pvc和pv的绑定通过storageClassName, accessMode和capacity来判断。&lt;/p&gt;
&lt;p&gt;pv中的capacity必须大于等于pvc。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: PersistentVolume
metadata:
  name: nas-csi-pv
  labels:
    app: demo
spec:
  storageClassName: 
  persistentVolumeReclaimPolicy: Retained/Recycled
  accessModes:
  - ReadWriteMany
  capacity:
    storage: 5Gi
  hostPath:
    path: &amp;quot;/home/path&amp;quot;
  csi:
    driver: ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dynamic-volume-provisioning&#34;&gt;dynamic volume provisioning&lt;/h3&gt;
&lt;p&gt;动态pv需要storageclass, 由StorageClass动态的创建PV, 不需要手动创建pv，只需要在pvc中指定storageclass即可.&lt;/p&gt;
&lt;p&gt;storageclass没有namespace&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: sourcegraph
labels:
  deploy: sourcegraph
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2 
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgsql
  labels:
    deploy: sourcegraph
    sourcegraph-resource-requires: no-cluster-admin
    app.kubernetes.io/component: pgsql
spec:
  // 通过storageClassName自动给pvc创建pv
  storageClassName: sourcegraph
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
    storage: 200Gi
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pvc&#34;&gt;PVC&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nsa-pvc
  namespace: test
labels:
  app: demo
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi 
  // 通过selector让PVC使用指定的PV。
  selector:
    app: demo
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;volumesnapshotclass&#34;&gt;VolumeSnapshotClass&lt;/h2&gt;
&lt;h2 id=&#34;volumesnapshot&#34;&gt;VolumeSnapshot&lt;/h2&gt;
&lt;p&gt;VS是对资源的请求.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: new-snapshot-test
spec:
  volumeSnapshotClassName: csi-hostpath-snapclass
  source:
    persistentVolumeClaimName: pvc-test
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;volumesnapshotcontent&#34;&gt;VolumeSnapshotContent&lt;/h2&gt;
&lt;p&gt;VSC实际中资源管理.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshotContent
metadata:
  name: snapcontent-72d9a349-aacd-42d2-a240-d775650d2455
spec:
  deletionPolicy: Delete
  driver: hostpath.csi.k8s.io
  source:
    volumeHandle: ee0cfb94-f8d4-11e9-b2d8-0242ac110002
  volumeSnapshotClassName: csi-hostpath-snapclass
  volumeSnapshotRef:
    name: new-snapshot-test
    namespace: default
    uid: 72d9a349-aacd-42d2-a240-d775650d2455
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Image</title>
        <link>https://canuxcheng.com/post/cncf_image/</link>
        <pubDate>Tue, 03 Dec 2019 21:50:47 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/cncf_image/</guid>
        <description>&lt;h1 id=&#34;image&#34;&gt;image&lt;/h1&gt;
&lt;p&gt;容器镜像&lt;/p&gt;
&lt;p&gt;docker image driver: aufs, btrfs, devicemapper, overlay.&lt;/p&gt;
&lt;h2 id=&#34;multi-platform-images&#34;&gt;multi-platform images&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/build/building/multi-platform/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/build/building/multi-platform/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;qemu&#34;&gt;qemu&lt;/h3&gt;
&lt;p&gt;使用qume:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 安装bitfmt
docker run --privileged --rm tonistiigi/binfmt --install all

// 查看支持的平台
ls -l /proc/sys/fs/binfmt_misc/qemu-*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;multiple-native-nodes&#34;&gt;multiple native nodes&lt;/h3&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// linux
sudo apt install docker-buildx-plugin

// mac
brew install docker-buildx
mkdir -p ~/.docker/cli-plugins
ln -sfn $(which docker-buildx) ~/.docker/cli-plugins/docker-buildx
docker buildx install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker buildx version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;管理builder instance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker buildx create
--append 添加node到builder实例。
--leave 从builder实例删除node
--driver Driver to use(&amp;quot;docker&amp;quot;, &amp;quot;docker-container&amp;quot;, &amp;quot;kubernetes&amp;quot;)
--name
--use
--node
--platform 
--bootstrap 启动实例（以容器的形式启动）

// 以本地是amd64为例，创建一个实例.
docker buildx create --use --bootstrap --platform linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/arm/v7,linux/arm/v6 --name canux-builder

// 如果没有qumu，可以把不同平台的远程机器加到builder实例.
docker buildx create \
--name local_remote_builder \
--append --node &amp;lt;my-arm-server&amp;gt; \
--platform linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6 \
ssh://user@&amp;lt;my-arm-server&amp;gt; 

docker buildx rm

docker buildx stop

docker buildx inspect

docker buildx use

// 查看当前可用的builders
docker buildx ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;构建多平台镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker buildx build --platform &amp;lt;p1,p2&amp;gt; ...

// 一次编译多个平台的镜像直接push到registry。
docker buildx build --platform linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/arm/v7,linux/arm/v6 --push -t name/target:tag .

// 编辑成不同的image 
docker buildx build -o type=docker --platform linux/amd64 -t name:1.0.0 .
docker buildx build -o type=docker --platform linux/arm64 -t name:1.0.0-linux-arm64 .
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cross-compilation&#34;&gt;cross-compilation&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;overlay&#34;&gt;Overlay&lt;/h2&gt;
&lt;p&gt;最下层是一个 lower 层，也就是镜像层，它是一个只读层；&lt;/p&gt;
&lt;p&gt;右上层是一个 upper 层，upper 是容器的读写层，upper 层采用了写实复制的机制，也就是说只有对某些文件需要进行修改的时候才会从 lower 层把这个文件拷贝上来，之后所有的修改操作都会对 upper 层的副本进行修改；&lt;/p&gt;
&lt;p&gt;upper 并列的有一个 workdir，它的作用是充当一个中间层的作用。也就是说，当对 upper 层里面的副本进行修改时，会先放到 workdir，然后再从 workdir 移到 upper 里面去，这个是 overlay 的工作机制；&lt;/p&gt;
&lt;p&gt;最上面的是 mergedir，是一个统一视图层。从 mergedir 里面可以看到 upper 和 lower 中所有数据的整合，然后我们 docker exec 到容器里面，看到一个文件系统其实就是 mergedir 统一视图层。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 挂载到overlay
mount -t overlay -o lowerdir=/path/lower,upperdir=/path/upper,workdir=/path/work overlay /path/di
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;scratch&#34;&gt;scratch&lt;/h2&gt;
&lt;p&gt;scratch是空白镜像，一般用于基础镜像构建.比如制作alpine/ubuntu/debian/busybox镜像.&lt;/p&gt;
&lt;h2 id=&#34;ubuntudebian&#34;&gt;ubuntu/debian&lt;/h2&gt;
&lt;p&gt;Hash Sum mismatch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RUN set -ex \
&amp;amp;&amp;amp; apt-get clean \
&amp;amp;&amp;amp; apt-get update -o Acquire::CompressionTypes::Order::=gz \
&amp;amp;&amp;amp; apt-get update \
&amp;amp;&amp;amp; apt-get install -y --allow-unauthenticated --no-install-recommends \
build-essential \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;centosfedora&#34;&gt;centos/fedora&lt;/h2&gt;
&lt;h2 id=&#34;buildpack-deps&#34;&gt;buildpack-deps&lt;/h2&gt;
&lt;p&gt;在ubuntu/debian基础上安装一些工具，比ubuntu/debian镜像更大.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/docker-library/buildpack-deps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/docker-library/buildpack-deps&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;busybox&#34;&gt;busybox&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/docker-library/busybox&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/docker-library/busybox&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;alpine推荐&#34;&gt;alpine(推荐)&lt;/h2&gt;
&lt;p&gt;很多语言的都是基于alpine: python-version:alpine-version, golang-version:alpine-version.&lt;/p&gt;
&lt;p&gt;一个基于musl和busybox的linux发行版.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.alpinelinux.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.alpinelinux.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;alpine比distroless尺寸大，包含包管理和shell，方便调试.&lt;/p&gt;
&lt;p&gt;alpine使用musl代替glibc会导致有的程序无法运行, 解决:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkdir /lib64
# ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意wget 部分参数不可用.&lt;/p&gt;
&lt;h2 id=&#34;distroless&#34;&gt;distroless&lt;/h2&gt;
&lt;p&gt;google提供的只包含运行时的精简镜像.&lt;/p&gt;
&lt;p&gt;缺点是没有包管理和shell，不方便调试.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/GoogleContainerTools/distroless&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/GoogleContainerTools/distroless&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;slim&#34;&gt;slim&lt;/h2&gt;
&lt;p&gt;减小image大小,适用于web程序.&lt;/p&gt;
&lt;p&gt;&amp;lt;https://github.com/docker-slim/docker-slim&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Command</title>
        <link>https://canuxcheng.com/post/storage_command/</link>
        <pubDate>Sun, 31 Mar 2019 21:51:25 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/storage_command/</guid>
        <description>&lt;h1 id=&#34;sysstat&#34;&gt;sysstat:&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;# &amp;lt;https://github.com/sysstat/sysstat&amp;gt;
$ sudo apt-get install sysstat
# 包括 iostat/mpstat/pidstat/tapestat/cifsiostat

iostat -d -x -k 1 10

pidstat -d -p pid
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iotop&#34;&gt;iotop&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;# 查看进程的diskio
$ sudo apt-get install iotop
$ sudo iotop
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;df&#34;&gt;df&lt;/h1&gt;
&lt;p&gt;df计算文件系统磁盘空间使用:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df
$ df -h

# 查看目录信息(读写哪个设备)
$ df /path/folder
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;dd&#34;&gt;dd&lt;/h1&gt;
&lt;p&gt;dd转化并拷贝文件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dd
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;fsck&#34;&gt;fsck&lt;/h1&gt;
&lt;p&gt;fsck检查并修复文件系统:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fsck
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;fdisk&#34;&gt;fdisk&lt;/h1&gt;
&lt;p&gt;支持msdos，支持2T以下的磁盘.&lt;/p&gt;
&lt;p&gt;fdisk管理磁盘分区表:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fdisk
fdisk -l

fdisk /dev/sda # 可以创建新的磁盘分区
&amp;gt; n ...    创建新的分区
&amp;gt; t (8e表示linux LVM), 修改分区类型
&amp;gt; w 保存修改
partprobe /dev/sda # 在不重启的情况下保存分区
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;parted&#34;&gt;parted&lt;/h1&gt;
&lt;p&gt;支持gpt分区表，支持2T以上的大磁盘.&lt;/p&gt;
&lt;p&gt;大存储分区工具,比如nas,raid.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parted /dev/sda print
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;mkfd&#34;&gt;mkfd&lt;/h1&gt;
&lt;p&gt;mkfs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkfs [options] [-t type fs-options] device [size]
mkfs.ext4 /dev/sdb1 # 将分区格式化成ext4格式.
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;mountumount&#34;&gt;mount/umount&lt;/h1&gt;
&lt;p&gt;相关文件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/fstab
/etc/mtab

查看磁盘的uuid, 通过uuid挂载
ls -l /dev/disk/by-uuid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mount/umount挂载文件系统:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mount # 查看所有挂载信息

mount -t type -o option device dir

# 将目录挂载到指定磁盘分区
mount -t ext4 /dev/sdb1 /opt
等效修改/etc/fstab
/dev/sdb1 /opt ext4 defaults 0 0

# 将目录挂在到内存上.
mount -t tmpfs -o size=100G tmpfs /var/www

# 本机挂载, 将本机的folder2挂载到folder1, folder2中原有的内容会隐藏.
mount --bind /path/folder1 /path/folder2
/path/folder1 /path/folder2 none bind 0 0

# 挂载到overlay
mount -t overlay -o lowerdir=/path/lower,upperdir=/path/upper,workdir=/path/work overlay /path/dir

umount
umount device/dir
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;磁盘管理&#34;&gt;磁盘管理&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;# 先创建linux lvm分区
pvcreate &amp;lt;pv-name&amp;gt; # 创建物理卷PV
pvdisplay
vgextend &amp;lt;vg-name&amp;gt; &amp;lt;pv-name&amp;gt;  # 给物理卷创建卷组VG
vgdisplay
lvextend -r -l +100%FREE &amp;lt;lv-path&amp;gt; # 将物理卷上的空闲空间全部放到逻辑卷LV上
lvdisplay
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sync同步缓存写入固态存储:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sync
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看所有硬件设备:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lshw # 列出硬件
lshw -class disk # 查看磁盘设备
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设备管理:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lspci # 列出所有PCI设备

lsusb # 列出USB设备

lsblk # 列出块设备

setleds

loadkeys

dumpkeys

MAKEDEV
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;iops&#34;&gt;IOPS&lt;/h1&gt;
&lt;p&gt;磁盘IO.&lt;/p&gt;
&lt;p&gt;安装fio:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install fio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试随机读写的IO:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 测试本地磁盘读写
$ fio -filename=/dev/sda1 -direct=1 -iodepth 1 -thread -rw=randrw \
-rwmixread=70 -ioengine=psync -bs=16k -size=200G -numjobs=30 -runtime=100 \
-group_reporting -name=mytest
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Swarm CSI</title>
        <link>https://canuxcheng.com/post/swarm_csi/</link>
        <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/swarm_csi/</guid>
        <description>&lt;h1 id=&#34;csi&#34;&gt;CSI&lt;/h1&gt;
&lt;p&gt;CSI: Container Storage Interface&lt;/p&gt;
&lt;p&gt;CSI提供容器的数据持久化服务.&lt;/p&gt;
&lt;p&gt;容器管理数据的两种方式：&lt;/p&gt;
&lt;p&gt;数据卷(Volumes)&lt;/p&gt;
&lt;p&gt;挂载主机目录(bind mounts)&lt;/p&gt;
&lt;p&gt;临时文件系统(tmpfs)&lt;/p&gt;
&lt;h2 id=&#34;数据存储原理&#34;&gt;数据存储原理&lt;/h2&gt;
&lt;p&gt;如果container上目录不存在，docker会自动创建&lt;/p&gt;
&lt;p&gt;如果container目录存在且有内容，会被host上的目录覆盖掉，但不会被删除.&lt;/p&gt;
&lt;h2 id=&#34;volumes&#34;&gt;Volumes&lt;/h2&gt;
&lt;p&gt;如果host上目录不存在，docker会自动创建&lt;/p&gt;
&lt;p&gt;volumes是被设计用来持久化数据的，它的生命周期独立于容器.数据卷通过docker volume命令管理的，位于/var/lib/docker/volumes/下面.&lt;/p&gt;
&lt;p&gt;Docker不会在容器被删除后自动删除 数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 数据卷。&lt;/p&gt;
&lt;p&gt;创建:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker volume create &amp;lt;volume-name&amp;gt;
$ docker volume rm &amp;lt;volume-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -v/--volume myvolume:/var/lib/app ...
$ docker run --mount source=myvolume,target=/var/lib/app ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;bind-mount&#34;&gt;Bind mount&lt;/h2&gt;
&lt;p&gt;如果host上目录不存在会报错，需要提前创建.&lt;/p&gt;
&lt;p&gt;bind mount就是直接将host路径挂在到docker．&lt;/p&gt;
&lt;p&gt;source和target都是文件，即可挂载单个文件.&lt;/p&gt;
&lt;p&gt;使用:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -v/--volume /opt/app:/var/lib/app:ro ...
$ docker run --mount type=bind,source=/opt/app,target=/var/lib/app,readonly ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tmpfs&#34;&gt;tmpfs&lt;/h2&gt;
&lt;p&gt;tmpfs是临时文件系统，也叫内存文件系统，就是将数据存在内存上。&lt;/p&gt;
&lt;p&gt;tmpfs只能用于linux, 多个容器也不能共享，容器停止数据就销毁。&lt;/p&gt;
&lt;p&gt;使用&amp;ndash;mount可以指定参数，使用&amp;ndash;tmpfs不能指定参数。&lt;/p&gt;
&lt;p&gt;使用:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --mount type=tmpfs,destination=/tmp/app,tmpfs_size=10G tmpfs_mode=1777 ...
$ docker run --tmpfs  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;docker管理volume&#34;&gt;Docker管理volume&lt;/h1&gt;
&lt;p&gt;查看:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker volume ls # 查看所有卷
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建volume:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker volume create my-volume 
# mountpoint: /var/lib/docker/volumes/my-volume/_data.
docker run -v/--volume my-volume:/container/path 
# src=https://canuxcheng.com/var/lib/docker/volumes/my-volume/_data, dest=/container/path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定路径作为volume：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -v /host/path:/container/path ...
# src=https://canuxcheng.com/host/path, dest=/container/path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认随机路径，数据不能持久化：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src=https://canuxcheng.com/var/lib/docker/volumes/... /_data (on host)
docker run -v /path ....
docker run --mount ...
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Monitoring</title>
        <link>https://canuxcheng.com/post/storage_monitoring/</link>
        <pubDate>Thu, 05 Apr 2018 21:47:54 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/storage_monitoring/</guid>
        <description>&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;
&lt;h2 id=&#34;diskio&#34;&gt;diskio&lt;/h2&gt;
&lt;p&gt;IOPS: Input/Output Per Second. 每秒输入输出量，也叫TPS.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT non_negative_derivative(mean(reads),1s) as &amp;quot;read&amp;quot; FROM &amp;quot;diskio&amp;quot;
SELECT non_negative_derivative(mean(writes),1s) as &amp;quot;write&amp;quot; FROM &amp;quot;diskio&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;throughput:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT non_negative_derivative(mean(read_bytes),1s) as &amp;quot;read&amp;quot; FROM &amp;quot;diskio&amp;quot;
SELECT non_negative_derivative(mean(write_bytes),1s) as &amp;quot;write&amp;quot; FROM &amp;quot;diskio&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Utilization:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT non_negative_derivative(last(&amp;quot;io_time&amp;quot;),1ms)
FROM &amp;quot;diskio&amp;quot;
WHERE &amp;quot;name&amp;quot; =~ /^(v|s|)d(a|b|c|d)$/
GROUP BY &amp;quot;host&amp;quot;,&amp;quot;name&amp;quot;,time(_interval)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Queue length:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT non_negative_derivative(last(&amp;quot;weighted_io_time&amp;quot;,1ms))
FROM &amp;quot;diskio&amp;quot;
WHERE &amp;quot;name&amp;quot; =~ /^(v|s|)d(a|b|c|d)$/
GROUP BY &amp;quot;host&amp;quot;,&amp;quot;name&amp;quot;,time(_interval)
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Storage</title>
        <link>https://canuxcheng.com/post/storage/</link>
        <pubDate>Thu, 05 Apr 2018 21:47:54 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/storage/</guid>
        <description>&lt;h1 id=&#34;storage&#34;&gt;Storage&lt;/h1&gt;
&lt;h1 id=&#34;raid&#34;&gt;RAID&lt;/h1&gt;
&lt;p&gt;RAID: redundant array of independent disks, 独立磁盘冗余数组．&lt;/p&gt;
&lt;h1 id=&#34;存储方式&#34;&gt;存储方式&lt;/h1&gt;
&lt;p&gt;DAS: direct attached storage, 直连式存储，通过SCSI或FC连接服务器．&lt;/p&gt;
&lt;p&gt;NAS: network attached storage，网络接入存储，通过IP(NFS/CIFS/..).&lt;/p&gt;
&lt;p&gt;SAN: storage area network, 存储区域网络，有IP或FC两种方式．&lt;/p&gt;
&lt;h1 id=&#34;存储接口&#34;&gt;存储接口&lt;/h1&gt;
&lt;p&gt;SCSI&lt;/p&gt;
&lt;p&gt;iSCSI&lt;/p&gt;
&lt;p&gt;SAS&lt;/p&gt;
&lt;p&gt;SATA&lt;/p&gt;
&lt;p&gt;FC&lt;/p&gt;
&lt;p&gt;FCoE&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
