<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>DevOps on Morgoth</title>
        <link>https://canuxcheng.com/categories/devops/</link>
        <description>Recent content in DevOps on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 10 Jan 2025 09:41:39 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/categories/devops/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>DevOps Metrics</title>
        <link>https://canuxcheng.com/post/devops_metrics/</link>
        <pubDate>Fri, 10 Jan 2025 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_metrics/</guid>
        <description>&lt;h1 id=&#34;devops-metrics&#34;&gt;DevOps Metrics&lt;/h1&gt;
&lt;p&gt;从业务角度来看，公司希望更准确地度量其开发人员的生产力，原因如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitoring progress over time&lt;/li&gt;
&lt;li&gt;Creation of benchmarks&lt;/li&gt;
&lt;li&gt;Rewarding top performers&lt;/li&gt;
&lt;li&gt;Determining resource allocation&lt;/li&gt;
&lt;li&gt;Identification of more productive development processes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;框架是想法、概念和关系的简单总结，因此基于您的上下文、环境和团队，您可以选择一组您可以解释的指标，以确定团队是否在它应该在的地方。&lt;/p&gt;
&lt;h2 id=&#34;dora&#34;&gt;DORA&lt;/h2&gt;
&lt;p&gt;DevOps Research and Assessment.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://getdx.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://getdx.com/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;speed-metrics&#34;&gt;Speed metrics&lt;/h3&gt;
&lt;p&gt;Deployment frequency: This measures how often a team deploys code to production.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Low performance: once per month - once per semester. (inadequate integration, lack of automation.)&lt;/li&gt;
&lt;li&gt;Medium performance: once per month - once per week.&lt;/li&gt;
&lt;li&gt;High performance: daily for multiple times per day.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lead time for change: This measures the time it takes from the moment a code change is made until it is successfully deployed to production.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Low performance: one - six months. (time-consuming manual testing, lack of automation.)&lt;/li&gt;
&lt;li&gt;Medium performance: one week - one month.&lt;/li&gt;
&lt;li&gt;High performance: less than one day.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stability-metrics&#34;&gt;Stability metrics&lt;/h3&gt;
&lt;p&gt;change failure rate: This metric measures the proportion of deployments that result in failures.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Poor performance: 46% - 60%. (quality and reliability issues).&lt;/li&gt;
&lt;li&gt;Average performance: 15%-45%.&lt;/li&gt;
&lt;li&gt;High performance: 0% - 15%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mean time to restore: This metric helps assess team’s ability to handle incidents and failures.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Low performance: one week - one month. (lack of adequate monitoring and diagnostic tools).&lt;/li&gt;
&lt;li&gt;Medium performance: one day - one week.&lt;/li&gt;
&lt;li&gt;High performance: less than one day.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;space&#34;&gt;SPACE&lt;/h2&gt;
&lt;p&gt;S: Satisfaction and well-being&lt;/p&gt;
&lt;p&gt;P: Performance&lt;/p&gt;
&lt;p&gt;A: Activity&lt;/p&gt;
&lt;p&gt;C: Collaboration and communication&lt;/p&gt;
&lt;p&gt;E: Efficiency and flow&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;devex&#34;&gt;DevEx&lt;/h2&gt;
&lt;p&gt;Developer Experience: DevEx captures how developers feel, how they think, and how they value their work.&lt;/p&gt;
&lt;h3 id=&#34;feedback-loops&#34;&gt;Feedback loops&lt;/h3&gt;
&lt;p&gt;perceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;satisfaction with automated test speed and output.&lt;/li&gt;
&lt;li&gt;satisfaction with time it takes to validate a local change.&lt;/li&gt;
&lt;li&gt;satisfaction with time it takes to deploy a change to production.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;workflows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;time it takes to generate CI results.&lt;/li&gt;
&lt;li&gt;code review turnaround time.&lt;/li&gt;
&lt;li&gt;deployment lead time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cognitive-load&#34;&gt;Cognitive load&lt;/h3&gt;
&lt;p&gt;perceptions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;perceive complexity of codebase.&lt;/li&gt;
&lt;li&gt;ease of debugging production systems&lt;/li&gt;
&lt;li&gt;easy of understanding documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;workflows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;time it takes to get answers to technical questions.&lt;/li&gt;
&lt;li&gt;manual steps required to deploy a change.&lt;/li&gt;
&lt;li&gt;frequency of documentation improvements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;flow-state&#34;&gt;Flow state&lt;/h3&gt;
&lt;p&gt;perceptions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;perceived ability to focus and avoid interruptions.&lt;/li&gt;
&lt;li&gt;satisfaction with clarity of task or project goals.&lt;/li&gt;
&lt;li&gt;perceived disruptiveness of being on-call.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;workflows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;number of blocks of time without meetings or interruptions.&lt;/li&gt;
&lt;li&gt;frequency of unplanned tasks or requests.&lt;/li&gt;
&lt;li&gt;frequency of incidents requiring team attention.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Security</title>
        <link>https://canuxcheng.com/post/devops_security/</link>
        <pubDate>Thu, 19 Oct 2023 20:03:39 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_security/</guid>
        <description>&lt;h1 id=&#34;devops-security&#34;&gt;DevOps Security&lt;/h1&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;h2 id=&#34;trivy&#34;&gt;Trivy&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/aquasecurity/trivy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/aquasecurity/trivy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Find vulnerabilities, misconfigurations, secrets, SBOM in containers, Kubernetes, code repositories, clouds and more&lt;/p&gt;
&lt;h2 id=&#34;tetragon&#34;&gt;Tetragon&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/cilium/tetragon&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/cilium/tetragon&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;falco&#34;&gt;Falco&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/falcosecurity/falco&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/falcosecurity/falco&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AWS Management</title>
        <link>https://canuxcheng.com/post/aws_management/</link>
        <pubDate>Thu, 23 Sep 2021 22:02:31 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/aws_management/</guid>
        <description>&lt;h1 id=&#34;aws-monitor&#34;&gt;AWS Monitor&lt;/h1&gt;
&lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;
&lt;h2 id=&#34;management-console&#34;&gt;Management Console&lt;/h2&gt;
&lt;h2 id=&#34;quotas&#34;&gt;Quotas&lt;/h2&gt;
&lt;h2 id=&#34;service-catalog&#34;&gt;Service Catalog&lt;/h2&gt;
&lt;h2 id=&#34;cloudwatch&#34;&gt;CloudWatch&lt;/h2&gt;
&lt;p&gt;监控和管理服务，收集logs, metrics 和 events，支持基于metrics的alert。&lt;/p&gt;
&lt;p&gt;MTTR
TCO&lt;/p&gt;
&lt;h2 id=&#34;cloudwatch-logs&#34;&gt;CloudWatch Logs&lt;/h2&gt;
&lt;h2 id=&#34;cloudtrail&#34;&gt;CloudTrail&lt;/h2&gt;
&lt;p&gt;可以用来记录，持续监控和保留与AWS基础设施中的操作相关的账户活动。&lt;/p&gt;
&lt;p&gt;将审计记录插入S3或者cloudwatch log， 记录突发事件。&lt;/p&gt;
&lt;h2 id=&#34;aws-config&#34;&gt;AWS Config&lt;/h2&gt;
&lt;p&gt;提供基础设施的历史配置。基于规则持续评估基础设施。&lt;/p&gt;
&lt;h2 id=&#34;aws-trusted-advisor&#34;&gt;AWS Trusted Advisor&lt;/h2&gt;
&lt;p&gt;优化性能和安全性&lt;/p&gt;
&lt;h2 id=&#34;amazon-grafana&#34;&gt;Amazon Grafana&lt;/h2&gt;
&lt;h2 id=&#34;amazon-prometheus&#34;&gt;Amazon Prometheus&lt;/h2&gt;
&lt;h2 id=&#34;cloudformation&#34;&gt;CloudFormation&lt;/h2&gt;
&lt;p&gt;提供基于模板(yaml/json)的基础设施服务(IaaS).&lt;/p&gt;
&lt;h2 id=&#34;compute-optimizer&#34;&gt;Compute Optimizer&lt;/h2&gt;
&lt;h2 id=&#34;control-tower&#34;&gt;Control Tower&lt;/h2&gt;
&lt;h2 id=&#34;health-dashboard&#34;&gt;Health Dashboard&lt;/h2&gt;
&lt;h2 id=&#34;aws-systems-manager&#34;&gt;AWS Systems Manager&lt;/h2&gt;
&lt;p&gt;提供运维数据，并且在跨基础设施中进行自动化操作。&lt;/p&gt;
&lt;h2 id=&#34;aws-organizations&#34;&gt;AWS Organizations&lt;/h2&gt;
&lt;p&gt;账号集中管理。&lt;/p&gt;
&lt;h2 id=&#34;aws-license-manager&#34;&gt;AWS License Manager&lt;/h2&gt;
&lt;h2 id=&#34;proton&#34;&gt;Proton&lt;/h2&gt;
&lt;h2 id=&#34;aws-well-architected-tool&#34;&gt;AWS Well-Architected Tool&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;financial-management&#34;&gt;Financial Management&lt;/h1&gt;
&lt;h2 id=&#34;budgets&#34;&gt;Budgets&lt;/h2&gt;
&lt;h2 id=&#34;cost-explorer&#34;&gt;Cost Explorer&lt;/h2&gt;
&lt;h2 id=&#34;savings-plans&#34;&gt;Savings Plans&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>CI/CD</title>
        <link>https://canuxcheng.com/post/devops_cicd/</link>
        <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_cicd/</guid>
        <description>&lt;h1 id=&#34;ci&#34;&gt;CI&lt;/h1&gt;
&lt;h2 id=&#34;jenkins&#34;&gt;jenkins&lt;/h2&gt;
&lt;h2 id=&#34;gitlab&#34;&gt;gitlab&lt;/h2&gt;
&lt;h2 id=&#34;github-actions&#34;&gt;github actions&lt;/h2&gt;
&lt;h2 id=&#34;cloudbees&#34;&gt;cloudbees&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cd&#34;&gt;CD&lt;/h1&gt;
&lt;h2 id=&#34;argo-cd&#34;&gt;argo-cd&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/argoproj/argo-cd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/argoproj/argo-cd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;argocd-image-updater.&lt;/p&gt;
&lt;p&gt;argo-rollout.&lt;/p&gt;
&lt;h2 id=&#34;flux-cd&#34;&gt;flux-cd&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/fluxcd/flux&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/fluxcd/flux&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ELK</title>
        <link>https://canuxcheng.com/post/logging_elk/</link>
        <pubDate>Fri, 08 Jun 2018 09:46:47 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/logging_elk/</guid>
        <description>&lt;h1 id=&#34;elk&#34;&gt;ELK&lt;/h1&gt;
&lt;p&gt;kibana: 数据可视化&lt;/p&gt;
&lt;p&gt;elasticsearch: 搜索，分析，存储数据&lt;/p&gt;
&lt;p&gt;x-pack: 具有监控和报警功能的工具包.&lt;/p&gt;
&lt;p&gt;logstash: 动态数据收集管道，支持可扩展的插件．&lt;/p&gt;
&lt;p&gt;beats(agent): 轻量型数据采集平台，从边缘机器向logstash/elasticsearch发送数据．&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Grok</title>
        <link>https://canuxcheng.com/post/logging_grok/</link>
        <pubDate>Fri, 08 Jun 2018 09:46:47 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/logging_grok/</guid>
        <description>&lt;h1 id=&#34;grok&#34;&gt;grok&lt;/h1&gt;
&lt;p&gt;logstash和telegraf都是用grok来解析log&lt;/p&gt;
&lt;p&gt;在线检测&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://grokdebug.herokuapp.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://grokdebug.herokuapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;grok的正则表达式&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kkos/oniguruma/blob/master/doc/RE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kkos/oniguruma/blob/master/doc/RE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可用的pattern(logstash &amp;amp; telegraf-logparser/tail)&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/influxdata/telegraf/blob/master/plugins/inputs/logparser/grok/patterns/influx-patterns&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/influxdata/telegraf/blob/master/plugins/inputs/logparser/grok/patterns/influx-patterns&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;elastic-stack&#34;&gt;Elastic stack&lt;/h1&gt;
&lt;p&gt;beats/filebeats: 通过filebeats agent获取log．&lt;/p&gt;
&lt;p&gt;logstash: 使用filebeats解析log并写入stash(elasticsearch).&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tick-stack&#34;&gt;TICK stack&lt;/h1&gt;
&lt;p&gt;telegraf(agent): 通过logparser/tail插件解析log并写入influxdb.&lt;/p&gt;
&lt;p&gt;pattern:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 通过已经定义的变量来定义filter
patterns = [&#39;&#39;&#39;${&amp;lt;capture_syntax&amp;gt;[:&amp;lt;semantic_name&amp;gt;][:&amp;lt;modifier&amp;gt;]}&#39;&#39;&#39;]
patterns = [&#39;&#39;&#39;%{TIMESTAMP_ISO8601:asctime:string} \[%{DATA:name:string}\] %{LOGLEVEL:levelname:string}: %{GREEDYDATA:message:string}&#39;&#39;&#39;]

capture_syntax是已经定义好的pattern.
semantic_name是field/tag的名字, 默认都是string类型的field
modifier 是string/int/float/tag/drop/ts-&amp;quot;CUSTOM&amp;quot;/...类型

timestamp有特殊的modifier:
timestamp 有特殊的modifier：
Timestamp modifiers:ts (This will auto-learn the timestamp format)
ts-ansic (&amp;quot;Mon Jan _2 15:04:05 2006&amp;quot;)
ts-unix (&amp;quot;Mon Jan _2 15:04:05 MST 2006&amp;quot;)
ts-ruby (&amp;quot;Mon Jan 02 15:04:05 -0700 2006&amp;quot;)
ts-rfc822 (&amp;quot;02 Jan 06 15:04 MST&amp;quot;)
ts-rfc822z (&amp;quot;02 Jan 06 15:04 -0700&amp;quot;)
ts-rfc850 (&amp;quot;Monday, 02-Jan-06 15:04:05 MST&amp;quot;)
ts-rfc1123 (&amp;quot;Mon, 02 Jan 2006 15:04:05 MST&amp;quot;)
ts-rfc1123z (&amp;quot;Mon, 02 Jan 2006 15:04:05 -0700&amp;quot;)
ts-rfc3339 (&amp;quot;2006-01-02T15:04:05Z07:00&amp;quot;)
ts-rfc3339nano (&amp;quot;2006-01-02T15:04:05.999999999Z07:00&amp;quot;)
ts-httpd (&amp;quot;02/Jan/2006:15:04:05 -0700&amp;quot;)
ts-epoch (seconds since unix epoch, may contain decimal)
ts-epochnano (nanoseconds since unix epoch)
ts-syslog (&amp;quot;Jan 02 15:04:05&amp;quot;, parsed time is set to the current year)
ts-&amp;quot;CUSTOM&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;custom_patterns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 通过正则表达式或已经定义的变量来定义新的变量
# 一行一个
custom_patterns = &#39;&#39;&#39;
    LOGLEVEL_PYTHON (?:WARNING|ERROR|CRITICAL)
&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;logparser:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[inputs.logparser]]
files = [&amp;quot;/opt/sandbox/logs/appliance.log&amp;quot;]
from_beginning = false
watch_method = &amp;quot;inotify&amp;quot;
[inputs.logparser.grok]
  patterns = [&#39;&#39;&#39;
    %{TIMESTAMP_ISO8601:timestamp:ts-&amp;quot;2006-01-02 15:04:05.000&amp;quot;}
    \[%{DATA:name:string}\]
    %{LOGLEVEL_PYTHON:levelname:tag}:
    %{GREEDYDATA:message:string}&#39;&#39;&#39;]
  measurement = &amp;quot;log_test&amp;quot;
  custom_pattern_files = []
  custom_patterns = &#39;&#39;&#39;LOGLEVEL_PYTHON (?:WARNING|ERROR|CRITICAL)&#39;&#39;&#39;
  timezone = &amp;quot;Local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tail:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[inputs.tail]]
files = [&amp;quot;/opt/sandbox/logs/appliance.log&amp;quot;]
from_beginning = false
pipe = false
watch_method = &amp;quot;inotify&amp;quot;
data_format = &amp;quot;grok&amp;quot;

grok_patterns = [&#39;&#39;&#39;%{TIMESTAMP_ISO8601:timestamp:ts-&amp;quot;2006-01-02 15:04:05.000&amp;quot;}
  \[%{DATA:name:string}\] %{LOGLEVEL_PYTHON:levelname:tag}:
  %{GREEDYDATA:message:string}&#39;&#39;&#39;]
grok_custom_patterns = &#39;&#39;LOGLEVEL_PYTHON (?:WARNING|ERROR|CRITICAL)&#39;&#39;&#39;
grok_timezone = &amp;quot;Local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Logging</title>
        <link>https://canuxcheng.com/post/logging/</link>
        <pubDate>Fri, 08 Jun 2018 09:46:47 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/logging/</guid>
        <description>&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;
&lt;p&gt;日志采集，存储，可视化.&lt;/p&gt;
&lt;p&gt;主要有Elastic stack, splunk, loki.&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Loki</title>
        <link>https://canuxcheng.com/post/logging_loki/</link>
        <pubDate>Fri, 08 Jun 2018 09:46:47 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/logging_loki/</guid>
        <description>&lt;h1 id=&#34;elk&#34;&gt;ELK&lt;/h1&gt;
&lt;p&gt;kibana: 数据可视化&lt;/p&gt;
&lt;p&gt;elasticsearch: 搜索，分析，存储数据&lt;/p&gt;
&lt;p&gt;x-pack: 具有监控和报警功能的工具包.&lt;/p&gt;
&lt;p&gt;logstash: 动态数据收集管道，支持可扩展的插件．&lt;/p&gt;
&lt;p&gt;beats(agent): 轻量型数据采集平台，从边缘机器向logstash/elasticsearch发送数据．&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>AlertManager</title>
        <link>https://canuxcheng.com/post/metrics_alertmanager/</link>
        <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics_alertmanager/</guid>
        <description>&lt;h1 id=&#34;alert-manager&#34;&gt;alert-manager&lt;/h1&gt;
&lt;p&gt;在Prometheus中支持基于PromQL创建告警规则, prometheus通过push触发alertmanager.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/prometheus/alertmanager&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/prometheus/alertmanager&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Exporter</title>
        <link>https://canuxcheng.com/post/metrics_exporter/</link>
        <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics_exporter/</guid>
        <description>&lt;h1 id=&#34;exporter&#34;&gt;exporter&lt;/h1&gt;
&lt;p&gt;广义上讲所有可以向Prometheus提供监控样本数据的程序都可以被称为一个Exporter。而Exporter的一个实例称为target，如下所示，Prometheus通过轮询的方式定期从这些target中获取样本数据:&lt;/p&gt;
&lt;p&gt;prometheus通过pull从exporter拉取数据.&lt;/p&gt;
&lt;p&gt;直接采集:cAdvisor, kubernetes, etcd, gokit等直接内置了用于向prometheus暴露监控数据的端点.&lt;/p&gt;
&lt;p&gt;间接采集: 通过promethesu的client api编写exporter，例如mysql-exporter, consul-exporter.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;host&#34;&gt;host&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/prometheus/node_exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/prometheus/node_exporter&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;k8s&#34;&gt;k8s&lt;/h1&gt;
&lt;p&gt;k8s metrics api包括 resource metrics api 和 customer metrics api.&lt;/p&gt;
&lt;p&gt;cadvisor, metrics-server, kube-state-metrics 等实现了 核心api.&lt;/p&gt;
&lt;p&gt;一些adapter实现了自定义api.&lt;/p&gt;
&lt;p&gt;k8s-prometheus-adapter实现了metrics-server的核心api，同时实现了自定义api.&lt;/p&gt;
&lt;h2 id=&#34;metrics-server&#34;&gt;metrics-server &lt;/h2&gt;
&lt;p&gt;提供了整个集群的资源监控数据&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes-sigs/metrics-server&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes-sigs/metrics-server&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;cadvisor&#34;&gt;cAdvisor&lt;/h2&gt;
&lt;p&gt;负责单节点内部的容器和节点资源使用统计，会自动收集本机容器 CPU、内存、网络和文件系统的资源占用情况&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/google/cadvisor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/google/cadvisor&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;kube-state-metrics&#34;&gt;kube-state-metrics &lt;/h2&gt;
&lt;p&gt;提供了 Kubernetes 资源对象（如 DaemonSet、Deployments 等）的度量。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes/kube-state-metrics&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes/kube-state-metrics&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;adapter&#34;&gt;adapter&lt;/h2&gt;
&lt;p&gt;同时支持核心api和自定义api.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/DirectXMan12/k8s-prometheus-adapter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/DirectXMan12/k8s-prometheus-adapter&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;blackbox&#34;&gt;blackbox&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/prometheus/blackbox_exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/prometheus/blackbox_exporter&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;wmi&#34;&gt;wmi&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/martinlindhe/wmi_exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/martinlindhe/wmi_exporter&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;snmp&#34;&gt;snmp&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/prometheus/snmp_exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/prometheus/snmp_exporter&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;mysql&#34;&gt;mysql&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/prometheus/mysqld_exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/prometheus/mysqld_exporter&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;rabbitmq&#34;&gt;rabbitmq&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/deadtrickster/prometheus_rabbitmq_exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/deadtrickster/prometheus_rabbitmq_exporter&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;mongo&#34;&gt;mongo&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/percona/mongodb_exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/percona/mongodb_exporter&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;redis&#34;&gt;redis&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/oliver006/redis_exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/oliver006/redis_exporter&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;haproxy&#34;&gt;haproxy&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/prometheus/haproxy_exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/prometheus/haproxy_exporter&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;consul&#34;&gt;consul&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/prometheus/consul_exporter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/prometheus/consul_exporter&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pushgateway&#34;&gt;pushgateway&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/prometheus/pushgateway&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/prometheus/pushgateway&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于Prometheus数据采集基于Pull模型进行设计，因此在网络环境的配置上必须要让Prometheus Server能够直接与Exporter进行通信。 当这种网络需求无法直接满足时，就可以利用PushGateway来进行中转。可以通过PushGateway将内部网络的监控数据主动Push到Gateway当中。而Prometheus Server则可以采用同样Pull的方式从PushGateway中获取到监控数据.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Influxdb</title>
        <link>https://canuxcheng.com/post/metrics_influxdb/</link>
        <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics_influxdb/</guid>
        <description>&lt;h1 id=&#34;influxdb&#34;&gt;Influxdb&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/influxdata/influxdb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/influxdata/influxdb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scalable datastore for metrics, events, and real-time analytics.&lt;/p&gt;
&lt;p&gt;支持从opentsdb, graphite, collectd等获取数据&lt;/p&gt;
&lt;p&gt;默认数据库_internal 用于存储内部运行数据&lt;/p&gt;
&lt;p&gt;安装配置参考官方文档&lt;/p&gt;
&lt;p&gt;log&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo journalctl -u influxdb.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 开通kapacitor的subscription功能
[[subscriber]]
enable = true
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;
&lt;p&gt;influxdb每条记录是一个point.&lt;/p&gt;
&lt;p&gt;points包括下面部分：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;measurement: a measurement, like cpu_load, 相当于表名
tags: zero or more tag, key=value, eg: host=ip
fields: zero or more field, key=value, eg: value=0.18
time: a timestamp

&amp;lt;measurement&amp;gt;[,&amp;lt;tag-key&amp;gt;=&amp;lt;tag-value&amp;gt;...] &amp;lt;field-key&amp;gt;=&amp;lt;field-value&amp;gt;[,&amp;lt;field2-key&amp;gt;=&amp;lt;field2-value&amp;gt;...] [unix-nano-timestamp]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;series: 在一个database中,相同的retention policy, measurement, tag set的数据集，叫一个序列．&lt;/p&gt;
&lt;p&gt;RP: retention policy, autogen是默认的存储策略, 用于设置数据保留时间.&lt;/p&gt;
&lt;p&gt;CQ: continuous query, 连续查询，自动定时启动一组语句，将结果放在指定数据表中．&lt;/p&gt;
&lt;p&gt;IFQL: influx query language.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ influx --help
$ influx -username &amp;lt;username&amp;gt; -p &amp;lt;password&amp;gt; -h &amp;lt;hostname&amp;gt;
$ influx -precision rfc3339 # 显示可读的时间戳

$ influx -database &#39;test&#39; -host &#39;127.0.0.1&#39;
-execute &#39;select * from &amp;quot;test&amp;quot;.&amp;quot;test&amp;quot;.&amp;quot;test&amp;quot; where time &amp;gt; now() - 30d&#39;
-format &#39;csv&#39; &amp;gt; test.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;database&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ CREATE DATABASE test
$ DROP DATABASE test
$ SHOW DATABASES
$ USE test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;measurement(table)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ DROP MEASUREMENT &amp;lt;measurement&amp;gt;
$ SHOW MEASUREMENTS
$ SHOW MEASUREMENTS WHERE &amp;lt;tagkey&amp;gt;=&amp;lt;tagvalue&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tags&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ SHOW TAG KEYS
$ SHOW TAG KEYS FROM &amp;lt;measurement&amp;gt;
$ SHOW TAG VALUES FROM &amp;lt;measurement&amp;gt; WITH KEY=&amp;lt;tagkey&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fileds&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ SHOW FIELD KEYS
$ SHOW FIELD KEYS FROM &amp;lt;measurement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;subscription&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ SHOW SUBSCRIPTIONS
$ CREATE SUBSCIPTION &amp;lt;subs_name&amp;gt; ON &amp;lt;db&amp;gt;.&amp;lt;rp&amp;gt; DESTINATIONS (&amp;quot;ANY&amp;quot;|&amp;quot;ALL&amp;quot;) host{&amp;quot;,&amp;quot;, host}
$ DROP SUBSCRIPTION &amp;lt;subs_name&amp;gt; ON &amp;lt;db&amp;gt;.&amp;lt;rp&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;series&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ SHOW SERIES
$ DROP SERIES FROM &amp;lt;measurement&amp;gt; WHERE &amp;lt;tagkey&amp;gt;=&#39;&amp;lt;tagvalue&amp;gt;&#39;
$ DROP SERIES WHERE &amp;lt;tagkey&amp;gt;=&#39;&amp;lt;tagvalue&amp;gt;&#39; # 从所有measurement删除指定节点的所有数据
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;shared&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ drop shard &amp;lt;shard_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;http-api&#34;&gt;HTTP API&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;port = 8086
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;write&#34;&gt;write&lt;/h2&gt;
&lt;p&gt;create:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -i -XPOST http://localhost:8086/query --data-urlencode &amp;quot;q=CREATE DATABASE mydb&amp;quot;
post /query
data = {
    &amp;quot;q&amp;quot;: &amp;quot;create database &amp;lt;database&amp;gt;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;query&#34;&gt;query&lt;/h2&gt;
&lt;p&gt;show:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -G &#39;http://localhost:8086/query&#39; --data-urlencode &amp;quot;q=show databases&amp;quot;
get /query
params = {
    &amp;quot;pretty&amp;quot; : True,
    &amp;quot;q&amp;quot;: &amp;quot;show databases&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;influxql&#34;&gt;influxQL&lt;/h1&gt;
&lt;p&gt;influxql语句按下列关键字顺序排列&lt;/p&gt;
&lt;p&gt;tag_key, field_key, measurement都需要用双引号.&lt;/p&gt;
&lt;p&gt;The SELECT clause specifies an InfluxQL function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;quot;&amp;lt;field_key/tag_key&amp;gt;&amp;quot; from &amp;quot;&amp;lt;measurement&amp;gt;&amp;quot;
select &amp;quot;&amp;lt;field_key/tag_key&amp;gt;&amp;quot; as &amp;quot;alias&amp;quot; from &amp;quot;&amp;lt;measurement&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The INTO clause writes query results to a user-specified measurement.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;lt;&amp;gt; INTO &amp;quot;&amp;lt;measurement&amp;gt;&amp;quot; from &amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The FROM clause specifies a single measurement.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;lt;&amp;gt; from &amp;quot;&amp;lt;measurement&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The WHERE clause specifies the time range for the query.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;condition1&amp;gt; OR/AND &amp;lt;condition2&amp;gt;

# string类型的 value必须用单引号．
select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;quot;&amp;lt;tag_key/field_key&amp;gt;&amp;quot; &amp;lt;operation&amp;gt; &#39;&amp;lt;tag_value/field_value&amp;gt;&#39;

now() : time &amp;gt; now(() - 10m

= != &amp;lt; &amp;gt;

RE:
=~ !~
=~  : /.*ERROR.*|.*CRITICAL.*/  /ERROR|CRITICAL/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The GROUP BY clause groups results by all tags (*) and into 12-minute intervals.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;quot;&amp;lt;tag_key&amp;gt;&amp;quot;

fill()
time()/time(1ns/u/ms/s/m/h/d/w)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ORDER BY time DESC clause returns results in descending timestamp order.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;time/field_key&amp;gt;
select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;time/field_key&amp;gt; desc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The LIMIT 2 clause limits the number of points returned to two.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;&amp;gt; limit &amp;lt;number&amp;gt;
select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;&amp;gt; desc limit &amp;lt;number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The OFFSET 2 clause excludes the first two averages from the query results.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;&amp;gt; limit &amp;lt;number&amp;gt; offset &amp;lt;&amp;gt;
select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;&amp;gt; desc limit &amp;lt;number&amp;gt; offset &amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The SLIMIT 1 clause limits the number of series returned to one.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;&amp;gt; limit &amp;lt;&amp;gt; offset &amp;lt;&amp;gt; slimit &amp;lt;&amp;gt;
select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;&amp;gt; desc limit &amp;lt;&amp;gt; offset &amp;lt;&amp;gt; slimit &amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The SOFFSET 1 clause paginates the series returned.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;&amp;gt; limit &amp;lt;&amp;gt; offset &amp;lt;&amp;gt; slimit &amp;lt;&amp;gt; soffzet &amp;lt;&amp;gt;
select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;&amp;gt; desc limit &amp;lt;&amp;gt; offset &amp;lt;&amp;gt; slimit &amp;lt;&amp;gt; soffset&amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tz() clause returns the UTC offset for the specified timezone.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;&amp;gt; limit &amp;lt;&amp;gt; offset &amp;lt;&amp;gt; slimit &amp;lt;&amp;gt; soffzet &amp;lt;&amp;gt; tz(&amp;lt;time_zone&amp;gt;)
select &amp;lt;&amp;gt; from &amp;lt;&amp;gt; where &amp;lt;&amp;gt; group by &amp;lt;&amp;gt; order by &amp;lt;&amp;gt; desc limit &amp;lt;&amp;gt; offset &amp;lt;&amp;gt; slimit &amp;lt;&amp;gt; soffset&amp;lt;&amp;gt; tz(&amp;lt;time_zone&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;flux&#34;&gt;flux&lt;/h1&gt;
&lt;p&gt;influxql的升级版，支持多表查询.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;function&#34;&gt;function&lt;/h1&gt;
&lt;h2 id=&#34;aggregations&#34;&gt;aggregations&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;count(&amp;lt;fieldkey&amp;gt;) # 统计fieldvalues行数
distinct(&amp;lt;fieldkey&amp;gt;) # 返回fieldvalues不重复的值的列表
integral(&amp;lt;fieldkey&amp;gt;) # 积分
mean(&amp;lt;fieldkey&amp;gt;) # 返回fieldvalues的算数平均值
median(&amp;lt;fieldkey&amp;gt;) # 返回fieldvalues的排序后的中间值
mode(&amp;lt;fieldkey&amp;gt;) # 返回fieldvalues出现频率最高的值
spread(&amp;lt;fieldkey&amp;gt;) # 返回fieldvalues最值之间的差异
stddev(&amp;lt;fiekdkey&amp;gt;) # 返回fieldvalues的标准偏差
sum(&amp;lt;fieldkey&amp;gt;) # 返回fieldvalues的和
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;selectors&#34;&gt;selectors&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;bottom(&amp;lt;fieldkey&amp;gt;, N) # 返回最小的N个fieldvalues
first(&amp;lt;fieldkey&amp;gt;) # 返回timestamp最小的fieldvalue
last(&amp;lt;fieldkey&amp;gt;) # 返回timestamp最大的fieldvalue
max(&amp;lt;fieldkey&amp;gt;) # 返回最大的fieldvalue
min(&amp;lt;fieldkey&amp;gt;) # 返回最小的fieldvalue
percentile(&amp;lt;fieldkey&amp;gt;, N) # 百分数
sample(&amp;lt;fieldkey&amp;gt;, N) # 返回N个fieldvalue的随即样本
top(&amp;lt;fieldkey&amp;gt;, N) # 返回最大的N个fieldvalue
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;transformations&#34;&gt;transformations&lt;/h2&gt;
&lt;p&gt;transformations函数的field_key可以是aggregations和selectors函数的返回值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cumulative_sum(&amp;lt;field_key&amp;gt;)
derivative(&amp;lt;field_key&amp;gt;, [&amp;lt;unit&amp;gt;]) # 求单位时间的变化率, (cur-last)/(interval/unit)
difference(&amp;lt;field_key&amp;gt;) # 返回连续时间值之间的差异 -&amp;gt; 值的差异
elapsed(&amp;lt;field_key&amp;gt;) # 返回连续时间间隔的差异 -&amp;gt; 时间间隔差异
moving_average()
non_negative_derivative()
non_negative_difference()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;predictors&#34;&gt;predictors&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;holt_winters(function(&amp;lt;field_key&amp;gt;), N, S)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;rp&#34;&gt;RP&lt;/h1&gt;
&lt;p&gt;数据保存策略.&lt;/p&gt;
&lt;p&gt;autogen是默认RP，duration=infinite&lt;/p&gt;
&lt;p&gt;duration: 存储的数据时间间隔&lt;/p&gt;
&lt;p&gt;replication: 存储的数据副本数量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show retention policies on &amp;quot;&amp;lt;database&amp;gt;&amp;quot;

create retention policy &amp;quot;&amp;lt;rp_name&amp;gt;&amp;quot; on &amp;quot;&amp;lt;database&amp;gt;&amp;quot; duration 30d replication 1 default

drop retention policy &amp;quot;&amp;lt;rp_name&amp;gt;&amp;quot; on &amp;quot;&amp;lt;database&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cq&#34;&gt;CQ&lt;/h1&gt;
&lt;p&gt;对超过保存策略指定时间的数据，可以做统计采样.(类似于store procedure).&lt;/p&gt;
&lt;p&gt;CQ不能更新，只能删除重建．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show continuous queries

create continuous query &amp;lt;CQ_name&amp;gt; on &amp;lt;database&amp;gt;
begin
    SELECT &amp;lt;function[s]&amp;gt; INTO &amp;lt;destination_measurement&amp;gt; FROM &amp;lt;measurement&amp;gt; [WHERE &amp;lt;stuff&amp;gt;] GROUP BY time(&amp;lt;interval&amp;gt;)[,&amp;lt;tag_key[s]&amp;gt;]
end

DROP CONTINUOUS QUERY &amp;lt;cq_name&amp;gt; ON &amp;lt;database_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;best-practice&#34;&gt;Best Practice&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;select 1-(mean(&amp;quot;part&amp;quot;) / mean(&amp;quot;all&amp;quot;)) as &amp;quot;rate&amp;quot;
from (
    select sum(&amp;quot;value&amp;quot;) as &amp;quot;smart&amp;quot; from &amp;quot;jobs_type&amp;quot; where &amp;quot;type&amp;quot;=&#39;smart&#39; and $timeFilter
),(
    select sum(&amp;quot;value&amp;quot;) as &amp;quot;all&amp;quot; from &amp;quot;jobs_type&amp;quot; where &amp;quot;type&amp;quot;=&#39;reversinglab&#39; and $timeFilter
)
group by time($__interval) fill(none)
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Kapacitor</title>
        <link>https://canuxcheng.com/post/metrics_kapacitor/</link>
        <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics_kapacitor/</guid>
        <description>&lt;h1 id=&#34;kapacitor&#34;&gt;Kapacitor&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/influxdata/Kapacitor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/influxdata/Kapacitor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Open source framework for processing, monitoring, and alerting on time series data&lt;/p&gt;
&lt;p&gt;可以通过chrongraf创建tickscript/task, 然后通过api/cli导入到kapacitor.&lt;/p&gt;
&lt;p&gt;配置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hostname = &amp;quot;kapcitor-service&amp;quot;

# 如果从influxdb读取数据需要配置该选项．
[[influxdb]]
enabled = true

# 如果从该路径加载tickscript
[[load]]
enabled = true
dir=&amp;quot;/etc/kapacitor/load&amp;quot;
# tasks, 放到/etc/kapacitor/load/tasks/*.tick,重启kapacitor会自动加载task,并默认enable.
## 要求，ID和tick文件同名，tickscript开头需要指定dbrp, tickscript里面需要指定batch/stream.
# templates...
# handlers...
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ kapacitor help

# 创建template(也就是变量可以单独赋值的tickscript)
$ kapacitor define-template &amp;lt;name&amp;gt; -tick /path/template.tick
$ kapacitor show-template &amp;lt;name&amp;gt;

# 创建/更新 task, 创建的默认是disable状态.
# 从tickscript创建task
$ kapacitor define &amp;lt;name&amp;gt; -tick task.tick -type [stream|batch] -dbrp [database.retentionPolicy]
# 从template创建task(如果yaml/json中没有指定template需要用-template指定)
$ kapacitor define &amp;lt;name&amp;gt; -file task.yaml
$ kapacitor define &amp;lt;name&amp;gt; -file task.json

# 删除task
$ kapacitor delete [task id/name]

$ kapacitor list tasks/templates
$ kapacitor reload [task id/name] # 相当于disable &amp;amp; enable.
$ kapacitor enable [task id/name]
$ kapaciror disable [task id/name]
$ kapacitor show [id/name]
$ kapacitor watch [task id/name]

$ kapacitor list topics
$ kapacitor delete topics [topic id]
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;http-api&#34;&gt;Http API&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;port = 9092
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configuration&#34;&gt;configuration&lt;/h2&gt;
&lt;p&gt;获取所有可以overwrite的参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /kapacitor/v1/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;获取section/option参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /kapacitor/v1/config/smtp
GET /kapacitor/v1/config/smtp/
GET /kapacitor/v1/config/influxdb
GET /kapacitor/v1/config/influxdb/localhost

POST /kapacitor/v1/config/smtp/
{
    &amp;quot;set&amp;quot;:{
        &amp;quot;enabled&amp;quot;: true
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;操作task:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 修改已存在的task的参数:
$ curl -H &#39;content-type: application/json&#39; -X PATCH -d &#39;{&amp;quot;vars&amp;quot;: {&amp;quot;warn&amp;quot;:{&amp;quot;value&amp;quot;:90, &amp;quot;type&amp;quot;:&amp;quot;int&amp;quot;}}}&#39; http://kapacitor-service:9092/kapacitor/v1/tasks/cpu
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;操作alert:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 列出所有topic:
$ curl -H &#39;content-type: application/json&#39; -X GET http://kapacitor-service:9092/kapacitor/v1/alerts/topics
// 列出指定topic的所有events:
$ curl -H &#39;content-type: application/json&#39; -X GET http://kapacitor-service:9092/kapacitor/v1/alerts/topics/&amp;lt;topic&amp;gt;/events
// 列出指定events
$ curl -H &#39;content-type: application/json&#39; -X GET http://kapacitor-service:9092/kapacitor/v1/alerts/topics/&amp;lt;topic&amp;gt;/events/&amp;lt;event&amp;gt;?min-level=CRITICAL
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tickscript&#34;&gt;TICKscript&lt;/h1&gt;
&lt;p&gt;注释:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// comment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tickscript字符串用单引号和三单引号表示.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = &#39;test&#39;
var b = &#39;&#39;&#39;test1
test2&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keywords:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TRUE
FALSE
AND
OR
lambda
var
dbrp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;operator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ - * /    算数运算
== != &amp;lt; &amp;lt;= &amp;gt; &amp;gt;=    比较运算
=~ !~    正则表达式匹配和不匹配
! AND OR    逻辑运算
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;chaining operators:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|    chaining method (constructor)
.    property method (property methods &amp;amp; event handlers)
@    User Define Function
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;status:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 -&amp;gt; OK
1 -&amp;gt; INFO
2 -&amp;gt; WARN
3 -&amp;gt; CRIT
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;node&#34;&gt;node&lt;/h1&gt;
&lt;p&gt;node是tickscript中的复杂数据结构．&lt;/p&gt;
&lt;p&gt;两个顶级node类型是stream和batch&lt;/p&gt;
&lt;p&gt;batch是定时查询influxdb.&lt;/p&gt;
&lt;p&gt;stream是通过订阅influxdb,写入到influxdb的数据也会写入kapacitor.&lt;/p&gt;
&lt;p&gt;constructor调用相应的property methods.&lt;/p&gt;
&lt;h2 id=&#34;stream&#34;&gt;stream&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;var data = stream
    |from()...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;property methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;quiet()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;chaining methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Deadman
From
Stats
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;batch&#34;&gt;batch&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;var data = batch
    |query()...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;property methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;quiet()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;chaining methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Deadman
Query
Stats
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;alert&#34;&gt;alert&lt;/h2&gt;
&lt;p&gt;alert有三种类型: threshold, relative, deadman.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var alert = data
    |eval()...
    |alert()
      .id(&#39;{{ index .Tags &amp;quot;&amp;lt;tag-key&amp;gt;&amp;quot; }}&#39;)
      .message(&#39;{{ .ID }} {{ .Level }} {{ index .Fields &amp;quot;&amp;lt;field-key&amp;gt;&amp;quot; }} {{ .Time }}&#39;)
      .details(...)
      ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alert()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;property methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;id()    # 定义alert的ID
message()    # 相当于email的subject.
details()    # html格式的警告信息，相当于email的body.
info()
infoReset()
warn()
warnReset()
crit()
critReset()
email()
log()    # 将json格式的alert存放到文件．
idTag
idField
levelTag()
levelField()
durationField()
messageField()
post()
tcp()
all()    # period里面所有值都满足条件才alert
topic()
flapping()
history()
inhibit(&amp;lt;category&amp;gt;, &amp;lt;tags&amp;gt;) // 忽略一类告警
quiet()
noRecoveries() # 不要发恢复(OK)的警告
stateChangesOnly() # 状态改变才发警告,OK/INFO/WARNING/CRITICAL
category()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;message/details event data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 通过property methods定义一些变量
ID -&amp;gt; {{ .ID }}
Name -&amp;gt; measurement
TaskName -&amp;gt; task name
Group -&amp;gt; groupBy
Tags -&amp;gt; {{.Tags}} {{index .Tags &amp;quot;&amp;lt;tag_key&amp;gt;&amp;quot;}}
Fields -&amp;gt; {{.Fields}} {{index .Fields &amp;quot;&amp;lt;field_key&amp;gt;&amp;quot;}}
Message
Details
Time -&amp;gt; {{ .Time }}
Duration -&amp;gt; {{ .Duration }}
Level -&amp;gt; {{ .Level }}
Data
Recoverable
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;query&#34;&gt;query&lt;/h2&gt;
&lt;p&gt;constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;query(q string)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;property methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fill()
align()
alignGroup()
groupBy()
cron()
every()
period()
quiet()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;from&#34;&gt;from&lt;/h2&gt;
&lt;p&gt;constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;property methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;database()
retentionPolicy()
measurement()
where()
groupBy()
round()
truncate()
quiet()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;window&#34;&gt;window&lt;/h2&gt;
&lt;p&gt;constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;property methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;every()
period()
align()
quiet()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;log&#34;&gt;Log&lt;/h2&gt;
&lt;p&gt;constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;log()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;property methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;level()
prefix()
quiet()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;influxdbout&#34;&gt;influxDBOut&lt;/h2&gt;
&lt;p&gt;constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;influxDBOut()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;property methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;create()
...
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;handler&#34;&gt;handler&lt;/h1&gt;
&lt;p&gt;handler是用来处理alert的工具, 最常用的是email&lt;/p&gt;
&lt;p&gt;handler可以调用相应的options.&lt;/p&gt;
&lt;h2 id=&#34;email&#34;&gt;email&lt;/h2&gt;
&lt;p&gt;options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;to(&amp;quot;&amp;lt;email_address&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要配置smtp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[smtp]
    enabled = true
    host = &amp;quot;localhost&amp;quot;  # 一般postfix/mailutils和kapacitor安装到同一台server
    port = 25

    from = &amp;quot;canuxcheng@gmail.com&amp;quot;  # 必须配置
    to = [&amp;quot;&amp;quot;]  # 可以在tickscript中指定, tickscript不指定，就用该配置.

    global = true # 开启后,tickscript中不用指定handler,默认都是发邮件.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;log-1&#34;&gt;log&lt;/h2&gt;
&lt;p&gt;options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path
mode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;写入到log.&lt;/p&gt;
&lt;h2 id=&#34;slack&#34;&gt;slack&lt;/h2&gt;
&lt;h2 id=&#34;post&#34;&gt;post&lt;/h2&gt;
&lt;h2 id=&#34;tcp&#34;&gt;tcp&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>Prometheus</title>
        <link>https://canuxcheng.com/post/metrics_prometheus/</link>
        <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics_prometheus/</guid>
        <description>&lt;h1 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h1&gt;
&lt;p&gt;Prometheus Server是Prometheus组件中的核心部分，负责实现对监控数据的获取，存储以及查询&lt;/p&gt;
&lt;p&gt;swarm部署:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/vegasbrianc/prometheus&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/vegasbrianc/prometheus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;k8s部署:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/coreos/kube-prometheus&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/coreos/kube-prometheus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/coreos/prometheus-operator&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/coreos/prometheus-operator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/helm/charts/tree/master/stable/prometheus-operator&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/helm/charts/tree/master/stable/prometheus-operator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;高可用:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/thanos-io/thanos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/thanos-io/thanos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;prometheus grafana dashboard:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes-monitoring/kubernetes-mixin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes-monitoring/kubernetes-mixin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/grafana/kubernetes-app&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/grafana/kubernetes-app&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;promql&#34;&gt;PromQL&lt;/h1&gt;
&lt;p&gt;metrics类型:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;counter计数器&lt;/li&gt;
&lt;li&gt;gauge仪表盘&lt;/li&gt;
&lt;li&gt;histogram直方图&lt;/li&gt;
&lt;li&gt;summary摘要&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Telegraf</title>
        <link>https://canuxcheng.com/post/metrics_telegraf/</link>
        <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics_telegraf/</guid>
        <description>&lt;h1 id=&#34;telegraf&#34;&gt;Telegraf&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/influxdata/telegraf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/influxdata/telegraf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The plugin-driven server agent for collecting &amp;amp; reporting metrics.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;configuartion&#34;&gt;Configuartion&lt;/h1&gt;
&lt;p&gt;agent configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interval    所有inputs的默认运行间隔
round_interval
collection_jitter
precision    ns/us/ms/s
flush_interval
flush_jitter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;input configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interval
name_override # 默认measurements是插件名,修改默认measurements.
name_prefix
name_suffix
tags
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;go-api&#34;&gt;Go API&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://godoc.org/github.com/influxdata/telegraf#Input&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://godoc.org/github.com/influxdata/telegraf#Input&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;测试插件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 需要配置文件
$ telegraf --input-filter &amp;lt;plugin-name&amp;gt; --test
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;build&#34;&gt;Build&lt;/h1&gt;
&lt;p&gt;安装依赖：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install ruby-dev
sudo gem install fpm
sudo apt-get install rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编译telegraf:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make telegraf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./telegraf config &amp;gt; ./etc/telegraf.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;构建deb:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make package
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;development&#34;&gt;Development&lt;/h1&gt;
&lt;p&gt;修改默认enable的plugin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# plugin中相应的sampleConfig中的字段不要用#注释．
internal/config/config.go -&amp;gt; 可以修改默认enable的plugin.
inputDefaults
outputDefaults
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./telegraf --config ./etc/telegraf.conf --input-filter process --test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加debugxinxi&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;quot;log&amp;quot;
log.Printf(&amp;quot;D! key: %v&amp;quot;, value)
# &amp;quot;D!&amp;quot; 开头的信息当debug=true才会打印.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>IDE</title>
        <link>https://canuxcheng.com/post/devops_ide/</link>
        <pubDate>Sun, 02 Apr 2017 21:11:26 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_ide/</guid>
        <description>&lt;h1 id=&#34;jetbrains&#34;&gt;JetBrains&lt;/h1&gt;
&lt;p&gt;IntelliJ: Java的IDE, 安装Python的插件也支持python.&lt;/p&gt;
&lt;h2 id=&#34;pycharm&#34;&gt;PyCharm&lt;/h2&gt;
&lt;p&gt;PyCharm: Python的IDE.&lt;/p&gt;
&lt;h2 id=&#34;goland&#34;&gt;Goland&lt;/h2&gt;
&lt;p&gt;Goland: golang的IDE.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vscode&#34;&gt;VSCode&lt;/h1&gt;
&lt;h2 id=&#34;intellisense--code-navigation&#34;&gt;IntelliSense &amp;amp; Code Navigation&lt;/h2&gt;
&lt;p&gt;Go to Definition: F12, 跳转到定义.&lt;/p&gt;
&lt;p&gt;Peek Definition: Alt + F12， 速览定义，不跳转.&lt;/p&gt;
&lt;p&gt;Go to references: Shift + F12, 转到引用.&lt;/p&gt;
&lt;h2 id=&#34;frontend&#34;&gt;frontend&lt;/h2&gt;
&lt;h3 id=&#34;vs-js-debug&#34;&gt;vs-js-debug&lt;/h3&gt;
&lt;p&gt;vscode内置了js/ts/node的debugger.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/microsoft/vscode-js-debug&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/microsoft/vscode-js-debug&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;live-server&#34;&gt;live server&lt;/h3&gt;
&lt;p&gt;live preview(html, svg&amp;hellip;)&lt;/p&gt;
&lt;p&gt;如果用remote-ssh开启live server就是在远程机器上开启5500端口，webroot就是vscode打开的目录.&lt;/p&gt;
&lt;p&gt;如果是remote-ssh开发html，用这个preview很方便.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ritwickdey/vscode-live-server&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ritwickdey/vscode-live-server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;vscode-chrome-debug&#34;&gt;vscode-chrome-debug&lt;/h3&gt;
&lt;p&gt;打开的是安装vscode的机器上的chrome。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/microsoft/vscode-chrome-debug&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/microsoft/vscode-chrome-debug&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过live server监听remote-ssh机器上的5500，可以通过chrome远程调试静态站点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;angularjs&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;chrome&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;url&amp;quot;: &amp;quot;http://remote-ssh-server:5500/path/to/index.html&amp;quot;,
            &amp;quot;webRoot&amp;quot;: &amp;quot;${workspaceFolder}/path/to/&amp;quot;,
        },
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;python&#34;&gt;python&lt;/h2&gt;
&lt;p&gt;debuging:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/docs/python/debugging&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://code.visualstudio.com/docs/python/debugging&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;debug current file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;current file&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;python&amp;quot;,
    &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
    &amp;quot;program&amp;quot;: &amp;quot;${file}&amp;quot;,
    &amp;quot;console&amp;quot;: &amp;quot;integratedTerminal&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;debug with module:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;module&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;python&amp;quot;,
    &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
    &amp;quot;module&amp;quot;: &amp;quot;module-name&amp;quot;,
    &amp;quot;console&amp;quot;: &amp;quot;integratedTerminal&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;debug with attach:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// create ssh tunnel
ssh -2 -L sourceport:localhost:5678 -i identifyfile user@remoteaddress
{
    &amp;quot;name&amp;quot;: &amp;quot;Python: Attach&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;python&amp;quot;,
    &amp;quot;request&amp;quot;: &amp;quot;attach&amp;quot;,
    &amp;quot;port&amp;quot;: 5678,
    &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
    &amp;quot;pathMappings&amp;quot;: [
        {
            &amp;quot;localRoot&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;,
            &amp;quot;remoteRoot&amp;quot;: &amp;quot;.&amp;quot;,
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;testing:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/docs/python/testing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://code.visualstudio.com/docs/python/testing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;unittest:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;python.testing.autoTestDiscoverOnSaveEnabled&amp;quot;: true,
    &amp;quot;python.testing.unittestArgs&amp;quot;: [
        &amp;quot;-v&amp;quot;,
        &amp;quot;-s&amp;quot;,
        &amp;quot;./tests&amp;quot;,
        &amp;quot;-p&amp;quot;,
        &amp;quot;test_*.py&amp;quot;
    ],
    &amp;quot;python.testing.pytestEnabled&amp;quot;: false,
    &amp;quot;python.testing.nosetestsEnabled&amp;quot;: false,
    &amp;quot;python.testing.unittestEnabled&amp;quot;: true,
    &amp;quot;restructuredtext.confPath&amp;quot;: &amp;quot;${workspaceFolder}/docs&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;django&#34;&gt;django&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/docs/python/tutorial-django&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://code.visualstudio.com/docs/python/tutorial-django&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;debugging:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    // 使用 IntelliSense 了解相关属性。
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Python: Django&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;python&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/path/to/manage.py&amp;quot;,
            &amp;quot;console&amp;quot;: &amp;quot;integratedTerminal&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;runserver&amp;quot;,
                &amp;quot;0:8888&amp;quot;
            ],
            &amp;quot;django&amp;quot;: true,
            &amp;quot;env&amp;quot;: {
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;golang&#34;&gt;golang&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/golang/vscode-go/blob/master/docs/debugging.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/golang/vscode-go/blob/master/docs/debugging.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;debugging:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;golang file&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;go&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;mode&amp;quot;: &amp;quot;auto&amp;quot;,
            &amp;quot;program&amp;quot;: &amp;quot;${file}&amp;quot;
        },
        {
            &amp;quot;name&amp;quot;: &amp;quot;gin debug&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;go&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;mode&amp;quot;: &amp;quot;auto&amp;quot;,
            &amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/backend/main.go&amp;quot;
        },
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rest-client&#34;&gt;rest client&lt;/h2&gt;
&lt;p&gt;调试rest API&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Huachao/vscode-restclient&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Huachao/vscode-restclient&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;example.api:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@api = http://hostname:port/api/v0
@Authorization = Basic a2FpemVuOkFybUFkbWluMSE=
@Content-Type = application/json

###
GET {{api}}/users HTTP/1.1
Authorization: {{Authorization}}
Content-Type: {{Content-Type}}

### 
POST {{api}}/groupus HTTP/1.1
Authorization: {{Authorization}}
Content-Type: {{Content-Type}}
{
    key: value
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;record&#34;&gt;record&lt;/h2&gt;
&lt;p&gt;vscode录制.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/microsoft/codetour&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/microsoft/codetour&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/arciisine/vscode-chronicler&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/arciisine/vscode-chronicler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;支持远程debug的时候在本地录制，也就是本地是windows，只需要本地安装ffmpeg和chroicler。&lt;/p&gt;
&lt;h2 id=&#34;mcp&#34;&gt;MCP&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;&amp;hellip;/Code/User/settings.json&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/GLips/Figma-Context-MCP&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/GLips/Figma-Context-MCP&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol/servers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/modelcontextprotocol/servers&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;servers&amp;quot;: {
        &amp;quot;postgres&amp;quot;: {
            &amp;quot;command&amp;quot;: &amp;quot;npx&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;-y&amp;quot;,
                &amp;quot;@modelcontextprotocol/server-postgres&amp;quot;,
                &amp;quot;postgresql://server?ssl=true&amp;amp;sslmode=require&amp;amp;rejectUnauthorized=false&amp;quot;
            ]
        },
        &amp;quot;redis&amp;quot;: {
            &amp;quot;command&amp;quot;: &amp;quot;npx&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;-y&amp;quot;,
                &amp;quot;@modelcontextprotocol/server-redis&amp;quot;,
                &amp;quot;redis://localhost:6379&amp;quot;
            ]
        },
        &amp;quot;playwright&amp;quot;: {
            &amp;quot;command&amp;quot;: &amp;quot;npx&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;@playwright/mcp@latest&amp;quot;
            ]
        },
        &amp;quot;Azure MCP Server&amp;quot;: {
            &amp;quot;command&amp;quot;: &amp;quot;npx&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;-y&amp;quot;,
                &amp;quot;@azure/mcp@latest&amp;quot;,
                &amp;quot;server&amp;quot;,
                &amp;quot;start&amp;quot;
            ]
        },
        &amp;quot;memory&amp;quot;: {
            &amp;quot;command&amp;quot;: &amp;quot;npx&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;-y&amp;quot;,
                &amp;quot;@modelcontextprotocol/server-memory&amp;quot;
            ]
        },
        &amp;quot;sequential-thinking&amp;quot;: {
            &amp;quot;command&amp;quot;: &amp;quot;npx&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;-y&amp;quot;,
                &amp;quot;@modelcontextprotocol/server-sequential-thinking&amp;quot;
            ]
        },
        &amp;quot;git&amp;quot;: {
            &amp;quot;command&amp;quot;: &amp;quot;docker&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;run&amp;quot;,
                &amp;quot;--rm&amp;quot;,
                &amp;quot;-i&amp;quot;,
                &amp;quot;--mount&amp;quot;,
                &amp;quot;type=bind,src=${workspaceFolder},dst=/workspace&amp;quot;,
                &amp;quot;mcp/git&amp;quot;
            ]
        },
        &amp;quot;filesystem&amp;quot;: {
            &amp;quot;command&amp;quot;: &amp;quot;npx&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;-y&amp;quot;,
                &amp;quot;@modelcontextprotocol/server-filesystem&amp;quot;,
                &amp;quot;${workspaceFolder}&amp;quot;
            ]
        },
        &amp;quot;fetch&amp;quot;: {
            &amp;quot;command&amp;quot;: &amp;quot;docker&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;run&amp;quot;,
                &amp;quot;-i&amp;quot;,
                &amp;quot;--rm&amp;quot;,
                &amp;quot;mcp/fetch&amp;quot;
            ]
        },
        &amp;quot;kubernetes&amp;quot;: {
            &amp;quot;command&amp;quot;: &amp;quot;npx&amp;quot;,
            &amp;quot;args&amp;quot;: [
                &amp;quot;-y&amp;quot;,
                &amp;quot;mcp-server-kubernetes&amp;quot;
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Testing</title>
        <link>https://canuxcheng.com/post/testing/</link>
        <pubDate>Wed, 01 Mar 2017 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/testing/</guid>
        <description>&lt;h1 id=&#34;qa&#34;&gt;QA&lt;/h1&gt;
&lt;p&gt;Quality Assurance&lt;/p&gt;
&lt;p&gt;QA主要就是进行软件测试相关的工作.&lt;/p&gt;
&lt;p&gt;软件测试就是使用人工或自动的手段来运行或测量软件系统的过程，以检验软件系统是否满足规定的要求，并找出与预期结果之间的差异．&lt;/p&gt;
&lt;p&gt;软件测试五个要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;质量&lt;/li&gt;
&lt;li&gt;人员&lt;/li&gt;
&lt;li&gt;技术&lt;/li&gt;
&lt;li&gt;流程&lt;/li&gt;
&lt;li&gt;资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试两个目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试覆盖率&lt;/li&gt;
&lt;li&gt;测试效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单元测试(Unit Testing)&lt;/li&gt;
&lt;li&gt;集成测试(Integration Testing)： 验证多个模块之间接口交互。&lt;/li&gt;
&lt;li&gt;系统测试(System Testing)：整个系统的测试，验证系统是否满足需求（功能，性能，兼容性，稳定性）。&lt;/li&gt;
&lt;li&gt;验收测试(Acceptance Testing)·&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试的手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动测试/自动化测试&lt;/li&gt;
&lt;li&gt;静态测试&lt;/li&gt;
&lt;li&gt;动态测试&lt;/li&gt;
&lt;li&gt;黑盒测试&lt;/li&gt;
&lt;li&gt;白盒测试&lt;/li&gt;
&lt;li&gt;灰度测试：部分了解内部结构，常用于测试接口，集成层，复杂业务逻辑等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能测试&lt;/li&gt;
&lt;li&gt;稳定性测试&lt;/li&gt;
&lt;li&gt;安全测试&lt;/li&gt;
&lt;li&gt;可用性测试&lt;/li&gt;
&lt;li&gt;兼容性测试&lt;/li&gt;
&lt;li&gt;文档测试&lt;/li&gt;
&lt;li&gt;本地化测试&lt;/li&gt;
&lt;li&gt;冒烟测试&lt;/li&gt;
&lt;li&gt;功能测试Functional Testing&lt;/li&gt;
&lt;li&gt;回归测试Regression Testing&lt;/li&gt;
&lt;li&gt;用户界面测试UI Testing&lt;/li&gt;
&lt;li&gt;端到端测试End-To-End Testing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试的模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统的瀑布模型&lt;/li&gt;
&lt;li&gt;V模型&lt;/li&gt;
&lt;li&gt;W模型&lt;/li&gt;
&lt;li&gt;X模型&lt;/li&gt;
&lt;li&gt;H模型&lt;/li&gt;
&lt;li&gt;敏捷测试模型(金字塔模式)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试的模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;金字塔模式Ideal Test Automation Pyramid&lt;/li&gt;
&lt;li&gt;蛋筒冰激凌模式Ice Cream Cone&lt;/li&gt;
&lt;li&gt;双金字塔模式Dual Test Pyramid&lt;/li&gt;
&lt;li&gt;纸杯蛋糕模式Cupcake&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;test-automation-pyramid&#34;&gt;Test Automation Pyramid&lt;/h1&gt;
&lt;p&gt;Mike Cohn的测试金字塔&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://martinfowler.com/bliki/TestPyramid.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://martinfowler.com/bliki/TestPyramid.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automated GUI Tests(10%)&lt;/li&gt;
&lt;li&gt;Automated Service Tests(Component/Integration/API)(20%)&lt;/li&gt;
&lt;li&gt;Automated Unit Tests(70%)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;unit-test单元测试&#34;&gt;Unit Test/单元测试&lt;/h1&gt;
&lt;p&gt;单元测试是开发者编写的测试一个单元（函数／类）的功能是否符合预期．&lt;/p&gt;
&lt;p&gt;单元测试的覆盖率是指测试的单元调用了多少代码．&lt;/p&gt;
&lt;p&gt;Unit Test的工具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java: Junit&lt;/li&gt;
&lt;li&gt;Python: unittest(pyunit), nose2, pytest&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;test-automation&#34;&gt;Test Automation&lt;/h1&gt;
&lt;p&gt;敏捷测试的核心就是自动化测试．&lt;/p&gt;
&lt;p&gt;自动化测试框架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Robot Framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ATDD: Acceptance test-driven development&lt;/p&gt;
&lt;p&gt;BDD: Behavior-driven development&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;big-list-of-naughty-strings&#34;&gt;big-list-of-naughty-strings&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/minimaxir/big-list-of-naughty-strings&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/minimaxir/big-list-of-naughty-strings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;测试中谨慎使用的字符串．&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;allure&#34;&gt;Allure&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/allure-framework&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/allure-framework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Allure是一个灵活的轻量级多语言测试报告框架．&lt;/p&gt;
&lt;h1 id=&#34;reportportal&#34;&gt;reportportal&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/reportportal&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/reportportal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReportPortal是一个开源的测试报告平台，支持多种测试框架和语言，提供实时的测试结果和分析。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>RobotFramework</title>
        <link>https://canuxcheng.com/post/testing_robotframework/</link>
        <pubDate>Sat, 25 Feb 2017 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/testing_robotframework/</guid>
        <description>&lt;h1 id=&#34;robot-framework&#34;&gt;Robot Framework&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/robotframework/robotframework&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/robotframework/robotframework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/robotframework/QuickStartGuide&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/robotframework/QuickStartGuide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;支持python和java的API.&lt;/p&gt;
&lt;p&gt;Robot Framework is a generic test automation framework for acceptance testing and acceptance test-driven development (ATDD).&lt;/p&gt;
&lt;p&gt;Install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install robotframework
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Modular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test Data&lt;/li&gt;
&lt;li&gt;Robot Framework(test data syntax)&lt;/li&gt;
&lt;li&gt;Test Libraries(test library API) + Test Tools&lt;/li&gt;
&lt;li&gt;System under Test(system interface)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ robot --version
$ robot [options] data_sources
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会生成三个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;output.xml&lt;/li&gt;
&lt;li&gt;log.html&lt;/li&gt;
&lt;li&gt;report.html&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;setting-table&#34;&gt;setting table&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;*** Settings ***
# 前三个是加载外部文件
Library    Selenium2Library # 需要在sys.path路径里面
Resource    ${RESOURCES}/common.tsv
Variables    ${RESOURCES}/common.py
Documentation    Docs
Metadata    Version    2.0
Suite Setup
Suite Teardown
Force Tags
Default Tags
Test Setup
Test Teardown
Test Template
Test Timeout
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;test-case-table&#34;&gt;Test Case table&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/robotframework/HowToWriteGoodTestCases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/robotframework/HowToWriteGoodTestCases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;test case:data_sources就是test cases files.robotframework测试用例可以使用带参数的简单表格语法，也可以是不带参数的关键字表格,也可以是数据驱动测试用例.&lt;/p&gt;
&lt;p&gt;Test Cases由keywords和可能的arguments组成．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Test Cases ***
Test Case Name
    [Documentation]    Docs
    [Tags]
    [Setup]
    [Teardown]
    [Template]
    [Timeout]
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test Case分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workflow tests&lt;/li&gt;
&lt;li&gt;higher-level tests&lt;/li&gt;
&lt;li&gt;Data-driven tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;keywords-table&#34;&gt;Keywords table&lt;/h1&gt;
&lt;p&gt;key word:测试用例使用关键词创建,关键词的2个来源是库关键字和用户关键字．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Keywords ***
Keyword name
    [Documentation]    docs
    [Tags]
    [Arguments]
    [Return]
    [Teardown]
    [Timeout]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keywords分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Library keywords&lt;/li&gt;
&lt;li&gt;User keywords&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;variables&#34;&gt;Variables&lt;/h1&gt;
&lt;p&gt;variables:测试用例中可能变化的数据定义成变量．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Variables ***
${ScalarVar}    first one    second one
@{ListVar}     one    two
&amp;amp;{DictVar}     key=value    key1=value1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;变量类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scalar variables标量&lt;/li&gt;
&lt;li&gt;list variables列表&lt;/li&gt;
&lt;li&gt;dictionary variables字典&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;organizing-test-cases&#34;&gt;Organizing test cases&lt;/h1&gt;
&lt;p&gt;test suites:测试用例的集合叫测试套件．每个包含测试用例的输入文件组成一个测试套件．&lt;/p&gt;
&lt;p&gt;test setup/suit setup: 在测试之前执行某些关键词．&lt;/p&gt;
&lt;p&gt;test teardown/suit teardown: 在测试之后执行某些关键词．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Settings ***
Suite Setup    Action/Keyword
Test Setup
Suite Teardown    Action/Keyword
Test Teardown
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tags:给测试用例设置标签，以便给他们自由的元数据．&lt;/p&gt;
&lt;p&gt;给测试套件加标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** Settings ***
Force Tags    quickstart # 这个是case的强制的tag.
Default Tags    example smoke # 这个是case的默认的tag.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自定义标签注意多个标签之间用四个空格区分．&lt;/p&gt;
&lt;p&gt;给单个case加标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 自定义的tag名字多个单词最好用-连接，不要用空格．
[Tags]    Your-tags1    tag2 # 这个是自定义的tag.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;libraries&#34;&gt;Libraries&lt;/h1&gt;
&lt;p&gt;内置标准库和第三方库，自定义库都可以作为keywords.&lt;/p&gt;
&lt;p&gt;robotframework的强大之处在于可以根据自己的需要开发自己的库．&lt;/p&gt;
&lt;h2 id=&#34;standardbuild-in-libraries&#34;&gt;standard(build-in libraries)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BuiltIn&lt;/p&gt;
&lt;p&gt;内置标准库，默认唯一自动加载的库．其它的库都需要手动加载．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # Comment关键字用来注释．
  Comment    this is comment
  # Evaluate关键字用来调用python程序．
  ${var}    Evaluate    random.randint(1000, 999)    random
  # Import Library关键字用来导入python模块．
  Import Library    mytest.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DateTime&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dialogs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OperatingSystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remote&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Screenshot&lt;/p&gt;
&lt;p&gt;用于测试过程中的截屏．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # Take Screenshot关键字用来截屏
  Take Screenshot
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Telnet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XML&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;external&#34;&gt;External&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;selenium2library&lt;/p&gt;
&lt;p&gt;用于web自动化测试．提供了丰富的定位器，包括id,name, xpath, css.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/robotframework/Selenium2Library&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/robotframework/Selenium2Library&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  $ pip install robotframework-selenium2library
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other&#34;&gt;other&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tools&#34;&gt;Tools&lt;/h1&gt;
&lt;p&gt;robot framework相关的工具．&lt;/p&gt;
&lt;h2 id=&#34;build-in-tools&#34;&gt;build-in tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rebot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testdoc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Libdoc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tidy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;editors&#34;&gt;editors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RIDE&lt;/p&gt;
&lt;p&gt;robot framework的IDE.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/robotframework/RIDE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/robotframework/RIDE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # Only wxPython 2.8.12.1 with Unicode support is officially supported
  $ pip install robotframework-ride
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # 添加windows的桌面：
  # C:\Python27\python.exe -c &amp;quot;from robotide import main; main()&amp;quot;
  # C:\Python27\Lib\site-packages\robotide\widgets\robot.ico
  &amp;gt; ride.py
  $ ride.py
  # F5搜索关键字
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;build&#34;&gt;build&lt;/h2&gt;
&lt;h2 id=&#34;other-1&#34;&gt;other&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;robot-command&#34;&gt;robot command&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ robot tests.robot
$ robot -t/--test [test cases] tests.robot
$ robot -t My*test*case* tests.robot # 例如case叫My test case just for test.
$ robot -s/--suite [test suites] tests.robot
$ robot -i/--include [tags] tests.robot
$ robot -i My-test-tag tests.robot # 例如tag叫My-test-tag.
$ robot -e/--exclude [tags] tests.robot
-d --outputdir dir # 存放output, log, report文件的路径.
-o --output file
-l --log file
-r --report file
-W --consolewidth chars
-C --consolecolors auto|on|ansi|off
-K --consolemarkers auto|on|off
-L --loglevel level    # 格式LOGLEVEL:DEFAULT, 可选TRACE, DEBUG, INFO (default), WARN, NONE
# DEFAULT是log file中默认显示的日志级别
-b --debugfile # 存放debug log的文件．
-T --timestampoutputs # 表示所有在outputdir里面的文件都自动加时间戳．
-P --pythonpath path * # 指定PYTHONPATH, 可以指定正在开发的库用来测试，而不需要安装到site-packages.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;library&#34;&gt;Library&lt;/h1&gt;
&lt;p&gt;robotframework的灵活就在于可以自己开发第三方库，实现和自己业务相关的关键字．&lt;/p&gt;
&lt;p&gt;在robot中导入的这个库必须在sys.path路径里面．&lt;/p&gt;
&lt;p&gt;库API的三种类型： 静态库, 动态库, 混合库.&lt;/p&gt;
&lt;p&gt;以Selenium2Library为例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Selenium2Library
|-- docs
|-- tests
|-- Selenium2Library
    |-- __init__.py
    |-- keywords/*.py
    |-- ...
|-- setup.py
|-- ...

$ pip install robotframework-selenium2library
# C:\Python27\Lib\site-packages\Selenium2Library
# /usr/local/lib/python2.7/dist-packages/Selenium2Library
# 通过ride导入该库后，可以用F5查看关键字的帮助.

# __init__.py
# 一个类继承所有关键字所在的类．rf通过导入这个类导入所有关键字．
from .keywords import *
from .utils import LibraryListener
...

__version__ =  1.0.0

class Selenium2Library(keywords):
    &amp;quot;&amp;quot;&amp;quot;docs.&amp;quot;&amp;quot;&amp;quot;

    ROBOT_LIBRARY_SCOPE = &#39;GLOBAL&#39;
    ROBOT_LIBRARY_VERSION = __version__

    def __init__(self, ...):
       &amp;quot;&amp;quot;&amp;quot;docs&amp;quot;&amp;quot;&amp;quot;
       self.ROBOT_LIBRARY_LISTENER = LibraryListener()
       ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;static-librarty-api&#34;&gt;Static librarty API&lt;/h1&gt;
&lt;p&gt;使用一个模块或一个类，方法直接映射到关键字名称．静态API是最基本最常用的．&lt;/p&gt;
&lt;p&gt;robotframework在类和模块中寻找关键字对应的方法，会忽略单下划线或双下划线开头的方法．&lt;/p&gt;
&lt;p&gt;robotframework在类中寻找关键字对应的方法，不区分大小写，会自动忽略空格和下划线．&lt;/p&gt;
&lt;p&gt;robotframework测试库实现为类时，基类中的方法也被识别为关键字．&lt;/p&gt;
&lt;p&gt;robotframework测试库实现为模块时，导入的模块的命名空间的可能函数也被识别为关键字．此时要防止导入的库中的方法成为关键字．&lt;/p&gt;
&lt;p&gt;关键字跑出异常，该关键字状态就是failed,否则就是pass.&lt;/p&gt;
&lt;h1 id=&#34;dylamic-library-api&#34;&gt;dylamic library API&lt;/h1&gt;
&lt;p&gt;可以在运行时动态确定要实现的关键字的名称以及执行方法．&lt;/p&gt;
&lt;h1 id=&#34;hybird-library-api&#34;&gt;hybird library API&lt;/h1&gt;
&lt;p&gt;静态和动态都有的方式．&lt;/p&gt;
&lt;h1 id=&#34;测试库范围&#34;&gt;测试库范围&lt;/h1&gt;
&lt;p&gt;要确保一个测试用例对状态的更改不会影响其它用例．&lt;/p&gt;
&lt;p&gt;测试库可以控制何时使用类属性创建新库．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ROBOT_LIBRARY_SCOPE
# Global: 只有一个instance创建，并且所有test cases共享．
# TEST CASE: 为每个test case创建一个instance.
# TEST SUITE: 为每个test suite创建一个instance.
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;测试库版本&#34;&gt;测试库版本&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;ROBOT_LIBRARY_VERSION
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;指定文档格式&#34;&gt;指定文档格式&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;ROBOT_LIBRARY_DOC_FORMAT
# reST: 需要安装docutils模块
# ROBOT: 默认的html格式
# TEXT:　纯文本格式
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;listener&#34;&gt;Listener&lt;/h1&gt;
&lt;p&gt;Listener监听器接口允许外部监听器获取关于测试执行的通知．&lt;/p&gt;
&lt;p&gt;同名的默认方法会先调用，然后调用自定义的方法．&lt;/p&gt;
&lt;p&gt;可以实现的方法有：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;start_suite(name, attribute)/end_suite(name, attribute) # test suite开始/结束的时候调用
start_test(name, attribute)/end_test(name, attribute) # test case开始/结束的时候调用
start_keyword(name, attributes)/end_keyword(name, attribute) # keyword开始/结束的时候调用
close() # 相当于teardown.
log_message(message) # 当执行的keyword写log的时候调用
message(message) # 当framework写system log的时候调用
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-interface-methods&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-interface-methods&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# librarylistener.py
# rf的外部监听程序

from robot.api import logger
...

class LibraryListener(object):
    &amp;quot;&amp;quot;&amp;quot;docs&amp;quot;&amp;quot;&amp;quot;
    # version 2 for rf&amp;gt;=2.1
    # version 3 for rf&amp;gt;=3.0
    ROBOT_LISTENER_API_VERSION = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;allure&#34;&gt;allure&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/allure-framework/allure-python/tree/master/allure-robotframework&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/allure-framework/allure-python/tree/master/allure-robotframework&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install allure-robotframework
$ robot --listener allure_robotframework ./my_robot_test
$ robot --listener allure_robotframework:/set/your/path/here ./my_robot_test

allure generate output/allure
allure serve output/allure
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;reportportal&#34;&gt;reportportal&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/reportportal/plugin-import-robot&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/reportportal/plugin-import-robot&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Selenium</title>
        <link>https://canuxcheng.com/post/testing_selenium/</link>
        <pubDate>Sat, 25 Feb 2017 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/testing_selenium/</guid>
        <description>&lt;h1 id=&#34;selenium&#34;&gt;Selenium&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/SeleniumHQ/selenium&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/SeleniumHQ/selenium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用于基于浏览器的web应用的自动化测试工具集．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;selenium1: deprecated.
selenium2: 默认支持firefox&amp;lt;=46. 支持python2.6+, python3.2+
selenium3: 支持firefox47+, 所有浏览器都需要安装webdriver.支持python2.6+, python3.3+, 必须重启OS.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;支持python, java, javascript等API.&lt;/p&gt;
&lt;p&gt;默认安装selenium3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install selenium
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;selenium3需要安装相应浏览器的driver, 然后重启OS:&lt;/p&gt;
&lt;p&gt;selenium, driver, browser三个版本都需要兼容才能工作．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;winfows放在C:\Python\Scripts\
linux放在/usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sites.google.com/a/chromium.org/chromedriver/downloads&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://sites.google.com/a/chromium.org/chromedriver/downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozilla/geckodriver/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/mozilla/geckodriver/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[Deprecated] Remote Control: 也就是selenium1.selenium2依然保留了selenium1的API.但是selenium3会彻底删除RC的API.&lt;/p&gt;
&lt;p&gt;[Deprecated] IDE: selenium IDE是一个firefox的插件，用于记录浏览器上的测试步骤，能用于生成测试代码，并且转换成编程语言．但是已经被WebDriver取代．&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;webdriver&#34;&gt;WebDriver&lt;/h1&gt;
&lt;p&gt;也就是selenium2.已经取代了selenium RC和selenium IDE.&lt;/p&gt;
&lt;p&gt;python的API参考python博客．&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;grid&#34;&gt;Grid&lt;/h1&gt;
&lt;p&gt;Selenium Grid用于分布式测试&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;定位元素&#34;&gt;定位元素&lt;/h1&gt;
&lt;p&gt;对应的python的API参考python博文．&lt;/p&gt;
&lt;p&gt;selenium提供８种定位web页面中元素的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;tag&lt;/li&gt;
&lt;li&gt;link&lt;/li&gt;
&lt;li&gt;partial_link&lt;/li&gt;
&lt;li&gt;通过xpath&lt;/li&gt;
&lt;li&gt;通过css&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在浏览器通过F12快捷键进入调试模式获取．&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Grafana</title>
        <link>https://canuxcheng.com/post/metrics_grafana/</link>
        <pubDate>Thu, 12 Jan 2017 21:05:48 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics_grafana/</guid>
        <description>&lt;h1 id=&#34;grafana&#34;&gt;Grafana&lt;/h1&gt;
&lt;p&gt;The tool for beautiful monitoring and metric analytics &amp;amp; dashboards for Graphite, InfluxDB &amp;amp; Prometheus &amp;amp; More.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/grafana/grafana&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/grafana/grafana&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;支持多种data source:&lt;/p&gt;
&lt;p&gt;graphite/influxdb/opentsdb/premetheus/elasticsearch/mysql/postgresql&lt;/p&gt;
&lt;p&gt;安装配置参考官方文档&lt;/p&gt;
&lt;p&gt;grafana配置文件是grafana.ini.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;http-api&#34;&gt;HTTP API&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;port = 3000
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dashboard&#34;&gt;dashboard&lt;/h2&gt;
&lt;p&gt;create/update dashboard:&lt;/p&gt;
&lt;p&gt;将datasource设置成变量，然后导出的json文件就可以直接导入了．&lt;/p&gt;
&lt;p&gt;dashboard.id=null才能创建新dashboard.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;post /api/dashboards/db
data = json.dumps({
    &amp;quot;dashboard&amp;quot;: {
        &amp;quot;id&amp;quot;: null,
        ...
    },
    &amp;quot;folderId&amp;quot;: 0,
    &amp;quot;overwrite&amp;quot;: True, # True for python, true for go.
    &amp;quot;message&amp;quot;: &amp;quot;commit message&amp;quot;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;datasource&#34;&gt;datasource&lt;/h2&gt;
&lt;p&gt;create datasource:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;post /api/datasources
data = json.dumps({
    &amp;quot;name&amp;quot;:
    &amp;quot;type&amp;quot;:
    &amp;quot;url&amp;quot;:
    &amp;quot;database&amp;quot;:
    &amp;quot;access&amp;quot;: &amp;quot;proxy&amp;quot;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;alert&#34;&gt;alert&lt;/h2&gt;
&lt;p&gt;create alert notification/channel:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;post /api/alert-notifications
data = json.dumps({
    &amp;quot;name&amp;quot;:
    &amp;quot;type&amp;quot;: &amp;quot;email&amp;quot;,
    &amp;quot;isDefault&amp;quot;: true,
    &amp;quot;settings&amp;quot;: {
        &amp;quot;addresses&amp;quot;: &amp;quot;a.com; b.com&amp;quot;,
        &amp;quot;uploadImage&amp;quot;: true
    }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;dashboard-1&#34;&gt;Dashboard&lt;/h1&gt;
&lt;p&gt;graph&lt;/p&gt;
&lt;p&gt;singlestat&lt;/p&gt;
&lt;p&gt;table&lt;/p&gt;
&lt;p&gt;text&lt;/p&gt;
&lt;p&gt;heatmap&lt;/p&gt;
&lt;p&gt;alertlist&lt;/p&gt;
&lt;h2 id=&#34;templating&#34;&gt;templating&lt;/h2&gt;
&lt;p&gt;定义变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show tag values with key=&#39;host&#39;
# 设置在dashboard加载时更新
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在templating中定义变量, query中使用的两种方式:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$varname
select * from cpu where &#39;host&#39; =~ /^$host$/
[[varname]]
select * from cpu where &#39;host&#39; =~ /^[[host]]&amp;amp;/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内置变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$_interval  # 相当于influxdb里面的$interval，表示group by的时间间隔
$timeFilter/$_timeFilter    # time &amp;gt; now() - &amp;lt;time range&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;panel里的变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$col         给select出来的field取别名
$tag_host
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;annotations&#34;&gt;Annotations&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;alerting&#34;&gt;Alerting&lt;/h1&gt;
&lt;p&gt;email需要安装配置SMTP,推荐使用sendmail.&lt;/p&gt;
&lt;p&gt;alert发出去的图片或连接打不开：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim /etc/grafana/grafana.ini
  [server]
  domain=
  root_url=
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;grafana4.6.2只有graph panel支持alert, singlestat 和 table暂不支持．&lt;/p&gt;
&lt;p&gt;conditions暂不支持template variables.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;plugins&#34;&gt;plugins&lt;/h1&gt;
&lt;p&gt;默认安装路径：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/var/lib/grafana/plugins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看已经安装的plugin
$ sudo grafana-cli plugins list-remote
$ sudo grafana-cli plugins install &amp;lt;plugin-id&amp;gt; &amp;lt;version&amp;gt;

# 查看安装的plugin
$ sudo grafana-cli plugins ls

# 删除plugin
$ sudo grafana-cli plugins remove &amp;lt;plugin-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;enable-https&#34;&gt;enable https&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ vim /etc/grafana/grafana.ini
protocol=https
cert-file=file.crt
key-file=file.key
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;provisioning&#34;&gt;Provisioning&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://grafana.com/docs/administration/provisioning/#provisioning-grafana&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grafana.com/docs/administration/provisioning/#provisioning-grafana&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;datasource&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim /etc/grafana/provisioning/datasources/datasource.yaml
- name: MAF
    type: influxdb
    access: proxy
    url: http://influxdb-service:8086
    database: sandbox
    isDefault: true
    editable: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dashboard&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim /etc/grafana/provisioning/dashboards/dashboard.yaml
apiVersion: 1
providers:
- name: &#39;default&#39;
orgId: 1
folder: &#39;&#39;
type: file
disableDeletion: false
editable: true
updateIntervalSeconds: 600
options:
    path: /etc/grafana/dashboards
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Tmux</title>
        <link>https://canuxcheng.com/post/devops_tmux/</link>
        <pubDate>Sun, 19 Jun 2016 11:17:53 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_tmux/</guid>
        <description>&lt;h1 id=&#34;tmux&#34;&gt;tmux&lt;/h1&gt;
&lt;p&gt;tmux是终端复用工具，类似于gnu screen。&lt;/p&gt;
&lt;p&gt;tmux三个基本概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;会话（session）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;窗口（window）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面板（pane）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;tmux使用c/s架构，tmux命令启动tmux服务器，一个tmux服务有多个session，
每个session就是tmux管理下的伪终端集合，一个session有多个window与之关联，
每个window就是一个伪终端，占据整个屏幕，一个window可以被分割成多个pane。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tmux安装和配置&#34;&gt;tmux安装和配置&lt;/h1&gt;
&lt;p&gt;tmux依赖libevent和ncurses库。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://libevent.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://libevent.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo yum install libevent-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://invisible-island.net/ncurses/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://invisible-island.net/ncurses/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo yum install ncurese-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://tmux.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://tmux.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install tmux
sudo yum install tmux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用户配置文件： ~/.tmux.conf&lt;/p&gt;
&lt;p&gt;系统配置文件： /etc/tmux.conf&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tmux相关项目&#34;&gt;tmux相关项目&lt;/h1&gt;
&lt;h2 id=&#34;tpm&#34;&gt;TPM&lt;/h2&gt;
&lt;p&gt;Tmux Plugins Manager.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/tmux-plugins/tpm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/tmux-plugins/tpm&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tmux用法&#34;&gt;tmux用法&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;man tmux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;开启tmux：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;退出tmux：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exit
ctrl + d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;列出tmux会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tmux快捷键&#34;&gt;tmux快捷键&lt;/h2&gt;
&lt;p&gt;tmux的prefix是ctrl-b&lt;/p&gt;
&lt;p&gt;按下ctrl-b然后松开，通知tmux下面的按键是快捷键。&lt;/p&gt;
&lt;p&gt;查看所有快捷键：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + ?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示时间：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + t
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;session操作&#34;&gt;session操作&lt;/h2&gt;
&lt;p&gt;交互式选择一个session:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;选择一个session来detach：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;detach当前session:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重命名当前的session：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + $
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;window操作&#34;&gt;window操作&lt;/h2&gt;
&lt;p&gt;交互式选择一个window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + w
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建一个新window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关闭当前window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;切换到上一个window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;切换到下一个window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;移到之前选中的window：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用window号切换window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + [number]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重命名window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + ,
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pane操作&#34;&gt;pane操作&lt;/h2&gt;
&lt;p&gt;横向分屏:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + %
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;纵向分屏:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + &amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;选择pane:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + [方向键]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关闭当前pane:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示pane号:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把当前的pane变成一个window：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + !
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;移动到之前的活跃的pane：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;选择当前window的下一个pane：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + o
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tmux使用鼠标和粘贴复制&#34;&gt;tmux使用鼠标和粘贴复制&lt;/h2&gt;
&lt;p&gt;复制：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;shift-鼠标左键
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;粘贴：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;shift-鼠标右键
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;列出所有粘贴缓冲区：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + #
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;交互式选择一个缓冲区的内容粘贴：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + =
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用复制模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + [
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用粘贴模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl-b + ]
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Jaeger</title>
        <link>https://canuxcheng.com/post/tracing_jaeger/</link>
        <pubDate>Wed, 08 Jun 2016 09:46:47 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/tracing_jaeger/</guid>
        <description>&lt;h1 id=&#34;jaeger&#34;&gt;Jaeger&lt;/h1&gt;
&lt;p&gt;一款uber贡献给cncf的微服务tracing监控工具.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jaegertracing.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jaegertracing.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jaegertracing/jaeger&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jaegertracing/jaeger&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;deploy-jaeger-on-k8s&#34;&gt;Deploy Jaeger on K8S&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jaegertracing/jaeger-operator&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jaegertracing/jaeger-operator&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Metrics</title>
        <link>https://canuxcheng.com/post/metrics/</link>
        <pubDate>Wed, 08 Jun 2016 09:46:47 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics/</guid>
        <description>&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;
&lt;p&gt;Tranditional monitoring is for Datacenter, like nagios, zabbix.&lt;/p&gt;
&lt;p&gt;Modern monitoring is for Cloud and Container.&lt;/p&gt;
&lt;p&gt;Modern monitoring based on metrics, logs and tracing.&lt;/p&gt;
&lt;h1 id=&#34;tick-stack&#34;&gt;TICK stack&lt;/h1&gt;
&lt;p&gt;influxdb: tsdb.&lt;/p&gt;
&lt;p&gt;kapacitor: alerting.&lt;/p&gt;
&lt;p&gt;chronograf: GUI.&lt;/p&gt;
&lt;p&gt;telegraf(agent): metrics collector.&lt;/p&gt;
&lt;h1 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;graphing&#34;&gt;Graphing&lt;/h1&gt;
&lt;p&gt;最流行的监控绘图软件是grafana, 支持influxdb,elasticsearch和prometheus.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Monitoring</title>
        <link>https://canuxcheng.com/post/monitoring/</link>
        <pubDate>Wed, 08 Jun 2016 09:46:47 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/monitoring/</guid>
        <description>&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;
&lt;p&gt;Tranditional monitoring is for Datacenter, like nagios, zabbix.&lt;/p&gt;
&lt;p&gt;Modern monitoring is for Cloud and Container.&lt;/p&gt;
&lt;p&gt;Modern monitoring based on metrics, logs and tracing.&lt;/p&gt;
&lt;p&gt;现代的监控系统在DevOps的基础上，除了传统的metrics和logging的采集，还需要tracing应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;metrics&#34;&gt;metrics&lt;/h1&gt;
&lt;h2 id=&#34;tick-stack&#34;&gt;TICK stack&lt;/h2&gt;
&lt;p&gt;influxdb: tsdb.&lt;/p&gt;
&lt;p&gt;kapacitor: alerting.&lt;/p&gt;
&lt;p&gt;chronograf: GUI.&lt;/p&gt;
&lt;p&gt;telegraf(agent): metrics collector.&lt;/p&gt;
&lt;h2 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h2&gt;
&lt;h2 id=&#34;graphing&#34;&gt;Graphing&lt;/h2&gt;
&lt;p&gt;最流行的监控绘图软件是grafana, 支持influxdb,elasticsearch和prometheus.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;
&lt;h2 id=&#34;elk&#34;&gt;ELK&lt;/h2&gt;
&lt;h2 id=&#34;lokigrafana&#34;&gt;Loki+Grafana&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tracing&#34;&gt;Tracing&lt;/h1&gt;
&lt;h2 id=&#34;jeager&#34;&gt;Jeager&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>Sentry</title>
        <link>https://canuxcheng.com/post/tracing_sentry/</link>
        <pubDate>Wed, 08 Jun 2016 09:46:47 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/tracing_sentry/</guid>
        <description>&lt;h1 id=&#34;sentry&#34;&gt;Sentry&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/getsentry/sentry&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/getsentry/sentry&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;deploy-sentry-on-k8s&#34;&gt;Deploy Sentry on K8S&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/getsentry/onpremise&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/getsentry/onpremise&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tracing</title>
        <link>https://canuxcheng.com/post/tracing/</link>
        <pubDate>Wed, 08 Jun 2016 09:46:47 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/tracing/</guid>
        <description>&lt;h1 id=&#34;tracing&#34;&gt;Tracing&lt;/h1&gt;
&lt;p&gt;APM 监控，也叫全链路监控。&lt;/p&gt;
&lt;h1 id=&#34;sentry&#34;&gt;sentry&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/getsentry/sentry&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/getsentry/sentry&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;zipkin&#34;&gt;zipkin&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/openzipkin/zipkin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/openzipkin/zipkin&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;open-telemetry&#34;&gt;open-telemetry&lt;/h1&gt;
&lt;p&gt;opentracing和opencensus 合并成open-telemetry.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/opentracing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/opentracing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/census-instrumentation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/census-instrumentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/open-telemetry&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/open-telemetry&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;jaeger&#34;&gt;jaeger&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jaegertracing/jaeger&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jaegertracing/jaeger&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tivoli</title>
        <link>https://canuxcheng.com/post/metrics_tivoli/</link>
        <pubDate>Wed, 20 Apr 2016 13:57:31 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics_tivoli/</guid>
        <description>&lt;h1 id=&#34;itm&#34;&gt;ITM&lt;/h1&gt;
&lt;p&gt;ITM: IBM Tivoli Monitoring&lt;/p&gt;
&lt;p&gt;是IBM的Cloud &amp;amp; Smart Infrastructure监控解决方案。&lt;/p&gt;
&lt;p&gt;Architecture Overview:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/tivoli.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pic&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;ITM主要由管理组件和可选组件组成。&lt;/p&gt;
&lt;p&gt;Tivoli Management Services:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TEMS&lt;/li&gt;
&lt;li&gt;TEPS&lt;/li&gt;
&lt;li&gt;TEP client&lt;/li&gt;
&lt;li&gt;Historical data collection(warehouse agent)
&lt;ul&gt;
&lt;li&gt;warehouse proxy&lt;/li&gt;
&lt;li&gt;summarization and pruning agent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS agent&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Optional components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dashboard Application Services Hub
&lt;ul&gt;
&lt;li&gt;Tivoli Monitoring dashboards(Infrastructure Management Dashboards for Servers)&lt;/li&gt;
&lt;li&gt;Tivoli Common Reporting&lt;/li&gt;
&lt;li&gt;Tivoli Enterprise Monitoring Automation Server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tivoli Event Synchronization component&lt;/li&gt;
&lt;li&gt;Authorization Policy Components(tivcmd)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.ibm.com/support/knowledgecenter/SSTFXA_6.3.0/com.ibm.itm.doc_6.3/welcome_63.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.ibm.com/support/knowledgecenter/SSTFXA_6.3.0/com.ibm.itm.doc_6.3/welcome_63.htm&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装itm&#34;&gt;安装ITM&lt;/h2&gt;
&lt;p&gt;Windows: C:\IBM\ITM&lt;/p&gt;
&lt;p&gt;Linux/Unix: /opt/IBM/ITM&lt;/p&gt;
&lt;p&gt;分为本地安装和分布式安装。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;需要先为TEPS和TDW安装DB(ODBC/JDBC)。&lt;/p&gt;
&lt;p&gt;DB2&lt;/p&gt;
&lt;p&gt;MSSQL&lt;/p&gt;
&lt;p&gt;Oracle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在windows/linux/unix安装ITM framework&lt;/p&gt;
&lt;p&gt;TEMA&lt;/p&gt;
&lt;p&gt;Warehouse Proxy agent&lt;/p&gt;
&lt;p&gt;Summarization and Pruning agent&lt;/p&gt;
&lt;p&gt;Tivoli performance Analyzer&lt;/p&gt;
&lt;p&gt;TEMS&lt;/p&gt;
&lt;p&gt;TEPS&lt;/p&gt;
&lt;p&gt;TEPD&lt;/p&gt;
&lt;p&gt;TEMAS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装agent&lt;/p&gt;
&lt;p&gt;安装操作系统的agent：&lt;/p&gt;
&lt;p&gt;monitoring agent for your OS。&lt;/p&gt;
&lt;p&gt;安装数据库的agent：&lt;/p&gt;
&lt;p&gt;TEMA/TEMS/TEPS同时勾选DB的agent。&lt;/p&gt;
&lt;p&gt;安装agent builder的agent。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www-933.ibm.com/support/fixcentral/swg/downloadFixes?parent=ibm%2FTivoli&amp;amp;product=ibm/Tivoli/IBM&amp;#43;Tivoli&amp;#43;Monitoring&amp;amp;release=All&amp;amp;platform=All&amp;amp;function=fixId&amp;amp;fixids=6.3.0-TIV-ITM-FP0005&amp;amp;includeRequisites=1&amp;amp;includeSupersedes=0&amp;amp;downloadMethod=http&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www-933.ibm.com/support/fixcentral/swg/downloadFixes?parent=ibm%2FTivoli&amp;product=ibm/Tivoli/IBM+Tivoli+Monitoring&amp;release=All&amp;platform=All&amp;function=fixId&amp;fixids=6.3.0-TIV-ITM-FP0005&amp;includeRequisites=1&amp;includeSupersedes=0&amp;downloadMethod=http&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;tems&#34;&gt;TEMS&lt;/h1&gt;
&lt;p&gt;TEMS:  Tivoli Enterprise Monitoing Server&lt;/p&gt;
&lt;p&gt;TEMS分为remote和hub，remote最后都汇总到hub。&lt;/p&gt;
&lt;p&gt;HTEMS: Hub Tivoli Enterprise Monitoring Server&lt;/p&gt;
&lt;p&gt;RTEMS: Remote Tivoli Enterprise Monitoring Server&lt;/p&gt;
&lt;p&gt;一个TEMS建议管理700个agent&lt;/p&gt;
&lt;h1 id=&#34;tema&#34;&gt;TEMA&lt;/h1&gt;
&lt;p&gt;TEMA: Tivoli Enterprise Monitoring Agent&lt;/p&gt;
&lt;p&gt;安装agent之后通过GUI工具Tivoli Enterprise Monitoring Service来配置和启动agent。&lt;/p&gt;
&lt;p&gt;也可以通过命令行来配置和启动agent。&lt;/p&gt;
&lt;p&gt;agent配置需要指定HTEMS服务器。&lt;/p&gt;
&lt;h2 id=&#34;agentless&#34;&gt;Agentless&lt;/h2&gt;
&lt;p&gt;TEMS -&amp;gt; Agentless server -&amp;gt; servers&lt;/p&gt;
&lt;p&gt;就是用一个中间服务器通过snmp等协议来监控不需要安装agent的被监控服务器。&lt;/p&gt;
&lt;p&gt;一个agentless可以设置10个实例(操作系统)，一个实例可以监控100个节点(被监控服务器)。&lt;/p&gt;
&lt;p&gt;Agentless OS agents:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Agentless Monitoring for AIX OS - SNMP&lt;/li&gt;
&lt;li&gt;Agentless Monitoring for HP-UX OS - SNMP&lt;/li&gt;
&lt;li&gt;Agentless Monitoring for Linux OS - SNMP&lt;/li&gt;
&lt;li&gt;Agentless Monitoring for Solaris OS - SNMP,CIM-XML&lt;/li&gt;
&lt;li&gt;Agentless Monitoring for Windows OS - SNMP,WMI&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;agent&#34;&gt;Agent&lt;/h2&gt;
&lt;p&gt;TEMS -&amp;gt; servers(agent)&lt;/p&gt;
&lt;p&gt;一个agent连2个TEMS,一个primary，一个backup。&lt;/p&gt;
&lt;p&gt;agent分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Operating System agent&lt;/li&gt;
&lt;li&gt;specialized agent&lt;/li&gt;
&lt;li&gt;Application agent&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OS agent：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Unix&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;IBM i5/OS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;specialized agent：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;warehouse proxy agent&lt;/li&gt;
&lt;li&gt;warehouse summarization and pruning agent&lt;/li&gt;
&lt;li&gt;Log file agent&lt;/li&gt;
&lt;li&gt;System p® agents (AIX Premium, CEC Base, HMC Base, VIOS Premium)&lt;/li&gt;
&lt;li&gt;Systems Director base agent&lt;/li&gt;
&lt;li&gt;Tivoli zEnterprise® Agent&lt;/li&gt;
&lt;li&gt;Performance Analyzer&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;tepsdb&#34;&gt;TEPS+DB&lt;/h1&gt;
&lt;p&gt;TEPS: Tivoli Enterprise Portal Server&lt;/p&gt;
&lt;p&gt;使用MTEMS来配置TEPS,添加DB。&lt;/p&gt;
&lt;h1 id=&#34;tepdtep-client&#34;&gt;TEPD(TEP client)&lt;/h1&gt;
&lt;p&gt;TEP -&amp;gt; TEPS&lt;/p&gt;
&lt;p&gt;TEP: Tivoli Enterprise Portal client&lt;/p&gt;
&lt;p&gt;TEP是GUI界面，分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Desktop&lt;/li&gt;
&lt;li&gt;Browser&lt;/li&gt;
&lt;li&gt;JavaWS: java web start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要安装IBM的java，在C:\Program Files\IBM\Java70。&lt;/p&gt;
&lt;p&gt;使用TEP来查看监控结果。&lt;/p&gt;
&lt;p&gt;默认用户是sysadmin, 需要为TEPD指定TEPS服务器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Browser版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; http://&amp;lt;TEPS Server&amp;gt;:15200/cnp.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Desktop版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; http://&amp;lt;TEPS Server&amp;gt;:15200/tep.jnlp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装ITM可以选择安装桌面版,也可以从Java Web Start获取桌面版。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java Web Start版本&lt;/p&gt;
&lt;p&gt;结合了desktop和browser的优点,从web下载，在桌面运行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TEP的结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Navigator view&lt;/p&gt;
&lt;p&gt;Enterprise&lt;/p&gt;
&lt;p&gt;Operating Platform(操作系统类型)&lt;/p&gt;
&lt;p&gt;Node(一台服务器一个节点)&lt;/p&gt;
&lt;p&gt;Agent(一个节点上的agent)&lt;/p&gt;
&lt;p&gt;Situation(一个agent上的situation)&lt;/p&gt;
&lt;p&gt;Event(一个situation有多个event)&lt;/p&gt;
&lt;p&gt;Attribute group(相同的Situation是一个group)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigator workspace&lt;/p&gt;
&lt;p&gt;每个view项目都有一个默认的workspace。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;history-data-collectiontdw&#34;&gt;History data collection(TDW)&lt;/h1&gt;
&lt;p&gt;TDW: Tivoli Data Warehouse&lt;/p&gt;
&lt;p&gt;存储历史数据。支持DB2，Oracle， MSSQL。&lt;/p&gt;
&lt;p&gt;也就是将agent收集的数据存到数据库。&lt;/p&gt;
&lt;h2 id=&#34;warehouse-proxy&#34;&gt;Warehouse Proxy&lt;/h2&gt;
&lt;p&gt;TDW使用该agent从agents收集和加载数据。&lt;/p&gt;
&lt;p&gt;使用MTEMS配置warehouse proxy。&lt;/p&gt;
&lt;h2 id=&#34;summarization-and-pruning-agent&#34;&gt;Summarization and Pruning agent&lt;/h2&gt;
&lt;p&gt;TDW使用该agent控制数据库大小。&lt;/p&gt;
&lt;p&gt;使用MTEMS配置summarization and pruning agent。&lt;/p&gt;
&lt;h1 id=&#34;jazz-for-service-managementvisualization&#34;&gt;Jazz for Service Management(Visualization)&lt;/h1&gt;
&lt;h2 id=&#34;dashboard-application-services-hubdashvisualization-services&#34;&gt;Dashboard Application Services Hub(DASH)(visualization services)&lt;/h2&gt;
&lt;h2 id=&#34;ibm-tivoli-common-reportingreporting-services&#34;&gt;IBM Tivoli Common Reporting(reporting services)&lt;/h2&gt;
&lt;h2 id=&#34;registry-services&#34;&gt;Registry Services&lt;/h2&gt;
&lt;h2 id=&#34;security-services&#34;&gt;Security Services&lt;/h2&gt;
&lt;h2 id=&#34;administration-services&#34;&gt;Administration Services&lt;/h2&gt;
&lt;h2 id=&#34;tivoli-directory-integrator&#34;&gt;Tivoli Directory Integrator&lt;/h2&gt;
&lt;h2 id=&#34;ibm-http-server&#34;&gt;IBM HTTP Server&lt;/h2&gt;
&lt;h2 id=&#34;ibm-websphere-application-server&#34;&gt;IBM WebSphere® Application Server&lt;/h2&gt;
&lt;h2 id=&#34;web-server-plug-ins-for-ibm-websphere-application-server&#34;&gt;Web Server Plug-ins for IBM WebSphere Application Server&lt;/h2&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;management&#34;&gt;Management&lt;/h1&gt;
&lt;p&gt;管理所有组件一般使用GUI叫manage tivoli monitoring services&lt;/p&gt;
&lt;p&gt;windows/linux/unix都可以用GUI。&lt;/p&gt;
&lt;p&gt;也可以使用CLI（命令行）,见后文.&lt;/p&gt;
&lt;p&gt;一般使用GUI来启动、停止和配置组件。&lt;/p&gt;
&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;
&lt;p&gt;Command Line Interface&lt;/p&gt;
&lt;h2 id=&#34;tacmd&#34;&gt;tacmd&lt;/h2&gt;
&lt;p&gt;支持windows/linux/unix。&lt;/p&gt;
&lt;p&gt;/opt/IBM/ITM/bin/tacmd&lt;/p&gt;
&lt;p&gt;C:\IBM\ITM\BIN\tacmd&lt;/p&gt;
&lt;p&gt;查看tacmd手册：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./tacmd help
./tacmd ?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;登陆和登出HTEMS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./tacmd login -s [PROTOCOL://]HOST[:PORT] -u [USERNAME] -p [PASSWORD] -t [TIMEOUT]
./tacmd logout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;登陆和登出TEPS：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./tacmd tepsLogin -s [TEPS_HOSTNAME] -u [USERNAME] -p [TEPS_PASSWORD] -t [TIMEOUT] -i [IGNORE]
./tacmd tepsLogout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;管理agent：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./tacmd startAgent/stopAgent/restartAgent/viewAgent/updateAgent ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;刷新Netcool/OMNIbus：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./tacmd refreshTECinfo {-t|--type} {eif|maps|attr|all}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;itmcmd&#34;&gt;itmcmd&lt;/h2&gt;
&lt;p&gt;用于Linux/Unix系统的命令&lt;/p&gt;
&lt;p&gt;/opt/IBM/ITM/bin/itmcmd&lt;/p&gt;
&lt;p&gt;查看itmcmd手册：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./itmcmd help
./itmcmd ?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动或停止TEMS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./itmcmd server [-options] {start|stop} tems_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动或停止agent：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./itmcmd agent [-options] {start|stop} {pc ...|all}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动MTEMS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./itmcmd manage &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tivcmd&#34;&gt;tivcmd&lt;/h2&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;advanced-administration&#34;&gt;Advanced Administration&lt;/h1&gt;
&lt;h2 id=&#34;queriesquery-editor&#34;&gt;Queries(query editor)&lt;/h2&gt;
&lt;p&gt;DB agent -&amp;gt; normal way to get data source from database servers.&lt;/p&gt;
&lt;p&gt;ODBC -&amp;gt; get data source from windows database&lt;/p&gt;
&lt;p&gt;JDBC -&amp;gt; get data source from linux/unix database&lt;/p&gt;
&lt;h2 id=&#34;advanced-link-topics&#34;&gt;Advanced link topics&lt;/h2&gt;
&lt;p&gt;Simple link:&lt;/p&gt;
&lt;p&gt;Just used to navigate portal workspaces without using the navigator.&lt;/p&gt;
&lt;p&gt;Advanced link:&lt;/p&gt;
&lt;p&gt;Can be used to manipulate data that is displayed in the target workspace.&lt;/p&gt;
&lt;h2 id=&#34;advanced-situation-techniquessituation-editor&#34;&gt;Advanced situation techniques(situation editor)&lt;/h2&gt;
&lt;h2 id=&#34;agent-autonomy&#34;&gt;Agent autonomy&lt;/h2&gt;
&lt;h2 id=&#34;policyworkflow-editor&#34;&gt;Policy(workflow editor)&lt;/h2&gt;
&lt;h2 id=&#34;agentless-monitoring&#34;&gt;Agentless monitoring&lt;/h2&gt;
&lt;p&gt;TEPS -&amp;gt; Agentless Monitoring Serve -&amp;gt; Servers&lt;/p&gt;
&lt;h2 id=&#34;agent-managent-servicesams&#34;&gt;Agent Managent Services(AMS)&lt;/h2&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&#34;agent-builder&#34;&gt;Agent Builder&lt;/h1&gt;
&lt;p&gt;IBM Agent Builder agents&lt;/p&gt;
&lt;p&gt;windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Program Files(x86)\IBM\AgentBuilder
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;aix/linux:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/opt/ibm/AgentBuilder
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data source:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JDBC&lt;/li&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;SOAP&lt;/li&gt;
&lt;li&gt;Ping&lt;/li&gt;
&lt;li&gt;Socket&lt;/li&gt;
&lt;li&gt;Java API&lt;/li&gt;
&lt;li&gt;WMI&lt;/li&gt;
&lt;li&gt;Perfmon&lt;/li&gt;
&lt;li&gt;CIM&lt;/li&gt;
&lt;li&gt;SNMP&lt;/li&gt;
&lt;li&gt;JMX&lt;/li&gt;
&lt;li&gt;command return code&lt;/li&gt;
&lt;li&gt;output from a script&lt;/li&gt;
&lt;li&gt;A log file&lt;/li&gt;
&lt;li&gt;AIX Binary Log&lt;/li&gt;
&lt;li&gt;windows event log&lt;/li&gt;
&lt;li&gt;A process&lt;/li&gt;
&lt;li&gt;A Windows service&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;create-agent&#34;&gt;create agent&lt;/h1&gt;
&lt;p&gt;Every agent have a unique produce code.&lt;/p&gt;
&lt;p&gt;Like: k00-k99, k{0-9}{A-Z}.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create the agent in the Agent Builder
agent information
data source
runtime configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install and test the agent
output and install the agent
config and start agent in MTEMS.
confirm agent data
revise and retest as needed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add application support
create in TEP, including queries, workspaces, situations, and take actions.
Import application support into agent in Agent Builder.
Retest the agent and application support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an installation solution.
Create solution install package from the agent.
Create solution install package from the package.
Run the image on the target location.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;install-agent&#34;&gt;install agent&lt;/h1&gt;
&lt;p&gt;Three ways to instal the agent.&lt;/p&gt;
&lt;p&gt;You must install the TEMS and TEPS support on TEMS(HTEMS) and TEPS server.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;generate the agent files in an ITM installation on this machine&lt;/p&gt;
&lt;p&gt;通过GUI快速安装，Agent Builder和ITM（TEMS和TEPS）安装在同一台机器上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generate a solution install package&lt;/p&gt;
&lt;p&gt;创建安装镜像来安装，windows的.exe和linux/unix的.bin。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create a compressed file so that the agent can be installed on another system&lt;/p&gt;
&lt;p&gt;命令行安装。
生成一个.zip和一个.tgz文件。
包括windows的.bat和linux/unix的.sh安装文件&lt;/p&gt;
&lt;p&gt;安装下面三个包(等效方法一）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; InstallIra.bat/.sh itm_install_location [[-h Hub_TEMS_hostname] -u HUB_TEMS_username -p Hub_TEMS_password]
 InstallIra.bat C:\IBM\ITM -h &amp;lt;HTEMS&amp;gt; -u &amp;lt;username&amp;gt; -p &amp;lt;password&amp;gt; # for windows
 ./InstallIra.sh /opt/IBM/ITM -h &amp;lt;HTEMS&amp;gt; -u &amp;lt;username&amp;gt; -p &amp;lt;password&amp;gt; # for linux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在被监控机器安装agent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; installIraAgent.bat/.sh itm_install_location
 installIraAgent.bat C:\IBM\ITM # for windows
 ./installIraAgent.sh /opt/IBM/ITM # for linux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在TEMS(HTEMS)服务器安装对agent的支持：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; installIraAgentTEMS.bat/.sh itm_install_location [[-h Hub_TEMS_hostname] -u HUB_TEMS_username -p Hub_TEMS_password]
 installIraAgentTEMS.bat C:\IBM\ITM # for local HTEMS windows server.
 ./installIraAgentTEMS.sh /opt/IBM/ITM # for local HTEMS linux server.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在TEPS服务器安装对agent的支持：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; installIraAgentTEPS.bat/.sh itm_install_location [[-h TEPS_hostname] -u TEPS_username -p TEPS_password]
 installIraAgentTEPS.bat C:\IBM\ITM # for local TEPS windows server.
 ./installIraAgentTEPS.sh /opt/IBM/ITM # for local TEPS linux server.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;config-agent&#34;&gt;config agent&lt;/h1&gt;
&lt;p&gt;需要为agent指定HTEMS服务器，并重启agent，然后重启TEPD。&lt;/p&gt;
&lt;p&gt;可以通过Tivoli Enterprise Monitoring Service来配置和启动，也可以通过命令行。&lt;/p&gt;
&lt;p&gt;查看所有agent信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/opt/IBM/ITM/bin/cinfo -i # check the productcode and platformCode.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;config agent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./itmcmd config -A productcode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start agent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./tacmd agent start productcode
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;uninstall-agent&#34;&gt;uninstall agent&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;uninstall from commandline.&lt;/p&gt;
&lt;p&gt;windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd ITM_INSTALL/TMAITM6
 cd C:\IBM\ITM\TMAITM6_x64
 kxx_uninstall.vbs ITM_INSTALL
 K&amp;lt;product code&amp;gt;_uninstall.vbs C:\IBM\ITM
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;linux/unix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /opt/IBM/ITM/bin/uninstall.sh [-f] [-i] [-h install_dir] productcode platformCode
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove from TEP client(clear offline entry)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;monitoring-windows-resources&#34;&gt;Monitoring windows resources&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Windows Management Instrumentation(WMI)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows Performance Monitor(Perfmon)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows Event Log&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;monitoring-process-and-command-return-codes&#34;&gt;Monitoring process and command return codes&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Monitoring process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitoring command return code&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;monitoring-custom-data-sources&#34;&gt;Monitoring custom data sources&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Monitoring script output&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitoring log file&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;monitoring-remote-resources&#34;&gt;Monitoring remote resources&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Monitoring SNMP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitoring CIM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Moitoring JMX&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&#34;netcoolomnibus&#34;&gt;Netcool/OMNIbus&lt;/h1&gt;
&lt;p&gt;IBM Tivoli Netcool/OMNIbus&lt;/p&gt;
&lt;p&gt;TEC: Tivoli Enterprise Console, 已经被Netcool/OMNIbus替代。&lt;/p&gt;
&lt;p&gt;windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Program Files(x86)\IBM\NCOhome
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;linux/aix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/opt/IBM/NCOhome
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browser版本需要安装IBM的JRE，在C:\Program Files\IBM\Java70。&lt;/p&gt;
&lt;h1 id=&#34;eif&#34;&gt;EIF&lt;/h1&gt;
&lt;p&gt;EIF: Event Integration Facility&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Development</title>
        <link>https://canuxcheng.com/post/devops_dev/</link>
        <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_dev/</guid>
        <description>&lt;h1 id=&#34;development&#34;&gt;Development&lt;/h1&gt;
&lt;p&gt;开发相关的工具&lt;/p&gt;
&lt;p&gt;传统的软件开发采用的是瀑布式开发流程．&lt;/p&gt;
&lt;p&gt;现代的软件开发采用的是敏捷开发流程(Agile development).&lt;/p&gt;
&lt;p&gt;Alpha: inner test version.&lt;/p&gt;
&lt;p&gt;Beta: outer test version.&lt;/p&gt;
&lt;p&gt;RC: release candidate. 最终版本之前的最后一个版本．也叫gamma.&lt;/p&gt;
&lt;p&gt;RTM: release to manufacture, 最终版&lt;/p&gt;
&lt;p&gt;GA: generally avaliable. stable/production.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;怎样选择licenses&#34;&gt;怎样选择Licenses&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://choosealicense.com/licenses/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://choosealicense.com/licenses/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://choosealicense.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://choosealicense.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/license.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pic&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;semver&#34;&gt;semver&lt;/h1&gt;
&lt;p&gt;语义化版本．&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://semver.org/lang/zh-CN/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://semver.org/lang/zh-CN/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mojombo/semver&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/mojombo/semver&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;主版本号.次版本号.修订号
Major.Minor.Patch

Major: 做了不兼容的API修改
Minor: 做了向下兼容的功能性新增
Patch: 做了向下兼容的问题修正
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;文档阅读工具&#34;&gt;文档阅读工具&lt;/h1&gt;
&lt;h2 id=&#34;zeal&#34;&gt;zeal&lt;/h2&gt;
&lt;h2 id=&#34;dash&#34;&gt;dash&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cookiecutter&#34;&gt;cookiecutter&lt;/h1&gt;
&lt;p&gt;一个快速建立工程模板的命令行工具．&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/audreyr/cookiecutter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/audreyr/cookiecutter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/audreyr/cookiecutter-pypackage&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/audreyr/cookiecutter-pypackage&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo -E pip install cookiecutter
# 创建python项目
$cookiecutter https://github.com/audreyr/cookiecutter-pypackage.git
# 创建django格式的python项目
$cookiecutter https://github.com/pydanny/cookiecutter-django
# 创建openstack格式的python项目
$cookiecutter https://git.openstack.org/openstack-dev/cookiecutter.git
$cookiecutter https://github.com/openstack-dev/cookiecutter.git
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;bumpversion&#34;&gt;bumpversion&lt;/h1&gt;
&lt;p&gt;版本管理工具&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/peritus/bumpversion&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/peritus/bumpversion&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo -E pip install bumpversion
# put config in setup.cfg
[bumpversion]
current_version = 1.2.0
files = pymonitoringplugins/__init__.py
$bumpversion major/minor/patch --commit # commit新版本
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>DevOps</title>
        <link>https://canuxcheng.com/post/devops/</link>
        <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops/</guid>
        <description>&lt;h1 id=&#34;devops&#34;&gt;DevOps&lt;/h1&gt;
&lt;p&gt;DevOps包括ChatOps, 敏捷开发，持续集成,持续交付,持续发布/部署，QA(自动化测试），智能监控和日志管理等内容．&lt;/p&gt;
&lt;p&gt;DevOps涉及到三个部门：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Development&lt;/li&gt;
&lt;li&gt;Operations&lt;/li&gt;
&lt;li&gt;Quality Assurance&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ci&#34;&gt;CI&lt;/h1&gt;
&lt;p&gt;Continuous Integration.&lt;/p&gt;
&lt;p&gt;持续集成包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译代码.&lt;/li&gt;
&lt;li&gt;静态代码分析.&lt;/li&gt;
&lt;li&gt;自动化测试，例如selenium.&lt;/li&gt;
&lt;li&gt;代码覆盖率分析.&lt;/li&gt;
&lt;li&gt;构建，例如docker.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cd&#34;&gt;CD&lt;/h1&gt;
&lt;p&gt;Continuous Delivery.&lt;/p&gt;
&lt;p&gt;持续交付包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将通过测试的代码部署到Staging.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;continuous-releasedeploy&#34;&gt;Continuous Release/Deploy&lt;/h1&gt;
&lt;p&gt;持续部署/发布包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将通过评审的交付代码部署到Production.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cicd的工具&#34;&gt;CI/CD的工具&lt;/h1&gt;
&lt;p&gt;持续集成和部署&lt;/p&gt;
&lt;h2 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h2&gt;
&lt;h2 id=&#34;travis-ci&#34;&gt;travis CI&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://travis-ci.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://travis-ci.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;travis CI是基于github的CI工具, 部署代码然后运行测试代码.&lt;/p&gt;
&lt;p&gt;在github项目添加.travis.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;language: python
python:
  - &amp;quot;2.7&amp;quot;
install:
  - pip install -r requirements.txt
  - pip install coveralls
script:
  - coverage run --source=pymonitoringplugins setup.py test
after_success:
  - coveralls
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;circleci&#34;&gt;circleci&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://circleci.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://circleci.com/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;coverage的工具&#34;&gt;coverage的工具&lt;/h1&gt;
&lt;p&gt;统计单元测试的覆盖率&lt;/p&gt;
&lt;h2 id=&#34;coveralls&#34;&gt;coveralls&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://coveralls.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://coveralls.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;codecov&#34;&gt;codecov&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://codecov.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://codecov.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;stackstorm&#34;&gt;stackstorm&lt;/h1&gt;
&lt;p&gt;StackStorm is a platform for integration and automation across services and tools, taking actions in response to events.&lt;/p&gt;
&lt;p&gt;For DevOps and ChatOps.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/StackStorm/st2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/StackStorm/st2&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;drone&#34;&gt;Drone&lt;/h1&gt;
&lt;p&gt;Drone is a Continuous Delivery platform built on Docker, written in Go&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/drone/drone&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/drone/drone&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;supervisor&#34;&gt;supervisor&lt;/h1&gt;
&lt;p&gt;Supervisor process control system for UNIX/Linux.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Supervisor/supervisor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Supervisor/supervisor&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install supervisor
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;redmine&#34;&gt;redmine&lt;/h1&gt;
&lt;p&gt;ruby开发的项目管理工具,集成bug和wiki工具．&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;dokuwiki&#34;&gt;dokuwiki&lt;/h1&gt;
&lt;p&gt;php开发的wiki管理工具&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;atlassian&#34;&gt;Atlassian&lt;/h1&gt;
&lt;p&gt;Jira for Porject Management.&lt;/p&gt;
&lt;p&gt;Bitbucket for Source code management.&lt;/p&gt;
&lt;p&gt;Bamboo for CI/CD.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;bugzilla&#34;&gt;bugzilla&lt;/h1&gt;
&lt;p&gt;perl开发的bug追踪系统．&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;errbot&#34;&gt;errbot&lt;/h1&gt;
&lt;p&gt;python开发的ChatOps工具．&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/errbotio/errbot&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/errbotio/errbot&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;zulip&#34;&gt;zulip&lt;/h1&gt;
&lt;p&gt;团队聊天工具介绍&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/zulip/zulip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/zulip/zulip&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Gitlab</title>
        <link>https://canuxcheng.com/post/devops_gitlab/</link>
        <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_gitlab/</guid>
        <description>&lt;h1 id=&#34;gitlab&#34;&gt;Gitlab&lt;/h1&gt;
&lt;p&gt;gitlab是开源的有web界面的git服务器．&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://about.gitlab.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://about.gitlab.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装gitlab:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install -y curl openssh-server ca-certificates
sudo apt-get install -y postfix
curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
sudo EXTERNAL_URL=&amp;quot;http://gitlab.example.com&amp;quot; apt-get install gitlab-ce
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/gitlab/gitlab.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;升级gitlab:&lt;/p&gt;
&lt;p&gt;需要先升级到下个major版本的最后一个稳定版.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;current:   9.4.7
patch: gitlab-ce=9.5.10
patch: gitlab-ce_10.8.7
patch: gitlab-ce=11.11.8
patch: gitlab-ce=12.0.12
target: 12.10.14
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;runner:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#sudo curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
sudo chmod +x /usr/local/bin/gitlab-runner
sudo gitlab-runner install --user=canux --working-directory=/home/canux/gitlab
sudo gitlab-runner register
sudo gitlab-runner start
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;
&lt;p&gt;备份：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 修改备份路径：gitlab_rails[&#39;backup_path&#39;] = &amp;quot;/var/opt/gitlab/backups&amp;quot;
# gitlab-rake gitlab:backup:create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新加载配置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# gitlab-ctl restart/start/stop
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Jenkins</title>
        <link>https://canuxcheng.com/post/devops_jenkins/</link>
        <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_jenkins/</guid>
        <description>&lt;h1 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h1&gt;
&lt;p&gt;Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks such as building, testing, and deploying software.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jenkinsci/jenkins&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jenkinsci/jenkins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装好Jenkins后安装需要的插件．&lt;/p&gt;
&lt;p&gt;安装jenkins:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# download jenkins.war and install java8.
$ java -jar jenkins.war --httpPort=8080
$ firefox http://localhost:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置开机自动启动，不用每次从终端启动:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim /etc/systemd/system/jenkins.service
$ systemctl daemon-reload
$ systemctl enable jenkins.service
$ systemctl start jenkins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;jinkens主目录:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 默认主目录在/home/canux/.jenkins
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nodes&#34;&gt;nodes&lt;/h1&gt;
&lt;p&gt;添加节点需要安装和master版本一样的java.&lt;/p&gt;
&lt;p&gt;on jenkins agent:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;install java.&lt;/li&gt;
&lt;li&gt;create folder and grant permission. (/home/jenkins)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;on jenkins:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create credential and node.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;plugins&#34;&gt;plugins&lt;/h1&gt;
&lt;h2 id=&#34;thinbackup&#34;&gt;thinbackup&lt;/h2&gt;
&lt;p&gt;备份插件，主要备份jenkins主目录.&lt;/p&gt;
&lt;h2 id=&#34;pipeline&#34;&gt;pipeline&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jenkinsci/pipeline-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jenkinsci/pipeline-plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用pipeline需要先安装pipeline插件.&lt;/p&gt;
&lt;p&gt;pipeline是groovy语法的jenkins的DSL.&lt;/p&gt;
&lt;h2 id=&#34;blueocean&#34;&gt;blueocean&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jenkinsci/blueocean-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jenkinsci/blueocean-plugin&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;git-plugin&#34;&gt;git plugin&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jenkinsci/git-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jenkinsci/git-plugin&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;docker-plugin&#34;&gt;docker plugin&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jenkinsci/docker-workflow-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jenkinsci/docker-workflow-plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.cloudbees.com/docs/admin-resources/latest/plugins/docker-workflow&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.cloudbees.com/docs/admin-resources/latest/plugins/docker-workflow&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;k8s&#34;&gt;k8s&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jenkinsci/kubernetes-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jenkinsci/kubernetes-plugin&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;docker&#34;&gt;docker&lt;/h1&gt;
&lt;p&gt;在docker上执行流水线&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;agent {
    docker {
        image &#39;maven:3-alpine&#39;
        label &#39;my-defined-label&#39;
        args  &#39;-v /tmp:/tmp&#39;
    }
}

agent {
    // Equivalent to &amp;quot;docker build -f Dockerfile.build --build-arg version=1.0.2 ./build/
    dockerfile {
        filename &#39;Dockerfile.build&#39;
        dir &#39;build&#39;
        label &#39;my-defined-label&#39;
        additionalBuildArgs  &#39;--build-arg version=1.0.2&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Operations</title>
        <link>https://canuxcheng.com/post/devops_ops/</link>
        <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_ops/</guid>
        <description>&lt;h1 id=&#34;operations&#34;&gt;Operations&lt;/h1&gt;
&lt;p&gt;运维相关的工具．&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;批量配置管理&#34;&gt;批量配置管理&lt;/h1&gt;
&lt;h2 id=&#34;puppet&#34;&gt;puppet&lt;/h2&gt;
&lt;h2 id=&#34;chef&#34;&gt;chef&lt;/h2&gt;
&lt;h2 id=&#34;salt&#34;&gt;salt&lt;/h2&gt;
&lt;h2 id=&#34;ansible&#34;&gt;ansible&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;密码管理工具&#34;&gt;密码管理工具&lt;/h1&gt;
&lt;h2 id=&#34;keepass&#34;&gt;keepass&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://keepass.info/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://keepass.info/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;keepassx&#34;&gt;KeePassX&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.keepassx.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.keepassx.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/keepassx/keepassx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/keepassx/keepassx&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Agile</title>
        <link>https://canuxcheng.com/post/devops_agile/</link>
        <pubDate>Fri, 15 Apr 2016 09:41:39 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_agile/</guid>
        <description>&lt;h1 id=&#34;agile-methodologies&#34;&gt;Agile methodologies&lt;/h1&gt;
&lt;p&gt;Agile的具体方法有Scrum, XP和kanban.&lt;/p&gt;
&lt;p&gt;ThoughtWorks公司的Martin Fowler提出的敏捷方法．&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;scrum&#34;&gt;Scrum&lt;/h1&gt;
&lt;p&gt;Scrum方法由Ken Schwaber和Jeff Sutherland 提出.&lt;/p&gt;
&lt;p&gt;scrum是一个用于开发和维护复杂产品的框架，是一个增量的，迭代的开发过程．&lt;/p&gt;
&lt;p&gt;sprint: 一个短的迭代周期．一般２到４周．&lt;/p&gt;
&lt;p&gt;backlog: 按商业价值排序的需求列表．&lt;/p&gt;
&lt;h2 id=&#34;scrum框架的三个角色&#34;&gt;scrum框架的三个角色&lt;/h2&gt;
&lt;p&gt;product owner: 产品负责人&lt;/p&gt;
&lt;p&gt;scrum master: 敏捷教练和领导者&lt;/p&gt;
&lt;p&gt;scrum team：developer&lt;/p&gt;
&lt;h2 id=&#34;scrum框架的三个工件&#34;&gt;scrum框架的三个工件&lt;/h2&gt;
&lt;p&gt;Product backlog: 整个产品待开发需求列表&lt;/p&gt;
&lt;p&gt;sprint backlog: 一次迭代的待开发需求列表&lt;/p&gt;
&lt;p&gt;increment: 产品增量&lt;/p&gt;
&lt;h2 id=&#34;scrum框架的五个事件&#34;&gt;scrum框架的五个事件&lt;/h2&gt;
&lt;p&gt;sprint planning meeting: sprint计划会议&lt;/p&gt;
&lt;p&gt;Daily Scrum Meeting/DSM: 每日站立会议&lt;/p&gt;
&lt;p&gt;sprint review meeting: sprint评审会议&lt;/p&gt;
&lt;p&gt;sprint retrospective meeting: sprint回顾会议&lt;/p&gt;
&lt;p&gt;product backlog refinement: 产品backlog梳理会议&lt;/p&gt;
&lt;h2 id=&#34;scrum框架的五个价值观&#34;&gt;scrum框架的五个价值观&lt;/h2&gt;
&lt;p&gt;承诺&lt;/p&gt;
&lt;p&gt;专注&lt;/p&gt;
&lt;p&gt;开放&lt;/p&gt;
&lt;p&gt;尊重&lt;/p&gt;
&lt;p&gt;勇气&lt;/p&gt;
&lt;h2 id=&#34;scrum框架的四大支柱&#34;&gt;scrum框架的四大支柱&lt;/h2&gt;
&lt;p&gt;迭代开发&lt;/p&gt;
&lt;p&gt;增量交付&lt;/p&gt;
&lt;p&gt;自组织团队&lt;/p&gt;
&lt;p&gt;高优先级的需求驱动&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;xp&#34;&gt;XP&lt;/h1&gt;
&lt;p&gt;Extreme Programming&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Ansible</title>
        <link>https://canuxcheng.com/post/devops_ansible/</link>
        <pubDate>Fri, 15 Apr 2016 09:41:39 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_ansible/</guid>
        <description>&lt;h1 id=&#34;ansible&#34;&gt;Ansible&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ansible/ansible&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ansible/ansible&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.ansible.com.cn/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.ansible.com.cn/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ansible通过SSH来远程管理Linux/Unix机器．&lt;/p&gt;
&lt;p&gt;ansible通过winrm+powershell来远程管理Windows机器．&lt;/p&gt;
&lt;p&gt;安装:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo pip install ansible
$ sudo apt-get install ansible
$ sudo yum install ansible

$ brew install ansible sshpass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;p&gt;参考Network-SSH实现从controller到所有node的无密码登陆&lt;/p&gt;
&lt;p&gt;配置文件执行顺序:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ANSIBLE_CONFIG
ansible.cfg
.ansible.cfg
/etc/ansible/ansible.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;手动配置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/ansible/ansible.cfg
[defaults]
ask_pass = False
host_key_checking = False
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ansible命令&#34;&gt;ansible命令&lt;/h2&gt;
&lt;p&gt;ansible运行命令的两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ad-hoc相当于直接运行shell命令&lt;/li&gt;
&lt;li&gt;playbooks相当于运行shell脚本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ansible:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible group1:group1:group3/all  -i inventory  ......

$ansible --help
-m MODULE_NAME, --module-name=MODULE_NAME # 执行模块，默认是command
-M MODULE_PATH, --module-path=MODULE_PATH # 指定模块的路径
-a MODULE_ARGS, --args=MODULE_ARGS # 模块的参数
-i INVENTORY, --inventory INVENTORY # 默认/etc/ansible/hosts, 需要指定hosts分组
-f FORKS, --forks=FORKS # 指定并发进程的数量
-C, --check
-D, --diff
-l SUBSET, --limit=SUBSET
--syntax-check
--list-hosts
-v, --verbose # -v, -vvv, -vvvv

# 提权选项
-b, --become
--become-method=BECOME_METHOD # sudo(default)/su/pbrun/pfexec/runas/doas
--become-user=BECOME_USER # root(default)
-K, --ask-become-pass

# 连接选项
-u REMOTE_USER
--ssh-common-args
--ssh-extra-args
-T TIMEOUT # default 10s
-K, --ask-pass
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;inventory&#34;&gt;inventory&lt;/h2&gt;
&lt;p&gt;inventory包括主机和分组,以及主机变量和分组变量. 默认是&lt;code&gt;/etc/ansible/hosts&lt;/code&gt;文件.&lt;/p&gt;
&lt;p&gt;可以是ini格式，也可以是yaml格式.&lt;/p&gt;
&lt;p&gt;可以是一个文件，可以是多个文件，也可以是一个目录.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible all -i inventory/folder/ ......
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ini格式:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义主机和主机变量
[host1]
node1 
ansible_connection=ssh 
ansible_host=host 
ansible_port=port 
ansible_user=user 
ansible_ssh_pass=password

定义分组和分组变量
[group1]
node1
node2
[group1:vars]
ansible_connection=local/smart/ssh/paramiko
ansible_host=
ansible_port=
ansible_user=
ansible_ssh_pass=
ansible_ssh_common_args=
ansible_ssh_extra_args=
ansible_become=
ansible_become_method=
ansible_become_user=
ansible_become_pass=
ansible_become_exe=
ansible_become_flags=

定义分组的分组, children是固定写法
[big-group:children]
group1
group2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;yaml:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;all:
  hosts:    # hosts, 定义主机和主机变量
    node1:
      ansible_host:
      ansible_port:
      ansible_user:
      ansible_ssh_pass: &amp;quot;${{ ansible_ssh_pass }}&amp;quot;    # use ansible-vault
  children:    # children, 定义分组和分组变量
    production:
      hosts:
        node1:
        node2:
      vars:
        env: prod
    staging:
      hosts:
        node3:
        node4:
      vars:
        env: staging
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;module&#34;&gt;module&lt;/h2&gt;
&lt;p&gt;module也就是所说的task plugins/library plugins.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-doc -l/--list  #　查看所有已经安装的模块
$ ansible-doc apt # 查看apt模块的文档
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;内置的模块&#34;&gt;内置的模块&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-docs -l | grep &amp;quot;ansible.builtin&amp;quot;

ping
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command # 默认模块，用于在远程机器上执行命令
shell # 和command相同，只是该模块支持管道和特殊字符，一般用来执行脚本和复杂命令
raw
expect
script
telnet
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;files modules:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;copy src dest mode ...
synchronize src dest ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;package modules:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt name/deb state=present/absent/latest/build-dep update_cache autoclean autoremove
apt_repository repo state=present/absent
apt_rpm pkg state=present/absent
yum name state=present/absent/latest/installed/removed
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;adhoc&#34;&gt;adhoc&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ ansible group -m &amp;lt;module&amp;gt; -a &amp;lt;args&amp;gt; ...
$ ansible all -i inventory.yml -m ping  -e &amp;quot;@vault.yml&amp;quot; --ask-vault-pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible group -m copy -a &amp;quot;src=https://canuxcheng.com/sr dest=/dest mode=0655&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ansible-playbooks&#34;&gt;ansible-playbooks&lt;/h2&gt;
&lt;p&gt;playbook的格式是YAML.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-playbook -i inventory playbook.yaml -K -vvv &amp;gt; output.txt
$ ansible-playbook -i inventory.yml playbook.yml -e &amp;quot;@vault.yml&amp;quot; --ask-vault-pass
$ ansible-playbook -i inventory.yml playbook.yml -e &amp;quot;@vault.yml&amp;quot; --vault-password-file ~/.vault_pass.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;playbook:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: install
  hosts: host-or-group
  become: true
  vars:
    var1: value1
    var2: value2
  tasks:
  - name: &amp;quot;{{ var1 }}&amp;quot;
    module: args
    debug:
      msg: &amp;quot;This is a debug message&amp;quot;
  - name: &amp;quot;{{ var2 }}&amp;quot;
    module: args
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;variables:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;register: var   # 用var来存储task的结果,查看不同模块的返回值．
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;become:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;become: true
become_user: root
become_method: sudo
become_flags:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;debug:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;strategy: debug
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ansible-vault&#34;&gt;ansible-vault&lt;/h2&gt;
&lt;p&gt;ansible-vault用于加密敏感数据，比如密码等.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-vault create vault.yml
$ ansible-vault edit vault.yml
$ ansible-vault view vault.yml
$ ansible-vault encrypt vault.yml
$ ansible-vault decrypt vault.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ansible-inventory&#34;&gt;ansible-inventory&lt;/h2&gt;
&lt;p&gt;ansible-inventory用于查看inventory的内容.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-inventory --list -i inventory.yml
$ ansible-inventory --graph -i inventory.yml

$ ansible-inventory --host host1 -i inventory.yml # 查看主机的详细信息
$ ansible-inventory --tree -i inventory.yml # 查看分组树状图

$ ansible-inventory --export -i inventory.yml # 导出inventory到标准输出
$ ansible-inventory --validate -i inventory.yml # 验证inventory文件的语法
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ansible-config&#34;&gt;ansible-config&lt;/h2&gt;
&lt;p&gt;ansible-config用于查看和管理ansible的配置.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-config view # 查看当前配置
$ ansible-config dump --only-changed # 查看修改过的配置
$ ansible-config list --type=defaults # 列出所有默认配置
$ ansible-config list --type=privilege # 列出特权配置
$ ansible-config list --type=all # 列出所有配置

$ ansible-config init --disabled &amp;gt; ansible.cfg # 初始化一个新的ansible.cfg文件
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ansible-pull&#34;&gt;ansible-pull&lt;/h2&gt;
&lt;p&gt;ansible-pull用于从远程仓库拉取playbook并执行.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-pull -U &amp;lt;repo_url&amp;gt; -i inventory.yml playbook.yml

-U, --url &amp;lt;repo_url&amp;gt; # 指定远程仓库的URL
-i, --inventory &amp;lt;inventory&amp;gt; # 指定inventory文件
-d, --directory &amp;lt;directory&amp;gt; # 指定工作目录
-C, --checkout &amp;lt;branch&amp;gt; # 指定分支
-c, --clean # 清理工作目录
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ansible-console&#34;&gt;ansible-console&lt;/h2&gt;
&lt;p&gt;ansible-console是一个交互式的命令行界面，可以执行ansible命令和playbook.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-console -i inventory.yml

-i, --inventory &amp;lt;inventory&amp;gt; # 指定inventory文件
-c, --connection &amp;lt;connection&amp;gt; # 指定连接方式，默认是ssh
-u, --user &amp;lt;user&amp;gt; # 指定远程用户
-k, --ask-pass # 提示输入SSH密码
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ansible-galaxy&#34;&gt;ansible-galaxy&lt;/h2&gt;
&lt;p&gt;ansible-galaxy用于管理Ansible的角色和集合.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-galaxy install &amp;lt;role_name&amp;gt; # 安装角色
$ ansible-galaxy remove &amp;lt;role_name&amp;gt; # 卸载角色
$ ansible-galaxy list # 列出已安装的角色
$ ansible-galaxy init &amp;lt;role_name&amp;gt; # 初始化一个新的角色

$ ansible-galaxy collection install &amp;lt;collection_name&amp;gt; # 安装集合
$ ansible-galaxy collection remove &amp;lt;collection_name&amp;gt; # 卸载集合
$ ansible-galaxy collection list # 列出已安装的集合
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Terraform</title>
        <link>https://canuxcheng.com/post/devops_terraform/</link>
        <pubDate>Fri, 15 Apr 2016 09:41:39 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_terraform/</guid>
        <description>&lt;h1 id=&#34;terraform&#34;&gt;Terraform&lt;/h1&gt;
&lt;p&gt;install:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.hashicorp.com/tutorials/terraform/install-cli&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.hashicorp.com/tutorials/terraform/install-cli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./terraform
phz
cache
rds
vpc
eks: (s3, cluster, karpenter, bank-vaults, argocd, argocd-apps)

./terraform/eks/argocd-apps:
projects
main.tf
provider.tf
variables.tf
external-dns-iam.tf
cert-manager.tf
argocd-image-updater.tf

./manifests
metrics-server
ingress-nginx
external-dns
cert-manager
argocd
argocd-image-updater
argo-rollouts

./helm
argocd (dev.yml, prod.yml)
argocd-image-updater
argo-rollouts
cert-manager
external-dns
ingress-nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;
&lt;p&gt;操作工作目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 初始化目录，会根据配置下载和安装provider.
terraform init

terraform get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;操作tf文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 格式化文件
terraform fmt -recursive

// 验证文件
terraform validate 

// 可以通过终端验证函数.
terraform console
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;操作基础设施:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform plan
terraform plan -out test.tfplan

terraform apply -auto-approve
terraform apply test.tfplan

terraform destroy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检查基础设施:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform show
terraform graph
terraform output
terraform state list/show
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;认证:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform login
terraform logout
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tf&#34;&gt;TF&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.terraform.io/language&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.terraform.io/language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注释:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# comment 
// comment
/* comment */
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;backend-and-state&#34;&gt;backend and state&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.terraform.io/language/settings/backends&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.terraform.io/language/settings/backends&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.terraform.io/language/state&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.terraform.io/language/state&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;provider&#34;&gt;provider&lt;/h3&gt;
&lt;hr&gt;
&lt;h3 id=&#34;data-sources&#34;&gt;data sources&lt;/h3&gt;
&lt;p&gt;data source: 获取服务的参数&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;module&#34;&gt;module&lt;/h3&gt;
&lt;p&gt;管理provider上的模块/服务.定义了input, resource/data source, output的就可以认为是module.&lt;/p&gt;
&lt;h4 id=&#34;meta-arguments&#34;&gt;meta-arguments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;providers&lt;/li&gt;
&lt;li&gt;depends_on&lt;/li&gt;
&lt;li&gt;count&lt;/li&gt;
&lt;li&gt;for_each&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;resources&#34;&gt;resources&lt;/h3&gt;
&lt;p&gt;resources: 创建服务的参数&lt;/p&gt;
&lt;h4 id=&#34;meta-arguments-1&#34;&gt;meta-arguments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;depends_on&lt;/li&gt;
&lt;li&gt;count&lt;/li&gt;
&lt;li&gt;for_each&lt;/li&gt;
&lt;li&gt;provider&lt;/li&gt;
&lt;li&gt;lifecycle&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;provisioner&#34;&gt;provisioner&lt;/h4&gt;
&lt;p&gt;特殊的resource，可以在本地或远程机器做一些准备工作。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;variable&#34;&gt;Variable&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.terraform.io/language/values/variables&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.terraform.io/language/values/variables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;input variable: 输入变量&lt;/p&gt;
&lt;p&gt;local variable: 本地变量&lt;/p&gt;
&lt;p&gt;output variable: 输出参数&lt;/p&gt;
&lt;p&gt;子模块无法引用父模块的local变量， resource属性，input变量。但是可以通过output参数引用。&lt;/p&gt;
&lt;p&gt;父模块无法引用子模块的local变量，resource属性。但是可以通过output参数引用，而且父模块可以通过input变量传值给子模块。&lt;/p&gt;
&lt;h3 id=&#34;表达式&#34;&gt;表达式&lt;/h3&gt;
&lt;h3 id=&#34;函数&#34;&gt;函数&lt;/h3&gt;
&lt;h3 id=&#34;workspace&#34;&gt;workspace&lt;/h3&gt;
&lt;p&gt;多环境构建（development, UAT, production).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform workspace new dev
terraform workspace list
terraform select &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用terraform.workspace作为参数.&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Vault</title>
        <link>https://canuxcheng.com/post/devops_vault/</link>
        <pubDate>Fri, 15 Apr 2016 09:41:39 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_vault/</guid>
        <description>&lt;h1 id=&#34;vault&#34;&gt;Vault&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/hashicorp/vault&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/hashicorp/vault&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.hashicorp.com/tutorials/vault/getting-started-install&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.hashicorp.com/tutorials/vault/getting-started-install&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;
&lt;p&gt;可以通过环境变量或者命令行参数指定server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-address VAULT_ADDR
-namespace VAULT_NAMESPACE
vault [subcommand] -address=&amp;quot;https://server:8200&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 启动vault
$ vault server -config=/etc/vault/config.hcl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;agent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vault agent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;login:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 跟据token登陆.
$ vault login

$vault login -token-only -method=oidc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;operator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// init生成keys和token.
$ vault operator init

// 通过keys  unseal
$ vault operator unseal

// 通过token seal
$ vault operator seal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;auth:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 查看auth
$ vault auth list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;secrets&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 查看secrets engine
$ vault secrets list

// enable kv
$ vault secrets enable -path=&amp;lt;ns&amp;gt;/&amp;lt;name&amp;gt; kv
$ vault secrets enable kv

// disable kv
$ vault secrets disable kv

// 创建一个database engine
vault secrets enable -path &amp;lt;ns&amp;gt;/mysql database
// 创建rabbitmq engine
vault secrets enable -path &amp;lt;ns&amp;gt;/rabbitmq rabbitmq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;policy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 查看policy
$ vault policy list

// 创建policy
$ vault policy write &amp;lt;my-policy&amp;gt; ./my-policy.hcl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;plugin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vault plugin list database
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;read/write/delete/list:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vault read
$ vault write
$ vault write my-secret/my-app my-field=value
$ vault delete
$ vault list
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;api&#34;&gt;API&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.vaultproject.io/api-docs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.vaultproject.io/api-docs&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl --header &amp;quot;X-Vault-Token: TOKEN&amp;quot; https://FQDN/v1/&amp;lt;engine-path&amp;gt;/data/&amp;lt;secret-path&amp;gt;
$ curl --header &amp;quot;X-Vault-Token: TOKEN&amp;quot; https://FQDN/v1/&amp;lt;engine-path&amp;gt;/data/&amp;lt;secret-path&amp;gt;?version=&amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;auth-methods&#34;&gt;auth methods&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.vaultproject.io/docs/auth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.vaultproject.io/docs/auth&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;secrets-engine&#34;&gt;secrets engine&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.vaultproject.io/docs/secrets&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.vaultproject.io/docs/secrets&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vault-pki&#34;&gt;vault PKI&lt;/h1&gt;
&lt;p&gt;通过pki engine来生成和管理证书。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.hashicorp.com/tutorials/vault/pki-engine&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.hashicorp.com/tutorials/vault/pki-engine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;generate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vault write -format=json -namespace=&amp;lt;ns&amp;gt;  &amp;lt;pki_root&amp;gt;/issue/&amp;lt;role&amp;gt; \
common_name=&amp;quot;canuxcheng.com&amp;quot; \
alt_names=&amp;quot;canuxcheng.com,*.canuxcheng.com&amp;quot; \
ttl=8760h \
format=pem/der/pem_bundle \
| tee \
&amp;gt;(jq -r &#39;.data.certificate&#39; &amp;gt; canuxcheng.crt) \
&amp;gt;(jq -r &#39;.data.private_key&#39; &amp;gt; private.key) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;list:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vault list -namespace=&amp;lt;ns&amp;gt; &amp;lt;pki_root&amp;gt;/certs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;verify:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vault read -namespace=iac-phoenix/test it/pki/cert/&amp;lt;sn&amp;gt;

curl -s https://vault.canux.com/v1/&amp;lt;ns&amp;gt;/&amp;lt;pki_root&amp;gt;/cert/&amp;lt;serial-num&amp;gt; | jq -r &#39;.data.certificate&#39; | openssl x509 -in - -noout -text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;revoke:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vault write &amp;lt;ns&amp;gt;/&amp;lt;pki_root&amp;gt;/revoke serial_number=&amp;quot;******&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove expired ca:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vault write &amp;lt;pki_root&amp;gt;/tidy tidy_cert_store=true tidy_revoked_certs=true
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vault--k8s&#34;&gt;vault + k8s&lt;/h1&gt;
&lt;p&gt;vault提供两种方式在k8s中使用secret.&lt;/p&gt;
&lt;h2 id=&#34;vault-sidecar-agent-injector&#34;&gt;Vault Sidecar Agent Injector&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.vaultproject.io/docs/platform/k8s/injector&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.vaultproject.io/docs/platform/k8s/injector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/hashicorp/vault-k8s&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/hashicorp/vault-k8s&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mutating-webhook-of-bank-vaults&#34;&gt;mutating webhook of Bank-Vaults&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://banzaicloud.com/docs/bank-vaults/mutating-webhook/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://banzaicloud.com/docs/bank-vaults/mutating-webhook/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/banzaicloud/bank-vaults&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/banzaicloud/bank-vaults&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://banzaicloud.com/blog/inject-secrets-into-pods-vault-revisited/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://banzaicloud.com/blog/inject-secrets-into-pods-vault-revisited/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;vault-csi-provider&#34;&gt;Vault CSI Provider&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.vaultproject.io/docs/platform/k8s/csi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.vaultproject.io/docs/platform/k8s/csi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes-sigs/secrets-store-csi-driver&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kubernetes-sigs/secrets-store-csi-driver&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git</title>
        <link>https://canuxcheng.com/post/devops_git/</link>
        <pubDate>Sat, 02 Apr 2016 21:11:33 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_git/</guid>
        <description>&lt;h1 id=&#34;git&#34;&gt;Git&lt;/h1&gt;
&lt;p&gt;GIT: 分布式版本控制系统。&lt;/p&gt;
&lt;p&gt;SVN: subversion并发式版本控制系统。&lt;/p&gt;
&lt;p&gt;Mercurial: hg分布式版本控制。&lt;/p&gt;
&lt;p&gt;和git相关的产品：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;github&lt;/li&gt;
&lt;li&gt;bitbucket&lt;/li&gt;
&lt;li&gt;sourceForge&lt;/li&gt;
&lt;li&gt;gitlab&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Git安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install git
$ yum install git
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;git-config-git配置&#34;&gt;git config (Git配置)&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/zh/v2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/book/zh/v2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;git配置文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;/etc/gitconfig 系统级的配置文件，通过git config &amp;ndash;system设置&lt;/li&gt;
&lt;li&gt;~/.gitconfig 用户级的配置文件，通过git config &amp;ndash;global设置&lt;/li&gt;
&lt;li&gt;.git/config 仓库级的配置文件，通过git config &amp;ndash;local设置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;git配置：&lt;/p&gt;
&lt;p&gt;使用git config &amp;ndash;global命令配置,或者直接修改~/.gitconfig文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看帮助
git help config
man git-config
git config --help
git config -l/--list # 查看所有配置
git config --system
git config --global
git config --local
git config --global user.name &amp;quot;your_name&amp;quot;
git config --global user.email &amp;quot;your_email&amp;quot;
git config --global core.editor vim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多配置文件：&lt;/p&gt;
&lt;p&gt;在~/.gitconfig添加include可以调用其它配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[include]
    path = ~/myCode/pydeveloper/etc/git/gitcofig
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;git-remote-git-协议&#34;&gt;git remote (git 协议)&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;git有四个协议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;本地协议file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; file:///path/to/project.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSH协议&lt;/p&gt;
&lt;p&gt;拷贝ssh的公钥后不需要输入用户名和密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ssh://git@github.com/&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git
 git@github.com:&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http协议&lt;/p&gt;
&lt;p&gt;默认需要手动输入远程仓库的用户名和密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; https://github.com/&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git
 # 不用手动输入密码
 https://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@github.com/&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置http代理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; git config --global http.proxy &amp;quot;http://&amp;lt;server&amp;gt;:&amp;lt;port&amp;gt;&amp;quot;
 git config --global http.proxy &amp;quot;https://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;proxy&amp;gt;:&amp;lt;port&amp;gt;&amp;quot;
 git config --global https.proxy &amp;quot;https://&amp;lt;server&amp;gt;:&amp;lt;PORT&amp;gt;&amp;quot;
 # In gitconfig file
 [http]
     proxy = http://&amp;lt;server&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git协议&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; git://git@github.com/&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置git代理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; git config --global core.gitproxy ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设置git协议：&lt;/p&gt;
&lt;p&gt;如果公司的22端口被封，不能SSH到外网，用set-url将协议改成http即可。&lt;/p&gt;
&lt;p&gt;如果使用代理，配置http.proxy即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看帮助
git remote --help
git help remote
man git-remote
git remote -v # 查看远程仓库的详细信息
git remote add [-t &amp;lt;branch&amp;gt;] [-m &amp;lt;master&amp;gt;] [-f] [--[no-]tags] [--mirror=&amp;lt;fetch|push&amp;gt;] &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;
git remote add origin &amp;lt;url&amp;gt; # 给远程仓库origin添加url, 一个仓库可以添加多个url。
git remote rename &amp;lt;oldname&amp;gt; &amp;lt;newname&amp;gt; # 重命名远程仓库
git remote remove/rm &amp;lt;name&amp;gt; # 删除和远程仓库相关的所有信息
git remote set-head
git remote set-branches
git remote [-v | --verbose] show [-n] &amp;lt;name&amp;gt;...
git remote -v show origin # 查看远程仓库origin详细信息
git remote prune
git remote update
git remote set-url [--push] &amp;lt;name&amp;gt; &amp;lt;newurl&amp;gt; [&amp;lt;oldurl&amp;gt;]
git remote set-url origin &amp;lt;newurl&amp;gt; # 修改远程仓库origin的url
git remote set-url --add [--push] &amp;lt;name&amp;gt; &amp;lt;newurl&amp;gt;
git remote set-url --delete [--push] &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;projcetgitignore&#34;&gt;projcet/.gitignore&lt;/h1&gt;
&lt;p&gt;忽略文件&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/github/gitignore&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/github/gitignore&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;projectgitattributes&#34;&gt;project/.gitattributes&lt;/h1&gt;
&lt;p&gt;github显示编程语言&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* linguist-language=Python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/github/linguist&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/github/linguist&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;git相关项目&#34;&gt;git相关项目&lt;/h1&gt;
&lt;h2 id=&#34;gui&#34;&gt;GUI&lt;/h2&gt;
&lt;p&gt;Linux：&lt;/p&gt;
&lt;p&gt;git-gui gitk&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://repo.or.cz/w/git-gui.git/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://repo.or.cz/w/git-gui.git/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install gitk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;windows:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/downloads/guis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/downloads/guis&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-for-windows&#34;&gt;git-for-windows&lt;/h2&gt;
&lt;p&gt;windows的git&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/git-for-windows/git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/git-for-windows/git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;post-git&#34;&gt;post-git&lt;/h2&gt;
&lt;p&gt;powershell的git&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/dahlbyk/posh-git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/dahlbyk/posh-git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-extras&#34;&gt;git-extras&lt;/h2&gt;
&lt;p&gt;GIT utilities &amp;ndash; repo summary, repl, changelog population, author commit percentages and more&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/tj/git-extras&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/tj/git-extras&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo apt-get install git-extras
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;git-sweep&#34;&gt;git-sweep&lt;/h2&gt;
&lt;p&gt;A command-line tool that helps you clean up Git branches that have been merged into master.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/arc90/git-sweep&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/arc90/git-sweep&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo -E pip install git-sweep
$cd git-repo
$git-sweep preview # 查看哪些远程的branch已经merge到master.
$git-sweep cleanup # 删除远程已经merge到master的branch.
$git-sweep cleanup --skip integration, sandbox
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;git-imerge&#34;&gt;git-imerge&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mhagger/git-imerge&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/mhagger/git-imerge&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-standup&#34;&gt;git-standup&lt;/h2&gt;
&lt;p&gt;Recall what you did on the last working day. Psst! or be nosy and find what someone else in your team did ;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kamranahmedse/git-standup&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kamranahmedse/git-standup&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$npm install -g git-standup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;git-lfs&#34;&gt;git-lfs&lt;/h2&gt;
&lt;p&gt;git的大文件管理&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/git-lfs/git-lfs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/git-lfs/git-lfs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;gerrit&#34;&gt;Gerrit&lt;/h2&gt;
&lt;p&gt;Gerrit is a code review and project management tool for Git based projects.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gerrit-review/gerrit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/gerrit-review/gerrit&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;搭建私有git服务器&#34;&gt;搭建私有git服务器&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$sudo groupadd git
$sudo adduser git -g git
$ cd /home/git
$ mkdir src
$ git init --bare src
$ sudo chown -R git:git src
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;gitolite&#34;&gt;gitolite&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sitaramc/gitolite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/sitaramc/gitolite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;gitosis&#34;&gt;gitosis&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/res0nat0r/gitosis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/res0nat0r/gitosis&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;git命令&#34;&gt;Git命令&lt;/h1&gt;
&lt;p&gt;git的结构：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;working directory(工作目录),通过git init初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;staging area(暂存区),通过git add添加index到暂存区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;repository(仓库),通过git commit提交到repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; git help &amp;lt;verb&amp;gt;
 git &amp;lt;verb&amp;gt; --help
 man git-&amp;lt;verb&amp;gt;

 git help -a
 git help -g
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;archive&#34;&gt;archive&lt;/h2&gt;
&lt;p&gt;download one file from git server(github/gitlab/gerrit)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git archive --remote=ssh://user@gerrit.domain.com:port/group/project.git HEAD:path/to file | tar -x
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;init&#34;&gt;init&lt;/h2&gt;
&lt;p&gt;Create an empty Git repository or reinitialize an existing one&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init # 创建一个空repository
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add&#34;&gt;add&lt;/h2&gt;
&lt;p&gt;Add file contents to the index&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .  # 不包括删除的文件
git add -u # 不包括新建的文件
git add -A # 添加working tree下的所有文件到index
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;commit&#34;&gt;commit&lt;/h2&gt;
&lt;p&gt;Record changes to the repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;[1.0.0.0]init repository.&amp;quot;
git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;bisect&#34;&gt;bisect&lt;/h2&gt;
&lt;p&gt;Find by binary search the change that introduced a bug&lt;/p&gt;
&lt;h2 id=&#34;branch&#34;&gt;branch&lt;/h2&gt;
&lt;p&gt;List, create, or delete branches&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch [branch-name]
git branch -d [branch-name] # 删除已经merge到master的分支
git branch -D [branch-name] # 强制删除分支
git branch -m [old-name] [new-name] # 重命名
git branch -M [old-name] [new-name] # 强制重命名
git branch -vv   # 查看上游
git branch --unset-upstream [branch] # 取消上游
git branch -u &amp;lt;origin/branch&amp;gt; [branch] # 设置上游
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;blame&#34;&gt;blame&lt;/h2&gt;
&lt;p&gt;Show what revision and author last modified each line of a file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git blame filename # 查看文件的历史记录
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;checkout&#34;&gt;checkout&lt;/h2&gt;
&lt;p&gt;Checkout a branch or paths to the working tree&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout [branch-name]
git checkout -b [branch-name] [start-point] # 创建并切换到分支
git checkout -B [branch-name] [start-point] # 强制执行

git checkout -- file/path # 撤销工作目录中文件的修改
git checkout [branch-name] -- file/path # 获取远程仓库的文件到当前工作目录

git checkout -b &amp;lt;b-n&amp;gt; tags/v1.0.0 # 基于tag创建branch.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;clone&#34;&gt;clone&lt;/h2&gt;
&lt;p&gt;Clone a repository into a new directory&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone [url]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;diff&#34;&gt;diff&lt;/h2&gt;
&lt;p&gt;Show changes between commits, commit and working tree, etc&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git diff # 查看工作目录变化
git diff --staged # 查看暂存区变化
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fetch&#34;&gt;fetch&lt;/h2&gt;
&lt;p&gt;Download objects and refs from another repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git fetch
git fetch -p
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;grep&#34;&gt;grep&lt;/h2&gt;
&lt;p&gt;Print lines matching a pattern reinitialize an existing one&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git grep [&amp;lt;pathspec&amp;gt;...]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;log&#34;&gt;log&lt;/h2&gt;
&lt;p&gt;Show commit logs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log # 显示commit的log
git log --pretty=format:&#39;%h&#39; -n 1 // 查看commit id.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;merge&#34;&gt;merge&lt;/h2&gt;
&lt;p&gt;merge的5中策略:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resolve&lt;/li&gt;
&lt;li&gt;recursive&lt;/li&gt;
&lt;li&gt;octopus&lt;/li&gt;
&lt;li&gt;ours&lt;/li&gt;
&lt;li&gt;subtree&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Join two or more development histories together&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git merge [branch-name]
git merge --ff # fast-forward,默认直接两个分支合并，不会产生新的commit,看不到开发分支的分叉．
git merge --ff-only
git merge --no-ff # no fast-forward,每次合并会创建新的commit.可以看到开发分支的分叉
git merge --squash
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;mv&#34;&gt;mv&lt;/h2&gt;
&lt;p&gt;Move or rename a file, a directory, or a symlink&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git mv [old] [new] # 重命名暂存区文件
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pull&#34;&gt;pull&lt;/h2&gt;
&lt;p&gt;Fetch from and integrate with another repository or a local branch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;push&#34;&gt;push&lt;/h2&gt;
&lt;p&gt;Update remote refs along with associated objects&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global push.default simple

git push origin --delete &amp;lt;branch&amp;gt;
git push origin :&amp;lt;branch&amp;gt;

git push origin --tags -f # push所有tag
git push origin [tagname] # push单个tag
git push origin --delete tag [tagname]
git push origin :refs/tags/[tagname]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rebase&#34;&gt;rebase&lt;/h2&gt;
&lt;p&gt;Forward-port local commits to the updated upstream head&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase -i [commit] # 修改提交的信息
pick 
reword
edit
squash
fixup 
exec
drop
label
reset
merge
git rebase --continue
git rebase --abort
git rebase --skip
git rebase --edit-todo
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reset&#34;&gt;reset&lt;/h2&gt;
&lt;p&gt;Reset current HEAD to the specified state&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 硬重置, 之后的commit和 修改的文件都没了
git reset --hard [commit] # 全部回退

// 软重置, 之后commit没了，修改的文件还在
git reset --soft [commit]

git reset --mixed [commit]

git reset --merge [commit]

git reset --keep [commit]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rm&#34;&gt;rm&lt;/h2&gt;
&lt;p&gt;Remove files from the working tree and from the index&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rm &amp;lt;file&amp;gt; # 删除工作目录和暂存区的文件
git rm --cached &amp;lt;file&amp;gt; # 不删除工作目录的文件,　只删除暂存区.
git rm -r --cached &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;revert&#34;&gt;revert&lt;/h2&gt;
&lt;p&gt;Revert some existing commits&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git revert [commit] # 撤销一次merge
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reflog&#34;&gt;reflog&lt;/h2&gt;
&lt;p&gt;Manage reflog information&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 查看所有执行过的动作的日志
git reflog show 

git reflog expire

git reflog delete
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;show&#34;&gt;show&lt;/h2&gt;
&lt;p&gt;Show various types of objects&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git show
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;status&#34;&gt;status&lt;/h2&gt;
&lt;p&gt;Show the working tree status tag Create, list, delete or verify a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git status
git status -s # 显示状态的简介信息, 默认是--long

// 查看gitignore忽略了哪些文件。
git status --ignored
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;stash&#34;&gt;stash&lt;/h2&gt;
&lt;p&gt;Stash the changes in a dirty working directory away&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git stash # 暂存当前工作目录
git stash list # 查看暂存列表
git stash show [stash]
git stash pop --index stash@{N} # 恢复暂存区N和工作目录
git stash apply --index stash@{N} # 同上
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tag&#34;&gt;tag&lt;/h2&gt;
&lt;p&gt;Create, list, delete or verify a tag object signed with GPG&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git tag -l # 查看所有本地tag
git tag -d v1.0.0 # 删除本地tag
git tag -a v1.0.0 -m &amp;quot;release 1.0.0.&amp;quot; -f
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;submodule&#34;&gt;submodule&lt;/h2&gt;
&lt;p&gt;Initialize, update or inspect submodules&lt;/p&gt;
&lt;p&gt;会在项目产生.gitmodules文件，而且不被.gitignore忽略，所以不要在URL添加用户名和密码．&lt;/p&gt;
&lt;p&gt;添加子模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// push只会push创建的子模块空目录和.gitmodules文件.
git submodule add &amp;lt;repository&amp;gt; [&amp;lt;path&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;克隆子模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// git clone 只会clone空目录
git submodule init
git submodule update 
// 或者
git clone --recurse-submodules &amp;lt;sub-URL&amp;gt;
// 或者
git clone &amp;lt;URL&amp;gt;
git submodule update --init
// 或者
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;mergetool&#34;&gt;mergetool&lt;/h2&gt;
&lt;p&gt;Run merge conflict resolution tools to resolve merge conflicts.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git mergetool --tool=meld
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;best-prictise&#34;&gt;Best Prictise&lt;/h1&gt;
&lt;p&gt;merge远程tag&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b influxdata-1.5.2 master
git pull https://github.com/influxdata/influxdb.git v1.5.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gitignore忽略文件和目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path/to/file
path/
# 如果已经push：
git rm -r --cached path/to/file
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Vim</title>
        <link>https://canuxcheng.com/post/devops_vim/</link>
        <pubDate>Sat, 02 Apr 2016 21:11:26 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/devops_vim/</guid>
        <description>&lt;h1 id=&#34;vim&#34;&gt;vim&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.vim.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.vim.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/vim/vim&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/vim/vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;类似编辑器:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;emacs&lt;/li&gt;
&lt;li&gt;Atom(github的开源跨平台编辑器，支持插件。)&lt;/li&gt;
&lt;li&gt;VSCode(微软的开源跨平台的编辑器，支持插件。)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;vim安装和配置&#34;&gt;Vim安装和配置&lt;/h1&gt;
&lt;p&gt;查看vim版本和编译信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装vim：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install vim
$ yum install vim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;源码安装vim：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get build-dep vim
$ cd vim/src

$ ./configure \
--with-features=huge \
--with-compiledby=&amp;quot;Canux&amp;quot; \
--enable-multibyte \
--enable-gui=gtk2 \
--enable-gpm \
--prefix=/usr \
--enable-cscope \
--enable-fontset \
--enable-xim \
--enable-fail-if-missing \
--enable-mzschemeinterp \
--enable-perlinterp \
--enable-luainterp \
--enable-tclinterp\
--enable-rubyinterp \
--enable-pythoninterp \
--with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu \
--enable-python3interp \
--with-python3-config-dir=/usr/lib/python3.4/config-3.4m-x86_64-linux-gnu

$ make VIMRUNTIMEDIR=/usr/share/vim/vim74
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vim相关项目&#34;&gt;Vim相关项目&lt;/h1&gt;
&lt;h2 id=&#34;neovim&#34;&gt;neovim&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/neovim/neovim&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/neovim/neovim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vim的升级版，修复了vim的bug，同时集成了许多插件。&lt;/p&gt;
&lt;h2 id=&#34;spacevim&#34;&gt;spacevim&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/SpaceVim/SpaceVim&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/SpaceVim/SpaceVim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更高效的vim.&lt;/p&gt;
&lt;h2 id=&#34;sp13&#34;&gt;sp13&lt;/h2&gt;
&lt;p&gt;分布式vim。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spf13/spf13-vim&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/spf13/spf13-vim&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;vim-galore&#34;&gt;vim-galore&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mhinz/vim-galore&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/mhinz/vim-galore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vim的知识库．&lt;/p&gt;
&lt;h2 id=&#34;vimrc&#34;&gt;vimrc&lt;/h2&gt;
&lt;p&gt;vim的终极配置．&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/amix/vimrc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/amix/vimrc&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vim常见用法和特殊用法&#34;&gt;vim常见用法和特殊用法&lt;/h1&gt;
&lt;p&gt;vim的三种模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;v    # 视觉模式
i    # 插入模式
esc  # 普通模式
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常用命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:    # 进入命令行
:help # 查看帮助
:q
:q!
:qa
:w
:n1, n2 w
:wq
:x

# 常用设置
:set mouse=a # enable mouse
:set list    # 查看tab键
:set nolist
:set nu
:set nonu
:! [shell-command]   # 可以运行外部命令

# 替换
:s/old/new    # 替换第一个
:ns/old/new/g    # 替换行n
:n1,n2s/old/new/g    # 替换n1-n2之间的全部
:%s/old/new/g    # 替换整个文件
:%s/old/new/gc    # 替换整个文件，弹出提示
:%/^/inseart/g    # 行首插入
:%/$/inseart/g    # 行尾插入

# 删除
:g/pattern/d    # 删除匹配的行
:n1,n2g/pattern/d    # 删除n1-n2中匹配的行
:v/pattern/d    # 删除不匹配的行
:n1,n2d    # 删除n1-n2行
:%s/^\s\+//g    # 删除行首空格
:%s/\s\+$//g    # 删除行尾空格
:1,$d    # 删除所有行，包括行号
:%s/^.*$//g    # 清空内容，保留行号
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常用快捷键：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 左右跳转快捷键
n h    # left
n l    # right
0      # 跳转到一行的首字母
^      # 跳转到一行的非空首字母
n $    # 跳转一行的结尾

# 上下跳转快捷键
n k    # up
n j    # down
n G  # 跳转到行号n, 默认最后一行
n gg # 同上，默认第一行

# 文本移动(向前就是向右，向后就是向左)
n w     # 向前移动n个单词
n W     # 向前移动n个空格分割的单词
n e     # 跳转到最后第n个单词
n E     # 跳转到以空格分割的最后地n个单词
n b     # 向后n个单词
n B     # 向后n个单词，以空格分割

# 模式匹配
N  /{pattern}[/[offset]]&amp;lt;CR&amp;gt; # 向后查找N个匹配
N  ?{pattern}[?[offset]]&amp;lt;CR&amp;gt; # 向前查找N个匹配
N n # 向后查看
N N # 向前查看

# 大小写转换
~    # 单个字符相互转换
U    # 转换成大些
u    # 转换成小写
g~~    # 转换当前行大小写
:%s/./\U&amp;amp;/g    # 全文改成大些
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特殊字符处理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看特殊字符，字符编码和二合字母
:digraphs
:h digraph-table
# 直接使用字符编码,插入模式下输入
&amp;lt;ctrl-v&amp;gt; + &amp;lt;dec&amp;gt;
# 使用二合字母，插入模式下输入
&amp;lt;ctrl-k&amp;gt; + &amp;lt;digraph&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vim-plugins-manager&#34;&gt;vim-plugins-manager&lt;/h1&gt;
&lt;p&gt;vim的插件管理器&lt;/p&gt;
&lt;h2 id=&#34;pathogen&#34;&gt;pathogen&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/tpope/vim-pathogen&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/tpope/vim-pathogen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vim的本地管理插件。&lt;/p&gt;
&lt;h2 id=&#34;vundle&#34;&gt;vundle&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/VundleVim/Vundle.vim&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/VundleVim/Vundle.vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vim的在线管理插件。&lt;/p&gt;
&lt;h2 id=&#34;vim-plug&#34;&gt;vim-plug&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/junegunn/vim-plug&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/junegunn/vim-plug&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vundle的迷你版。&lt;/p&gt;
&lt;h2 id=&#34;dein&#34;&gt;dein&lt;/h2&gt;
&lt;p&gt;dein已经取代neobundle, 可以用于vim和neovim。&lt;/p&gt;
&lt;p&gt;旧版本：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Shougo/neobundle.vim&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Shougo/neobundle.vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新版本：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Shougo/dein.vim&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Shougo/dein.vim&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vim-plugins&#34;&gt;vim-plugins&lt;/h1&gt;
&lt;p&gt;vim常用的插件&lt;/p&gt;
&lt;h2 id=&#34;ycm&#34;&gt;YCM&lt;/h2&gt;
&lt;h2 id=&#34;syntastic&#34;&gt;syntastic&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;常用情景&#34;&gt;常用情景&lt;/h1&gt;
&lt;p&gt;vim内部使用sudo保存:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:w !sudo tee %
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Nagios</title>
        <link>https://canuxcheng.com/post/metrics_nagios/</link>
        <pubDate>Fri, 25 Mar 2016 11:15:48 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics_nagios/</guid>
        <description>&lt;h1 id=&#34;nagios&#34;&gt;Nagios&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Nagios is the industry standard in IT infrastructure monitoring&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Nagios offers complete monitoring and alerting for servers, switches, applications, and services.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Nagios官方宣称nagios是IT基础监控的工业标准。&lt;/p&gt;
&lt;p&gt;Nagios提供对服务器，交换机，应用和服务的完整的监控和警报。&lt;/p&gt;
&lt;p&gt;Nagios是无agent的，nagios的plugin通过协议远程获取信息。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nagios.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nagios.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nagios.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nagios.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://exchange.nagios.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://exchange.nagios.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/NagiosEnterprises&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/NagiosEnterprises&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/nagios-plugins&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/nagios-plugins&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nagios安装配置&#34;&gt;Nagios安装配置&lt;/h1&gt;
&lt;h2 id=&#34;nagios发展&#34;&gt;Nagios发展&lt;/h2&gt;
&lt;p&gt;Nagios core 1.0&lt;/p&gt;
&lt;p&gt;Nagios core 2.0&lt;/p&gt;
&lt;p&gt;Nagios core 3.0&lt;/p&gt;
&lt;p&gt;Nagios XI&lt;/p&gt;
&lt;p&gt;Nagios core 4.0&lt;/p&gt;
&lt;p&gt;目前nagios有两大阵营：&lt;/p&gt;
&lt;p&gt;开源解决方案： Nagios core&lt;/p&gt;
&lt;p&gt;商业解决方案： Nagios XI&lt;/p&gt;
&lt;h2 id=&#34;nagios安装配置-1&#34;&gt;Nagios安装配置&lt;/h2&gt;
&lt;p&gt;安装和配置nagios core,plugins,addons参考&lt;/p&gt;
&lt;p&gt;官方文档:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/4/en/toc.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/4/en/toc.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中文文档：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://nagios-cn.sourceforge.net/nagios-cn/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://nagios-cn.sourceforge.net/nagios-cn/index.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nagios开源解决方案&#34;&gt;Nagios开源解决方案&lt;/h1&gt;
&lt;h2 id=&#34;nagios-core&#34;&gt;Nagios core:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Nagios Core is the monitoring and alerting engine that serves as the primary application around which hundreds of Nagios projects are built.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Nagios core是监控和警报的主引擎，围绕它建立了成千上万的项目。
技术栈是c，只能安装在linux/unix系统。
Nagios core只是一个监控套件，本身没有监控功能，需要插件来完成监控。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nagios.org/projects/nagios-core/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nagios.org/projects/nagios-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/NagiosEnterprises/nagioscore&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/NagiosEnterprises/nagioscore&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nagios-plugins&#34;&gt;Nagios plugins:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Efficient, standalone extensions that provide low-level intelligence for monitoring anything and everything with Nagios Core.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Nagios core的监控插件,也就是官方插件,主要是c、shell和perl。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nagios.org/projects/nagios-plugins/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nagios.org/projects/nagios-plugins/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/nagios-plugins/nagios-plugins&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/nagios-plugins/nagios-plugins&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nagios-frontends&#34;&gt;Nagios frontends:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Web interfaces, themes, Windows and Linux interfaces, and mobile apps for Nagios. Change the look and style of Nagios to suite your needs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Nagios frontends包括了 主题,web接口,移动设备接口。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nagios.org/downloads/nagios-core-frontends/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nagios.org/downloads/nagios-core-frontends/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nagios-config-toolsnagios-addons-projects&#34;&gt;Nagios config tools(Nagios addons projects):&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools and GUIs for simplifying Nagios Core configuration.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;nagios core的组件。&lt;/p&gt;
&lt;p&gt;包括Lilac,NagiosQL,NConf,OneCMDB,ignoramus&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nagios.org/projects/nagios-config-tools/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nagios.org/projects/nagios-config-tools/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nagios.org/downloads/nagios-core-addons/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nagios.org/downloads/nagios-core-addons/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/NagiosEnterprises&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/NagiosEnterprises&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nagios-exchange&#34;&gt;Nagios exchange:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Nagios® Exchange is the central place where you&amp;rsquo;ll find all types of Nagios projects - plugins, addons, documentation, extensions, and more. This site is designed for the Nagios Community to share its Nagios creations.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Nagios exchange是nagios的开源宝库。&lt;/p&gt;
&lt;p&gt;包括第三方plugins、addons和docs。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://exchange.nagios.org/https://exchange.nagios.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://exchange.nagios.org/https://exchange.nagios.org/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nagios商业解决方案&#34;&gt;Nagios商业解决方案&lt;/h1&gt;
&lt;h2 id=&#34;nagios-xi&#34;&gt;Nagios XI:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Our most powerful IT infrastructure monitoring and IT monitoring software alerting solution for today’s demanding organizational requirements.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Nagios XI 是现代化的商业监控解决套件。&lt;/p&gt;
&lt;p&gt;Nagios XI 使用nagios core 4.0。&lt;/p&gt;
&lt;p&gt;Nagios XI 架构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/nagiosxi.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pic&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;nagios-network-analyzer&#34;&gt;Nagios network analyzer&lt;/h2&gt;
&lt;h2 id=&#34;nagios-log-server&#34;&gt;Nagios log server&lt;/h2&gt;
&lt;h2 id=&#34;nagios-fusion&#34;&gt;Nagios fusion&lt;/h2&gt;
&lt;h2 id=&#34;nagios-incident-manager&#34;&gt;Nagios incident manager&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nagios命令&#34;&gt;Nagios命令&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;/usr/local/nagios/bin/nagios --help
-v 验证配置文件
-d daemon mode
-W worker mode.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nagios-集中监控&#34;&gt;Nagios 集中监控&lt;/h1&gt;
&lt;h2 id=&#34;本地监控&#34;&gt;本地监控&lt;/h2&gt;
&lt;p&gt;使用nagios core + plugins只能监控本地的linux/unix机器。&lt;/p&gt;
&lt;h2 id=&#34;远程监控&#34;&gt;远程监控&lt;/h2&gt;
&lt;p&gt;使用nagios core + plugins + addons可以监控远程的linux/unix/windows机器。&lt;/p&gt;
&lt;p&gt;NRPE(for linux)/NRPE_NT(for windows)和check_nrpe, 运行远程机器上的插件, 支持windows/unix/linux:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nagios core + check_nrpe &amp;lt;=&amp;gt; NRPE/NRPE_NT + plugins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NSCP和check_nt, 只能使用固定的几个命令查基本属性, 支持windows/linux/unix：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nagios core + check_nt -H &amp;lt;NSCP IP&amp;gt; [-v &amp;lt;command&amp;gt;] &amp;lt;=&amp;gt; NSCP(NSClient++)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NSCP和check_nrpe，可以传自己的命令或插件, 支持windows/linux/unix：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nagios core + check_nrpe -H &amp;lt;NSCP IP&amp;gt; [-c &amp;lt;command/plugins&amp;gt;] [-a &amp;lt;argument list&amp;gt;] &amp;lt;=&amp;gt; NSCP(NSClient++) + plugins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NSCP和NSCA/NRDP,NSCP主动check,然后将结果发送给NSCA/NRDP:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nagios core + NSCA &amp;lt;=&amp;gt; NSCP(NSClient++)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NCPA是python写的跨平台代理, 支持linux/windows/unix：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nagios core + check_ncpa.py &amp;lt;=&amp;gt; NCPA
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nagios-分布式监控&#34;&gt;Nagios 分布式监控&lt;/h1&gt;
&lt;h2 id=&#34;nrdpnscansca-ng&#34;&gt;NRDP/NSCA/NSCA-ng&lt;/h2&gt;
&lt;p&gt;官方推荐，NRDP是NSCA的升级版,提供被动检测,这种方式效率低，稳定性差。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nagios core &amp;lt;- plugins &amp;lt;- NSCA &amp;lt;= send_nsca &amp;lt;- ocsp &amp;lt;- Nagios core &amp;lt;=&amp;gt; Hosts
                               ^
                              ||
                              send_nsca &amp;lt;- ocsp &amp;lt;- Nagios core &amp;lt;=&amp;gt; Hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nagios的组件&#34;&gt;Nagios的组件&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nagios.org/downloads/nagios-core-addons/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nagios.org/downloads/nagios-core-addons/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/NagiosEnterprises&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/NagiosEnterprises&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ndoutilsndoidoutilsido&#34;&gt;NDOUtils(NDO)/IDOUtils(IDO)&lt;/h2&gt;
&lt;p&gt;从nagios导出当前和历史数据到mysql数据库,需要安装数据库。&lt;/p&gt;
&lt;p&gt;相似功能有mk livestatus。&lt;/p&gt;
&lt;p&gt;N * (Nagios core + NDO module) -&amp;gt; TCP/Socket -&amp;gt; NDO2DB daemon -&amp;gt; DB&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/NagiosEnterprises/ndoutils&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/NagiosEnterprises/ndoutils&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nsti&#34;&gt;NSTI&lt;/h2&gt;
&lt;p&gt;Nagios SNMP Trap Interface.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/NagiosEnterprises/nsti&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/NagiosEnterprises/nsti&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;bpi&#34;&gt;BPI&lt;/h2&gt;
&lt;p&gt;Nagios Business Process Intelligence.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/NagiosEnterprises/nagiosbpi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/NagiosEnterprises/nagiosbpi&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;其它组件介绍&#34;&gt;其它组件介绍&lt;/h1&gt;
&lt;h2 id=&#34;nconf&#34;&gt;NCONF&lt;/h2&gt;
&lt;p&gt;nagios的基于web的配置工具。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.nconf.org/dokuwiki/doku.php&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.nconf.org/dokuwiki/doku.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/nconf/nconf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/nconf/nconf&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dnx&#34;&gt;DNX&lt;/h2&gt;
&lt;p&gt;分布式组件。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://dnx.sourceforge.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://dnx.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourceforge.net/projects/dnx/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://sourceforge.net/projects/dnx/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nagiosgraph&#34;&gt;Nagiosgraph&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;nagiosgraph parses output and performance data from Nagios plugins and stores
the data in RRD files. nagiosgraph creates graphs and generates HTML pages with
graphic reports from the data.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;基于RRD，绘制nagios的性能图。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://nagiosgraph.sourceforge.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://nagiosgraph.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourceforge.net/projects/nagiosgraph/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://sourceforge.net/projects/nagiosgraph/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;consol的分布式监控方案&#34;&gt;consol的分布式监控方案&lt;/h1&gt;
&lt;p&gt;一家德国的咨询和解决方案软件公司。&lt;/p&gt;
&lt;p&gt;可以通过 check_MK 的omd来安装。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.consol.de/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.consol.de/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labs.consol.de/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://labs.consol.de/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ConSol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ConSol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要贡献组件：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sni&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/sni&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要贡献插件：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/lausser&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/lausser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/nagios.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pic&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;mod-gearman&#34;&gt;Mod gearman&lt;/h2&gt;
&lt;p&gt;labs consol的分布式监控组件, gearman的worker。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.mod-gearman.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.mod-gearman.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sni/mod_gearman&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/sni/mod_gearman&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ndoutilslivestatus&#34;&gt;NDOUtils/livestatus&lt;/h2&gt;
&lt;p&gt;Event broker.&lt;/p&gt;
&lt;h2 id=&#34;thruk&#34;&gt;Thruk&lt;/h2&gt;
&lt;p&gt;基于perl的web框架catalyst的dashbord。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.thruk.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.thruk.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sni/Thruk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/sni/Thruk&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;op5的分布式监控方案&#34;&gt;Op5的分布式监控方案&lt;/h1&gt;
&lt;p&gt;一家瑞典的监控和解决方案公司。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.op5.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.op5.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kb.op5.com/dashboard.action&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kb.op5.com/dashboard.action&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/op5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/op5&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;merlin&#34;&gt;merlin&lt;/h2&gt;
&lt;p&gt;分布式组件。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kb.op5.com/display/MERLIN/Distributed&amp;#43;%28Merlin%29&amp;#43;Home&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kb.op5.com/display/MERLIN/Distributed+%28Merlin%29+Home&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/op5/merlin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/op5/merlin&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ndoutilsmk-livestatus&#34;&gt;NDOUtils/MK livestatus&lt;/h2&gt;
&lt;p&gt;Eevent broker&lt;/p&gt;
&lt;h2 id=&#34;ninja&#34;&gt;Ninja&lt;/h2&gt;
&lt;p&gt;Dashboard.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kb.op5.com/display/GUI/GUI&amp;#43;%28Ninja%29&amp;#43;Home&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kb.op5.com/display/GUI/GUI+%28Ninja%29+Home&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/op5/ninja&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/op5/ninja&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;介绍Addons.&lt;/p&gt;
&lt;h1 id=&#34;omd&#34;&gt;OMD&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;OMD implements a completely new concept of how to install, maintain and update a monitoring system built on Nagios.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://omdistro.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://omdistro.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://git.mathias-kettner.de/git/?p=omd.git;a=tree&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://git.mathias-kettner.de/git/?p=omd.git;a=tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Open Monitoring Distribution&lt;/p&gt;
&lt;p&gt;用于快速部署基于nagios的分布式监控，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Icinga/Shinken/check_MK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitoring-Plugins和其它插件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mod-gearman/MK Livestatus/thruk/multisite&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nsca/check_nrpe。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NagVis/Pnp4nagios/rrdtool/dokuwiki&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;gearman&#34;&gt;Gearman&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Gearman provides a generic application framework to farm out work to other machines or processes that are better suited to do the work.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Gearman用来做任务分发的.&lt;/p&gt;
&lt;p&gt;一个C++实现的Gearman Job Server:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://gearman.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://gearman.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gearman/gearmand&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/gearman/gearmand&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个C实现的Gearman worker:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.mod-gearman.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.mod-gearman.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sni/mod_gearman&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/sni/mod_gearman&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;rrdtools&#34;&gt;rrdtools&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;RRDtool is a little program for easily maintaining a database of time-series data. It comes with a charting program for drawing pretty graphs based on the data stored.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;存储性能数据。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://oss.oetiker.ch/rrdtool/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://oss.oetiker.ch/rrdtool/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/oetiker/rrdtool-1.x&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/oetiker/rrdtool-1.x&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;pnp4nagios&#34;&gt;pnp4nagios&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;PNP is an addon to Nagios which analyzes performance data provided by plugins and stores them automatically into RRD-databases.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;基于RRD，绘制nagios的性能图。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://docs.pnp4nagios.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://docs.pnp4nagios.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/lingej/pnp4nagios&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/lingej/pnp4nagios&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以在nagios的service配置中添加“ostpl_enable-graph&amp;quot;启用图形。&lt;/p&gt;
&lt;p&gt;templates.dist是自带模板&lt;/p&gt;
&lt;p&gt;templates是用户自定义模板&lt;/p&gt;
&lt;p&gt;XXX.php需要和nagios的service的command_name同名，默认查找这个同名的模板.&lt;/p&gt;
&lt;p&gt;测试就是scp XXX.php nagios-server:/usr/share/pnp4nagios/html/templates/然后去nagios查看结果&lt;/p&gt;
&lt;p&gt;pnp4nagios查找顺序：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;templates/check_XXX.php&lt;/li&gt;
&lt;li&gt;templates.dist/check_XXX.php&lt;/li&gt;
&lt;li&gt;templates/default.php&lt;/li&gt;
&lt;li&gt;templates.dist/default.php&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;nagvis&#34;&gt;Nagvis&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;NagVis is a program for visualizing the data the monitoring core of your choice, for example Nagios, Naemon, Icinga or Shinken, in a human friendly way.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;绘制监控地图。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.nagvis.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.nagvis.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/NagVis/nagvis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/NagVis/nagvis&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;dokuwiki&#34;&gt;dokuwiki&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;DokuWiki is a simple to use and highly versatile Open Source wiki software that doesn&amp;rsquo;t require a database.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;创建监控的procedure。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.dokuwiki.org/dokuwiki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.dokuwiki.org/dokuwiki/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/splitbrain/dokuwiki&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/splitbrain/dokuwiki&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;graphite&#34;&gt;graphite&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/graphite-project&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/graphite-project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://graphite.readthedocs.io/en/latest/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://graphite.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Zabbix,Sensu,Ganglia,Nagios/Naemon/Icinga/Shinken都可以配合使用。&lt;/p&gt;
&lt;p&gt;绘制性能图。&lt;/p&gt;
&lt;p&gt;graphite-web&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A highly scalable real-time graphing system&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;carbon&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Carbon is responsible for receiving metrics over the network, caching them in memory for &amp;ldquo;hot queries&amp;rdquo; from the Graphite-Web application, and persisting them to disk using the Whisper time-series library.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;whisper/ceres&lt;/p&gt;
&lt;p&gt;ceres会替代whisper。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whisper is a fixed-size database, similar in design and purpose to RRD (round-robin-database). It provides fast, reliable storage of numeric data over time. Whisper allows for higher resolution (seconds per point) of recent data to degrade into lower resolutions for long-term retention of historical data.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;grafana&#34;&gt;grafana&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Grafana is an open source, feature rich metrics dashboard and graph editor for Graphite, Elasticsearch, OpenTSDB, Prometheus and InfluxDB.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;为graphite提供更好的可视化图形。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/grafana/grafana&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/grafana/grafana&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://grafana.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://grafana.org/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;graphios&#34;&gt;graphios&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A program to send nagios perf data to graphite(carbon)/statsd/librato/influxdb&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;发送nagios性能数据到Graphite。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/shawn-sterling/graphios&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/shawn-sterling/graphios&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;ledbetter&#34;&gt;Ledbetter&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A simple script for gathering Nagios problem statistics and submitting them to Graphite. It focuses on summary (overall, servicegroup and hostgroup) statistics and writes them to the nagios.problems metrics namespace within Graphite.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;发送nagios性能数据到Graphite。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/github/ledbetter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/github/ledbetter&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;nscp&#34;&gt;NSCP&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;NSClient is an agent designed originally to work with Nagios but has since evolved into a fully fledged monitoring agent which can be used with numerous monitoring tools (like Icinga, Naemon, OP5, NetEye Opsview etc).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;又叫NSClient++,现在同时支持windows和linux,主要用来安装到windows服务器,用于监控windows系统.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://nsclient.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://nsclient.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mickem/nscp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/mickem/nscp&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;介绍Plugins&lt;/p&gt;
&lt;h1 id=&#34;monitoring-plugins&#34;&gt;Monitoring Plugins&lt;/h1&gt;
&lt;p&gt;Nagios/naemon/icinga/shinken/centreon/opsview/sensu&lt;/p&gt;
&lt;p&gt;Office project:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/monitoring-plugins&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/monitoring-plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.monitoring-plugins.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.monitoring-plugins.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My plugin project:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/crazy-canux/pymonitoringplugins&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/crazy-canux/pymonitoringplugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Open source project:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/crazy-canux/awesome-monitoring&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/crazy-canux/awesome-monitoring&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;monitoring-plugins-1&#34;&gt;monitoring-plugins&lt;/h1&gt;
&lt;h2 id=&#34;negate&#34;&gt;negate&lt;/h2&gt;
&lt;p&gt;设置相反状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-o 设置ok对应状态
-w
-c
-u
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;check_http&#34;&gt;check_http&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[-f &amp;lt;ok|warning|critcal|follow|sticky|stickyport&amp;gt;] # 跳转
-p PORT # http:80, https:443
-a &amp;quot;USERNAME&amp;quot;:&amp;quot;PASSWORD&amp;quot;
-u PATH
--ssl=1/-S # https需要ssl
-s SEARCH
-e SEARCH,SEARCH...
-l # 用在-r或-R前面,表示可以在多行进行正则匹配
-r # 正则匹配
-R # 大小写不敏感的正则匹配
-C # 检查证书, 不检查URL
-t # timeout.
-w # warning response time
-c # critical response time
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;windows-monitoring&#34;&gt;Windows monitoring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;check_wmi_plus.pl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  IgnoreMyOutDatedPerlModuleVersions
  -m checkfolderfileage -a &#39;C:&#39; -o &#39;/tmp&#39; -inc _FileAge=@0:1000 -c 10
  -m check_file_count -a &#39;F:&#39; -o &#39;/folder&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check_snmp_win_services.pl&lt;/p&gt;
&lt;p&gt;查windows的service&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  -n &amp;lt;name&amp;gt;[,&amp;lt;name2&amp;gt;]... # 指定service名字，默认大小写不敏感,正则匹配，逗号分隔多个service，用display name。
  -N=&amp;lt;n&amp;gt; # 匹配到service数量大于n就报错
  -r # 精确匹配
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check_smb_shares.pl&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;linuxunix-monitoring&#34;&gt;Linux/Unix monitoring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;check_hpasm.pl&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;os-x-monitoring&#34;&gt;OS X monitoring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;OSX-Monitoring-Tools&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;vitual-machine-monitoring&#34;&gt;Vitual Machine monitoring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;check_wmware_api.pl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check_vmware_esx.pl&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;db-monitoring&#34;&gt;DB monitoring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;check_mysql_health.pl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check_oracle_health.pl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check_db2_health.pl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check_mssql_health.pl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  --name database/sql
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;network-monitoring&#34;&gt;Network monitoring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;check_nwc_health.pl&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;storage-monitoring&#34;&gt;Storage monitoring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;check_snmp_storage.pl&lt;/p&gt;
&lt;p&gt;返回用了多少空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check_disk&lt;/p&gt;
&lt;p&gt;返回剩余多少空间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;log-monitoring&#34;&gt;Log monitoring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;check_logfiles.pl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check_events.pl&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;process-monitoring&#34;&gt;Process monitoring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;check_snmp_process.pl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  -n &amp;lt;name&amp;gt; # process名字，大小写敏感，正则匹配，windows需要用processname.exe
  -r # 精确匹配
  -w minW, maxW
  -c minC, maxC # minC &amp;lt;= minW &amp;lt; maxW &amp;lt; maxC
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;application-monitoring&#34;&gt;Application monitoring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;check_sap_health.pl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check_mailbox_health.pl&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;monitoring插件开发&#34;&gt;Monitoring插件开发&lt;/h1&gt;
&lt;p&gt;Nagios Plugin API:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/3/en/pluginapi.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/3/en/pluginapi.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Developing Plugins For Use With Embedded Perl:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/3/en/epnplugins.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/3/en/epnplugins.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nagios plugin development guidelines:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://nagios-plugins.org/doc/guidelines.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://nagios-plugins.org/doc/guidelines.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Monitoring Plugin Development Guidelines:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.monitoring-plugins.org/doc/guidelines.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.monitoring-plugins.org/doc/guidelines.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nagios不是基于agent的，所以插件都是通过协议来获取监控信息。&lt;/p&gt;
&lt;p&gt;plugin需要遵守下面规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;至少输出一行文本到STDOUT&lt;/li&gt;
&lt;li&gt;事件状态由插件的返回码决定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;just support 4kb data
shortoutput - $SERVICEOUTPUT$
perfdata - $SERVICEPERFDATA$
longoutput - $LONGSERVICEOUTPUT$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0： OK（绿色）
1： Warning（黄色）
2： Critical（红色）
3： Unknown（深黄色）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;阀值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10     | 0:10   | &amp;lt;0 or &amp;gt;10 alert
10:    | 10:æ  | &amp;lt;10 alert
~:10   | -æ:10 | &amp;gt;10 alert
10:20  |        | &amp;lt;10 or &amp;gt;20 alert
@10:20 |        | &amp;gt;=10 and &amp;lt;=20 alert
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Zabbix</title>
        <link>https://canuxcheng.com/post/metrics_zabbix/</link>
        <pubDate>Fri, 25 Mar 2016 11:15:48 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/metrics_zabbix/</guid>
        <description>&lt;h1 id=&#34;zabbix&#34;&gt;Zabbix&lt;/h1&gt;
</description>
        </item>
        
    </channel>
</rss>
