<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Database on Morgoth</title>
        <link>https://canuxcheng.com/categories/database/</link>
        <description>Recent content in Database on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 23 Apr 2021 22:02:31 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/categories/database/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AWS Database</title>
        <link>https://canuxcheng.com/post/aws_database/</link>
        <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/aws_database/</guid>
        <description>&lt;h1 id=&#34;aws-database&#34;&gt;AWS Database&lt;/h1&gt;
&lt;h2 id=&#34;rds&#34;&gt;RDS&lt;/h2&gt;
&lt;p&gt;Relational Database Service， 关系型数据库服务.&lt;/p&gt;
&lt;p&gt;支持的数据库引擎：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Amazon Aurora&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;MariaDB&lt;/li&gt;
&lt;li&gt;Oracle Database&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;aurora-serverless&#34;&gt;Aurora Serverless&lt;/h2&gt;
&lt;h2 id=&#34;aurora&#34;&gt;Aurora&lt;/h2&gt;
&lt;p&gt;兼容mysql和postgresql.&lt;/p&gt;
&lt;h2 id=&#34;dynamodb&#34;&gt;DynamoDB&lt;/h2&gt;
&lt;p&gt;非关系数据库(NoSQL).&lt;/p&gt;
&lt;p&gt;DynamoDB是一项键值数据库服务. 无服务器，自动扩展。&lt;/p&gt;
&lt;p&gt;具有Key-Value数据库和Document数据库的功能。&lt;/p&gt;
&lt;h2 id=&#34;documentdb&#34;&gt;DocumentDB&lt;/h2&gt;
&lt;p&gt;兼容MongoDB.&lt;/p&gt;
&lt;h2 id=&#34;elasticcache&#34;&gt;ElasticCache&lt;/h2&gt;
&lt;p&gt;内存数据库(in-memory). 兼容redis和memcached.&lt;/p&gt;
&lt;h2 id=&#34;keyspaces&#34;&gt;Keyspaces&lt;/h2&gt;
&lt;p&gt;兼容cassandra的无服务器数据库。&lt;/p&gt;
&lt;h2 id=&#34;redshift&#34;&gt;Redshift&lt;/h2&gt;
&lt;p&gt;Amazon Redshift 是一项数据仓库服务，可用于进行大数据分析。&lt;/p&gt;
&lt;h2 id=&#34;neptune&#34;&gt;Neptune&lt;/h2&gt;
&lt;p&gt;图形数据库&lt;/p&gt;
&lt;h2 id=&#34;timesteam&#34;&gt;Timesteam&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>Redis</title>
        <link>https://canuxcheng.com/post/redis/</link>
        <pubDate>Wed, 03 May 2017 14:46:14 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/redis/</guid>
        <description>&lt;h1 id=&#34;redis&#34;&gt;Redis&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://redisdoc.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://redisdoc.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis在key-value存储上性能比memcached更好．&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# redis-cli, redis-sentinel, redis-server
$ sudo apt-get install redis-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只安装redis-cli:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install redis-tools
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;redis-server监听端口6379.&lt;/p&gt;
&lt;p&gt;redis-sentinel端口26379.&lt;/p&gt;
&lt;p&gt;redis gui:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/qishibo/AnotherRedisDesktopManager&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/qishibo/AnotherRedisDesktopManager&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/luin/medis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/luin/medis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis HA:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/CodisLabs/codis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/CodisLabs/codis&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;redis的命令&#34;&gt;redis的命令&lt;/h1&gt;
&lt;p&gt;server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;client:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-client
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-benchmark
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sentinel:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-sentinel
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;
&lt;p&gt;redis-cli 进入命令行模式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; command    # 查看所有可用命令

&amp;gt; info    # 查看redis服务器信息

&amp;gt; monitor

&amp;gt; select 1 # 选中数据库1
&amp;gt; keys *  # 显示所有key
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;
&lt;p&gt;string&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; set &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;
&amp;gt; get &amp;lt;key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;list&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; lset &amp;lt;key&amp;gt; &amp;lt;index&amp;gt; &amp;lt;value&amp;gt;
&amp;gt; lindex &amp;lt;key&amp;gt; &amp;lt;index&amp;gt;
&amp;gt; rpop
&amp;gt; lpop &amp;lt;key&amp;gt;
&amp;gt; rpush
&amp;gt; lpush
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;hash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; hset &amp;lt;key&amp;gt; &amp;lt;field&amp;gt; &amp;lt;value&amp;gt;
&amp;gt; hget &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;set&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; sadd &amp;lt;key&amp;gt; &amp;lt;member&amp;gt;
&amp;gt; spop &amp;lt;key&amp;gt;
&amp;gt; srem &amp;lt;key&amp;gt; &amp;lt;memeber&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sorted set&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; zadd &amp;lt;key&amp;gt; &amp;lt;score&amp;gt; &amp;lt;member&amp;gt;
&amp;gt; zrem &amp;lt;key&amp;gt; &amp;lt;member&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;
&lt;p&gt;通过redis-cli&amp;gt; info查看&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;其它指标参考grafana dashboard.

Redis_mode: cluster/standalone

&amp;gt;&amp;gt;&amp;gt; replication (master/slave)
Connected_slaves:    连接的slave实例个数

&amp;gt;&amp;gt;&amp;gt; persistence  （rdb和aof的持久化信息）
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>MongoDB</title>
        <link>https://canuxcheng.com/post/mongodb/</link>
        <pubDate>Sun, 16 Apr 2017 14:46:14 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/mongodb/</guid>
        <description>&lt;h1 id=&#34;mongodb&#34;&gt;MongoDB&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mongodb/mongo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/mongodb/mongo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mongodb是一种开源的文档数据库，高性能，高可用性，自动裁剪．&lt;/p&gt;
&lt;p&gt;mongodb的database和关系数据库中的database一样．&lt;/p&gt;
&lt;p&gt;mongodb将BSON(mongo的JSON)文档存储在集合(collections)中，集合相当于关系数据库中的表table．&lt;/p&gt;
&lt;p&gt;mongodb的collections中的域(field)，相当于关系数据库中的字段column.&lt;/p&gt;
&lt;p&gt;mongodb的collections中的文档(document)，相当于关系数据库中的记录行row.&lt;/p&gt;
&lt;p&gt;mongodb也支持index索引和primary key主键，但是不支持table joins表连接．&lt;/p&gt;
&lt;p&gt;ubuntu安装:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv0C49F3730359A14518585931BC711F9BA15703C6
$ echo &amp;quot;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4multiverse&amp;quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
$ sudo apt-get update
$ sudo apt-get install -y mongodb-org
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ubuntu启动:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo service mongod start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完成默认的数据库是test.另外db, admin, local是保留的数据库名称．&lt;/p&gt;
&lt;p&gt;mongod的默认端口是27017.&lt;/p&gt;
&lt;p&gt;mongo web-gui:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Studio3T/robomongo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Studio3T/robomongo&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mongo的命令&#34;&gt;mongo的命令&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;mongo [options] [db address] [file names (ending in .js)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mongo shell进入到指定数据库:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mongo [db_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本地命令行执行sql语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mongo [database] -e/--eval [javascript]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;远程执行sql语句:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mongo -u [username] -p [password] [ip]:[port]/[datbase] -e/--eval [javascript]
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;
&lt;p&gt;先用mongo命令进入mongo命令行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;help    # 查看所有命令
exit    # 退出mongo shell

db    # 显示当前数据库
use &amp;lt;db_name&amp;gt;    # 切换到指定数据库, 不存在则创建．
show dbs    # 查看所有数据库
show collections # 查看当前database的collections
show users
show profile
show logs
show log [name]

sh.help()

rs.help()

db.help() # 查看所有database的方法
db.hostInfo()
db.serverStatus()

db.mycoll.help() # 查看所有collections的方法
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;curd&#34;&gt;CURD&lt;/h1&gt;
&lt;p&gt;mongo的CURD操作就相当于关系数据库中的sql操作．&lt;/p&gt;
&lt;p&gt;CURD: create update read delete.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; use &amp;lt;database_name&amp;gt; # 切换/创建数据库
&amp;gt; db.createCollection(collection_name) # 在当前数据库创建集合
&amp;gt; db.dropDatabase() # 删除当前数据库
&amp;gt; db.getCollectionNames() # 获取当前数据库的所有集合

&amp;gt; db.mycoll.insert(obj) #　往集合mycollection中插入JSON对象obj.
&amp;gt; db.mycoll.find([query],[fields]) # 查询文档
&amp;gt; db.mycoll.remove(query) # 删除文档
&amp;gt; db.mycoll.save(obj) # 替换已有的文档
&amp;gt; db.mycoll.update( query, object[, upsert_bool, multi_bool] ) # 更新已有的文档
&amp;gt; db.mycoll.drop() # 删除当前集合

# 释放内存
&amp;gt; use admin
&amp;gt; db.runCommand({closeAllDatabases:1})
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;
&lt;p&gt;通过mongo&amp;gt; serverStatus()查看&lt;/p&gt;
&lt;p&gt;其它指标参考grafana dashboard.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TSDB</title>
        <link>https://canuxcheng.com/post/database/</link>
        <pubDate>Tue, 03 Jan 2017 14:46:14 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/database/</guid>
        <description>&lt;h1 id=&#34;rdbms&#34;&gt;RDBMS&lt;/h1&gt;
&lt;p&gt;关系数据库管理系统。&lt;/p&gt;
&lt;p&gt;SQLite&lt;/p&gt;
&lt;p&gt;Oracle&lt;/p&gt;
&lt;p&gt;MSSQL&lt;/p&gt;
&lt;p&gt;Mysql&lt;/p&gt;
&lt;p&gt;Postgre&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nosql&#34;&gt;NoSQL&lt;/h1&gt;
&lt;p&gt;NoSQL: Not only SQL.&lt;/p&gt;
&lt;p&gt;非关系型数据库。&lt;/p&gt;
&lt;p&gt;memcached(cache)&lt;/p&gt;
&lt;p&gt;redis(cache)&lt;/p&gt;
&lt;p&gt;mongodb&lt;/p&gt;
&lt;p&gt;hbase(hadoop)&lt;/p&gt;
&lt;p&gt;cassandra(hadoop)&lt;/p&gt;
&lt;p&gt;rethinkdb&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tsdb&#34;&gt;TSDB&lt;/h1&gt;
&lt;p&gt;Time series database.&lt;/p&gt;
&lt;p&gt;时序数据库&lt;/p&gt;
&lt;p&gt;influxdb&lt;/p&gt;
&lt;p&gt;rrdtool&lt;/p&gt;
&lt;p&gt;graphite&lt;/p&gt;
&lt;p&gt;opentsdb&lt;/p&gt;
&lt;p&gt;premetheus&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Oracle</title>
        <link>https://canuxcheng.com/post/oracle/</link>
        <pubDate>Wed, 01 Jun 2016 22:40:22 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/oracle/</guid>
        <description>&lt;h1 id=&#34;oracle&#34;&gt;Oracle&lt;/h1&gt;
&lt;p&gt;oracle的GUI：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;oracle sql developer(officer)&lt;/li&gt;
&lt;li&gt;pl/sql&lt;/li&gt;
&lt;li&gt;toad&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;oracle的CLI：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sqlplus&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;oracle命令&#34;&gt;Oracle命令&lt;/h1&gt;
&lt;p&gt;sys是oracle默认管理员权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sqlplus / as sysdba
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;system是oracle的默认最高权限，默认密码是manager，需要sys授权才能登陆&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sqlplus / as sysdba
&amp;gt; alter user system account unlock;
&amp;gt; alter user system identified by manager;
&amp;gt; conn system/manager
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;scott是oracle的默热你的普通用户，默认密码是tiger，需要sys授权才能登陆&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sqlplus / as sysdba
&amp;gt; alter user scott account unlock;
&amp;gt; alter user scott identified by tiger;
&amp;gt; conn scott/tiger
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本地命令行执行sql语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ &amp;lt;sql query&amp;gt; | &amp;lt;sqlplus&amp;gt; &amp;lt;db user&amp;gt;/&amp;lt;db password&amp;gt;@&amp;lt;db sid&amp;gt; | sudo ORACLE_HOME=&amp;lt;oracle home&amp;gt; -i -u &amp;lt;oracle user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dbsnmp是oracle的用户智能代理用户，用来监控和管理数据库相关性能。&lt;/p&gt;
&lt;p&gt;sysman是oracle的数据库用户EM管理用户。&lt;/p&gt;
&lt;p&gt;监听管理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;su - oracle
lsnrctl start
lsnrctl stop
lsnrctl status
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;
&lt;p&gt;先用sqlplus命令进入oracle的命令行．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;help index
? index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看命令帮助信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;help &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;登陆和退出sqlplus：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sqlplus
exit/quit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用sql语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不退出sqlplus执行shell命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;host
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用户登陆和退出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;connect/conn &amp;lt;username&amp;gt;/&amp;lt;password&amp;gt;
disconnect
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;清屏：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clear
! clear
clear scr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改密码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;password
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;函数&#34;&gt;函数&lt;/h1&gt;
&lt;p&gt;isnull函数:&lt;/p&gt;
&lt;p&gt;　　　　NVL(column, 0)    column为null函数返回0&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sql&#34;&gt;SQL&lt;/h1&gt;
&lt;p&gt;创建用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE USER &amp;lt;username&amp;gt; IDENTIFIED BY &amp;lt;password&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用户授权：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GRANT DBA TO &amp;lt;username&amp;gt;;
GRANT UNLIMITED TABLESPACE TO &amp;lt;username&amp;gt;;
GRANT SELECT ANY TABLE TO &amp;lt;username&amp;gt;;
GRANT SELECT ANY DICTIONARY TO &amp;lt;username&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常用查询：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM global_name; 查看默认数据库
SELECT * FROM dba_tables; DBA权限查询数据所有表
SELECT * FROM all_users; 查看所有用户
SELECT username FROM dba_users; 查看所有DBA用户
SELECT user FROM dual; 查看当前登陆用户
SELECT * FROM user_tables; 查询当前用户有哪些表
SELECT * FROM all_tables; 查询当前用户可以访问的所有表
SELECT banner FROM sys.v_$version; 查询数据库版本
SELECT count(*) FROM v$version; 查询oracle连接数
SELECT count(*) FROM v$version WHERE STATUS = &#39;ACTIVE&#39;; 查询oracle并发连接数
ALTER system SET processes = &amp;lt;number&amp;gt; scope = spfile; 修改数据库允许最大连接数
SELECT value FROM v$parmeter WHERE name = &#39;processes&#39;; 查询数据库允许最大连接数
SELECT value FROM v$parmeter WHERE name = &#39;open_cursor&#39;; 查询数据库允许最大游标数
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;python&#34;&gt;python&lt;/h1&gt;
&lt;h2 id=&#34;cx_oracle&#34;&gt;cx_Oracle&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://cx-oracle.sourceforge.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://cx-oracle.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要安装oracle数据库或者oracle instant client并设置环境变量。&lt;/p&gt;
&lt;p&gt;参考oracle网站下载安装配置oracle instant client&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import cx_Oracle
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>SQL</title>
        <link>https://canuxcheng.com/post/sql/</link>
        <pubDate>Wed, 25 May 2016 22:06:13 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/sql/</guid>
        <description>&lt;h1 id=&#34;sql&#34;&gt;SQL&lt;/h1&gt;
&lt;p&gt;sql是结构化查询语言。&lt;/p&gt;
&lt;p&gt;sql是一种标准，几乎所有关系型数据库都遵守。&lt;/p&gt;
&lt;p&gt;但是不同的数据库又有自己的扩展。&lt;/p&gt;
&lt;p&gt;SQL分为两部分，DML和DDL。&lt;/p&gt;
&lt;p&gt;SQL大小写敏感，文本使用单引号，数值不需要引号。&lt;/p&gt;
&lt;h1 id=&#34;sql语法&#34;&gt;sql语法&lt;/h1&gt;
&lt;p&gt;sql注释:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 多行注释
/*
comment multi lines
in a sql file.
*/

# 单行注释
/* comment single line */

# 单行注释还可以直接用 -- 表示
select * from table -- where condition;
-- select * from table where condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ddl&#34;&gt;DDL&lt;/h1&gt;
&lt;p&gt;DDL: 数据定义语言&lt;/p&gt;
&lt;h2 id=&#34;create&#34;&gt;create&lt;/h2&gt;
&lt;p&gt;创建数据库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE DATABASE database_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;建表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE table(
    column1 type1,
    column2 type2,
    ...
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create也可以用来创建索引和视图．&lt;/p&gt;
&lt;h2 id=&#34;drop&#34;&gt;drop&lt;/h2&gt;
&lt;p&gt;删除数据库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DROP DATABASE database_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;删表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DROP TABLE table;
# 仅仅删除表中的数据，保留表
TRUNCATE TABLE table;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;drop也可以用来删除索引和视图．&lt;/p&gt;
&lt;h2 id=&#34;alter&#34;&gt;alter&lt;/h2&gt;
&lt;p&gt;变更表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 添加列
ALTER TABLE table ADD COLUMN column type;

# 删除列
ALTER TABLE table DROP COLUMN column;

# 改变列的数据类型
# sql server
ALTER TABLE table ALTER COLUMN column type;
# mysql
ALTER TABLE table MODIFY COLUMN column type;
# mysql/oracle
ALTER TABLE table MODIFY column type;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;dml&#34;&gt;DML&lt;/h1&gt;
&lt;p&gt;DML: 数据操作语言&lt;/p&gt;
&lt;h2 id=&#34;select&#34;&gt;select&lt;/h2&gt;
&lt;p&gt;查询操作:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM table;
# 单表查询
SELECT column FROM table;
# 多表查询
SELECT table1.column1, table2.column2 FROM table1, table2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where子句选取数据：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT column FROM table WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引号的使用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 文本使用单引号，大部分数据库也接受双引号
SELECT column FROM table WHERE name=&#39;text&#39;;
# 数字不能使用引号．
SELECT column FROM table WHERE id=number;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where子句条件表达式可用的运算符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;=
&amp;lt;&amp;gt;
!=
&amp;gt;
&amp;lt;
&amp;gt;=
&amp;lt;=

BETWEEN [value1, value2]
BETWEEN value1 AND value2
NOT BETWEEN

IN (value1, value2)
NOT IN

IS NULL
IS NOT NULL

LIKE
NOT LIKE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;like运算符的通配符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%    替代一个或多个字符
_    替代一个字符
[char list]    字符列中的任何单一字符
[^char list]    不在字符列中的任何单一字符
[!char list]    和上面一个等效
SELECT * FROM table WHERE name LIKE &#39;[abc]%&#39; # 以abc开头的name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where子句多个条件可以使用的运算符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AND    与运算
SELECT * FROM table WHERE name=&#39;canux&#39; AND id=10;
OR    或运算
SELECT * FROM table WHERE name=&#39;canux&#39; OR id=10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;order by子句对结果进行排序,默认升序(ASC)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 默认升序
SELECT column, column1 FROM table ORDER BY column;
SELECT column, column1 FROM table ORDER BY column, column1;
SELECT column, column1 FROM table ORDER BY column ASC;
# DESC降序
SELECT column, column1 FROM table ORDER BY column DESC;
SELECT column, column1 FROM table ORDER BY column DESC, column1 ASC;
# 根据第几个字段排序
SELECT column, column1 FROM table ORDER BY number;
# 多个字段排序，优先级从前到后
SELECT column FROM table ORDER BY column1, column2
SELECT column FROM table ORDER BY column1 DESC, column2 DESC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;top子句用于规定要返回的记录数目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# SQL Server
SELECT TOP number * FROM table;
# mysql
SELECT * FROM table LIMIT number;
# oracle
SELECT * FROM table WHERE ROWNUM &amp;lt;= number;

Top 一般需要order by
# number最小的10个
select top 10 from table order by number
# number最大的10个
select top 10 from table order by number desc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;group by子句用来分组，放在where子句后面如果有的话:&lt;/p&gt;
&lt;p&gt;group by一定要用合计函数(count, max, min, sum, avg, &amp;hellip;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT column1, aggregate_function(column2) FROM table GROUP BY column1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;having子句用来过滤group by的结果(相当where)，放在group by子句后面：&lt;/p&gt;
&lt;p&gt;因为where不能和合计函数一起使用，所以使用having子句．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT column1, aggregate_function(column2) FROM table GROUP BY column1 HAVING aggregate_function(column) condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;distinct关键字排除重复：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT DISTINCT column FROM table;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as关键字指定别名：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 指定表的别名
SELECT alias_table1.column1, alias_table2.column2
FROM table1 AS alias_table1, table2 AS alias_table2
WHERE alias_table1.column2=&#39;test&#39;;

# 指定字段别名
SELECT column1 AS alias1, column2 AS alias2 FROM table;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行顺序：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from -&amp;gt; where -&amp;gt; group by -&amp;gt; having -&amp;gt; select -&amp;gt; distinct -&amp;gt; union -&amp;gt; order by -&amp;gt; top
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;insert-into&#34;&gt;insert into&lt;/h2&gt;
&lt;p&gt;向表格插入新的行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 一次插入完整行
INSERT INTO table VALUES (value1, value2, ...);
# 一次插入多行
INSERT INTO table VALUES (val11, val12, ...) (val21, val22, ...) ...
# 一次插入一行的一部分
INSERT INTO table (column1, column2, ...) VALUES (value1, value2, ...);
# 一次插入多行的一部分
INSERT INTO table (col1, col2, ...) VALUES (val11, val12, ...) (val21, val22, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-set&#34;&gt;update set&lt;/h2&gt;
&lt;p&gt;修改表中数据：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UPDATE table SET column1=value1 WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;delete-from&#34;&gt;delete from&lt;/h2&gt;
&lt;p&gt;删除表中的行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DELETE FROM table WHERE condition;
DELETE FROM table; # 删除所有行

TRUNCATE TABLE table; # mysql清空表的内容，不可恢复
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;函数&#34;&gt;函数&lt;/h1&gt;
&lt;p&gt;不同的数据库内置的部分函数不同．下面只列出大部分数据库都有的函数．&lt;/p&gt;
&lt;p&gt;sql内置两种函数：合计(aggregate)函数　和　标量(scalar)函数.&lt;/p&gt;
&lt;p&gt;sql函数的语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT FUNCTION(args) FROM table ...;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aggregate-function&#34;&gt;aggregate function&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;AVG()：　求平均值
COUNT(): 统计行数
FIRST(): 返回指定字段中第一个记录的值
LAST():　返回指定字段中最后一个记录的值
MAX():　返回一列中的最大值
MIN():　返回一列中的最小值
SUM():　返回一列的和
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;scalar-function&#34;&gt;scalar function&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;UCASE():　把字段的值转换为大写
LCASE():　把字段的值转换为小写
MID(column, start[, length]):　从文本字段中提取字符，start从１开始
LEN(): 返回文本字段中的长度
FORMAT(column, format): 对字段进行格式化
ROUND(column, decimals): 把数值字段舍入为指定的小数位数
NOW()    返回当前的日期和时间
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;join&#34;&gt;join&lt;/h1&gt;
&lt;p&gt;为了从多个表中获取结果，就需要用join.&lt;/p&gt;
&lt;h2 id=&#34;inner-join&#34;&gt;inner join&lt;/h2&gt;
&lt;p&gt;inner join也就是默认的join.&lt;/p&gt;
&lt;p&gt;全部匹配才返回．相当于table1和table2与.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 两张表连接
SELECT table1.column, table2.column
FROM table1 INNER JOIN table2
ON table1.column = table2.column;

# 三张表连接
SELECT column
FROM ((table1 INNER JOIN table2 ON table1.column1 = table2.column1) INNER JOIN table3
ON table1.column2 = table3.column2);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;left-join&#34;&gt;left join&lt;/h2&gt;
&lt;p&gt;左连接．返回左表table1的所有行，和右表table2匹配的行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT column
FROM table1 LEFT JOIN table2
ON table1.column = table2.column;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;right-join&#34;&gt;right join&lt;/h2&gt;
&lt;p&gt;右连接，返回右表table2的所有行，和左表table1匹配的行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT column
FROM table1 RIGHT JOIN table2
ON table1.column = table2.column;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;full-join&#34;&gt;full join&lt;/h2&gt;
&lt;p&gt;返回两张表的所有行．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT column
FROM table1 FULL JOIN table2
ON table1.column = table2.column;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;union&#34;&gt;union&lt;/h1&gt;
&lt;p&gt;union操作符用于合并两个或多个select语句的结果集．&lt;/p&gt;
&lt;p&gt;union只选取不同的值,也就是说table1和table2中的相同column只出现一次．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT column FROM table1
UNION
SELECT column FROM table2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;union all会列出所有的值，包括重复的．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT column FROM table1
UNION ALL
SELECT column FROM table2;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;select-into&#34;&gt;select into&lt;/h1&gt;
&lt;p&gt;创建表的备份复件．&lt;/p&gt;
&lt;p&gt;把table1的所有列插入到table2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * INTO table2 FROM table1 WHERE condition;
# table2属于另外一个数据库externaldatabase
SELECT * INTO table2 IN externaldatabase FROM table1 WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把table1的部分列插入到table2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT column INTO table2 FROM table1 WHERE condition;
# table2属于另外一个数据库externaldatabase
SELECT column INTO table2 IN externaldatabase FROM table1 WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mysql需要用insert into &amp;hellip; select:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 如果table2已经存在
INSERT INTO table2 SELECT * FROM table1 WHERE condition;
# 如果table2不存在
CREATE TABLE table2 AS SELECT * FROM table1 WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;constraints&#34;&gt;constraints&lt;/h1&gt;
&lt;p&gt;constraints约束用于限制加入表的数据的类型．&lt;/p&gt;
&lt;h2 id=&#34;not-null&#34;&gt;NOT NULL&lt;/h2&gt;
&lt;p&gt;not null强制约束列不能接受null值．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE tablename (
    id int NOT NULL,
    name varchar(255)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;unique&#34;&gt;UNIQUE&lt;/h2&gt;
&lt;p&gt;unique约束唯一标识数据库表中的每条记录．&lt;/p&gt;
&lt;p&gt;每个表可以有多个unique约束．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql:
CREATE TABLE table (
    id int NOT NULL,
    name varchar(255),
    UNIQUE (id)
);

# sql server/oracle:
CREATE TABLE table(
    id int NOT NULL UNIQUE,
    name varchar(255)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给约束命名，并且标记多个列到unique:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE table (
    id int NOT NULL,
    firstname varchar(255),
    lastname varchar(255),
    CONSTRAINT constraintname UNIQUE (id, lastname)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给已经存在的表添加约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ALTER TABLE table ADD UNIQUE (id);
# 给约束命名，并且标记多个列到unique
ALTER TABLE table ADD CONSTRAINT constraintname UNIQUE (id, lastname);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;撤销约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql:
ALTER TABLE table DROP INDEX constraintname;
# sql server/oracle:
ALTER TABLE table DROP CONSTRAINTNAME constraintname;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;primary-key&#34;&gt;PRIMARY KEY&lt;/h2&gt;
&lt;p&gt;primary key主键必须包含唯一的值，主键列不能包含NULL值．&lt;/p&gt;
&lt;p&gt;每张表最多只能有一个主键．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql:
CREATE TABLE table (
    id int NOT NULL,
    firstname varchar(255),
    lastname varchar(255),
    PRIMARY KEY (id)
);

# sql server/oracle:
CREATE TABLE table (
    id int NOT NULL PRIMARY KEY,
    firstname varchar(255),
    lastname varchar(255)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给主键命名，并且添加多个列到primary key:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE table (
    id int NOT NULL,
    firstname varchar(255),
    lastname varchar(255),
    CONSTRAINT constraintname PRIMARY KEY (id, lastname)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给已经存在的表添加约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ALTER TABLE table ADD PRIMARY KEY (id);
# 给约束命名，并且添加多个列到主键：
ALTER TABLE table ADD CONSTRAINT constraintname PRIMARY KEY (id, lastname);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;撤销约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql:
ALTER TABLE table DROP PRIMARY KEY;
# sql server/oracle:
ALTER TABLE talbe DROP CONSTRAINT constraintname;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;foreign-key&#34;&gt;FOREIGN KEY&lt;/h2&gt;
&lt;p&gt;一个表中的外键指向另一个表中的主键．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql:
CREATE TABLE table1 (
    id_1 int NOT NULL,
    id_2 int,
    PRIMARY KEY (id_1),
    FOREIGN KEY (id_2) REFERENCES table2(id_2)
);

# sql server/oracle:
CREATE TABLE table1 (
    id_1 int NOT NULL PRIMARY KEY,
    id_2 int FOREIGN KEY REFERENCES table2(id_2)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给外键命名，并且添加多个列到foreign key:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE table1 (
    id_1 int NOT NULL,
    id_2 int,
    PRIMARY KEY (id_1),
    CONSTRAINT constraintname FOREIGN KEY (id_2) REFERENCES table2(id_2)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给已经存在的表添加约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ALTER TABLE table1 ADD FOREIGN KEY (id_2) REFERENCES table2(id_2);
# 给外键命名，并且添加多列到外键
ALTER TABLE table1 ADD CONSTRAINT constraintname FOREIGN KEY (id_2) REFERENCES table2(id_2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;撤销约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql:
ALTER TABLE table1 DROP FOREIGN KEY constraintname;
# sql server/oracle:
ALTER TABLE table1 DROP CONSTRAINT constraintname;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;check&#34;&gt;CHECK&lt;/h2&gt;
&lt;p&gt;check用于限制列中的值的范围．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql:
CREATE TABLE table (
    id int NOT NULL,
    firstname varchar(255),
    lastname varchar(255),
    CHECK (id&amp;gt;0)
);

# sql server/oracle:
CREATE TABLE table (
    id int NOT NULL CHECK (id&amp;gt;0),
    firstname varchar(255),
    lastname varchar(255)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给约束命名，并且添加多个列到约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE table (
    id int NOT NULL,
    firstname varchar(255),
    lastname varchar(255),
    CONSTRAINT constraintname CHECK (id&amp;gt;0 AND lastname=&#39;cheng&#39;)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给已经存在的表添加约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ALTER TABLE table ADD CHECK (id&amp;gt;0);
# 给约束命名，并且添加多列到约束
ALTER TABLE table ADD CONSTRAINT constraintname CHECK (id&amp;gt;0 AND lastname=&#39;cheng&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;撤销约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql:
ALTER TABLE table DROP CONSTRAINT constraintname;
# sql server/oracle:
ALTER TABLE table DROP CHECK constraintname;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;default&#34;&gt;DEFAULT&lt;/h2&gt;
&lt;p&gt;default约束用于向列中插入默认值．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE table (
    id int NOT NULL,
    country varcha(255) DEFAULT &#39;china&#39;
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给已经存在的表添加约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql
ALTER TABLE table ALTER country SET DEFAULT &#39;china&#39;;
# sqlserver/oracle
ALTER TABLE table ALTER COLUMN country SET DEFAULT &#39;china&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;撤销约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql:
ALTER TABLE table ALTER country DROP DEFAULT;
# sql server/oracle:
ALTER TABLE table ALTER COLUMN country DROP DEFAULT;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;increment&#34;&gt;increment&lt;/h1&gt;
&lt;p&gt;auto increment在每次插入新记录时，自动创建主键字段的值．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql使用auto_increment
CREATE TABLE table (
    id int NOT NULL AUTO_INCREMENT,
    firstname varchar(255),
    lastname varchar(255),
    PRIMARY KEY (id)
);

# sql server使用identity:
CREATE TABLE table (
    id int PRIMARY KEY IDENTITY;
    firstname varchar(255),
    lastname varchar(255)
);

# oracle使用sequence对:
CREATE SEQUENCE sequencename
MINVALUE 1
START WITH 1
INCRREMENT BY 1
CACHE 10
# 使用nextval函数获取下一个值：
INSERT INTO table (id, firstname, lastname) VALUES (sequencename.nextval, &#39;canux&#39;, &#39;cheng&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;auto increment的默认起始值是1,每次插入一行默认加一，可以修改起始值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ALTER TABLE table AUTO_INCREMENT=10;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;index&#34;&gt;index&lt;/h1&gt;
&lt;p&gt;创建索引可以快速高效查询数据，但是用户无法看到索引．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 在表中创建简单索引，允许使用重复的值:
CREATE INDEX indexname ON table (column, column1, ...);

# 在表中创建唯一索引，两个行不能有相同索引值:
CREATE UNIQUE INDEX indexname ON table (column, column1, ...);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;删除索引：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql:
ALTER TABLE table DROP INDEX indexname;
# sql server:
DROP INDEX table.indexname;
# oracle:
DROP INDEX indexname;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;view&#34;&gt;view&lt;/h1&gt;
&lt;p&gt;视图是基于sql语句的结果集的可视化的表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE VIEW viewname AS SELECT * FROM table WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更新视图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE OR REPLACE VIEW viewname AS SELECT column FROM table WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查询视图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM viewname;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;删除视图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DROP VIEW viewname;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Mysql</title>
        <link>https://canuxcheng.com/post/mysql/</link>
        <pubDate>Wed, 25 May 2016 12:14:59 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/mysql/</guid>
        <description>&lt;h1 id=&#34;mysql&#34;&gt;Mysql&lt;/h1&gt;
&lt;p&gt;安装mysql服务器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install mysql-server
$ sudo yum install mysql-community-server

$ sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf
# 注意mysql的/etc/mysql/my.cnf和相关文件如果设置了bind-address = 127.0.0.1就无法远程访问，需要注释掉．
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装mysql客户端&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install mysql-client
$ sudo yum install mysql-community-client
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装开发工具：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libmysqlclient-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CLI工具： mysql&lt;/p&gt;
&lt;p&gt;GUI工具： mysql workbench&lt;/p&gt;
&lt;p&gt;安装完成默认的数据库是 mysql。&lt;/p&gt;
&lt;p&gt;mysqld的默认端口是3306.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mysql命令&#34;&gt;mysql命令&lt;/h1&gt;
&lt;p&gt;tips: 用户名密码有特殊字符用引号.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mysql [OPTIONS] [database]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初始化时需要用root用户进入mysql命令行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mysql -uroot -p
$ mysql -h&amp;lt;host&amp;gt; -P&amp;lt;port&amp;gt; -uroot -p&amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建用户后用其它用户操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mysql -u&amp;lt;user&amp;gt; -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本地执行sql语句或mysql客户端命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mysql -u&amp;lt;username&amp;gt; -p&amp;lt;password&amp;gt; &amp;lt;database&amp;gt; -e/--execute &amp;lt;sql query&amp;gt;
$ mysql -u&amp;lt;username&amp;gt; -p&amp;lt;password&amp;gt; &amp;lt;database&amp;gt; &amp;lt; test.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;远程执行sql语句或mysql客户端命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mysql -h&amp;lt;host&amp;gt; -P&amp;lt;port&amp;gt; -u&amp;lt;username&amp;gt; -p&amp;lt;password&amp;gt; &amp;lt;database&amp;gt; -e/--execute &amp;lt;sql query&amp;gt;
$ mysql -h&amp;lt;host&amp;gt; -P&amp;lt;port&amp;gt; -u&amp;lt;username&amp;gt; -p&amp;lt;password&amp;gt; &amp;lt;database&amp;gt; &amp;lt; test.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启用&amp;rsquo;load data local&amp;rsquo;命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 交互式
$ mysql --local-infile=1 -uroot -ppassword
# 非交互式
$ mysql --local-infile=1 -uroot -pchengca w3c -e &amp;quot;LOAD DATA LOCAL INFILE &#39;/home/user/customers.txt&#39; INTO TABLE Customers COLUMNS TERMINATED BY &#39;\t&#39; LINES TERMINATED BY &#39;\n&#39;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;导出数据命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mysqldump -u&amp;lt;username&amp;gt; -p&amp;lt;password&amp;gt; &amp;lt;databasename&amp;gt;  &amp;gt;  dump.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mycli:&lt;/p&gt;
&lt;p&gt;A command line client for MySQL that can do auto-completion and syntax highlighting.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/dbcli/mycli&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/dbcli/mycli&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install -U mycli
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;
&lt;p&gt;先用mysql命令进入mysql的命令行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;?         (\?) Synonym for help.
help      (\h) Display this help.

exit      (\q) Exit mysql. Same as quit.
quit      (\q) Quit mysql.

clear     (\c) Clear the current input statement.
connect   (\r) Reconnect to the server. Optional arguments are db and host.
delimiter (\d) Set statement delimiter.
edit      (\e) Edit command with \$EDITOR.
ego       (\G) Send command to mysql server, display result vertically.
go        (\g) Send command to mysql server.
nopager   (\n) Disable pager, print to stdout.
notee     (\t) Don&#39;t write into outfile.
pager     (\P) Set PAGER [to_pager]. Print the query results via PAGER.
print     (\p) Print current command.
prompt    (\R) Change your mysql prompt.
rehash    (\#) Rebuild completion hash.

source    (\.) Execute an SQL script file. Takes a file name as an argument.
mysql&amp;gt; source /path/to/dump.sql # 从sql导入数据

status    (\s) Get status information from the server.
system    (\!) Execute a system shell command.
tee       (\T) Set outfile [to_outfile]. Append everything into given outfile.

use       (\u) Use another database. Takes database name as argument.
mysql&amp;gt; use database # 切换到数据库

charset   (\C) Switch to another charset. Might be needed for processing binlog with multi-byte charsets.
warnings  (\W) Show warnings after every statement.
nowarning (\w) Don&#39;t show warnings after every statement.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其它可以在mysql客户端执行的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 从本地一个文件导入数据，列分隔符为\t,行分隔符为\n
LOAD DATA LOCAL INFILE &#39;/home/user/customers.txt&#39; INTO TABLE Customers COLUMNS TERMINATED BY &#39;\t&#39; LINES TERMINATED BY &#39;\n&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;函数和运算符&#34;&gt;函数和运算符&lt;/h1&gt;
&lt;p&gt;date and time：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NOW() // &#39;2018-11-18 16:00:28&#39;
UTC_TIMESTAMP() // &#39;2018-11-18 08:01:04&#39;
CURDATE()  // &#39;2018-11-18&#39;
UTC_DATE() // &#39;2018-11-18&#39;
CURTIME()  // &#39;16:02:18&#39;
UTC_TIME() // &#39;08:03:36&#39;

UNIX_TIMESTAMP() // &#39;1542528051&#39;
DATE() // &#39;2021-1-12&#39;
TIME() // &#39;14:28:00&#39;
DATEDIFF() 
date_format(column, &#39;%Y-%m-%d&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;control flow:：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CASE

IF()
IFNULL(column, 0)
NULLIF()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;comparison:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;COALESCE(column, 0)

ISNULL()
IS NULL

IN()
NOT IN()
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sql&#34;&gt;SQL&lt;/h1&gt;
&lt;p&gt;注意：hostname 指定能连接的server，%表示任何server．&lt;/p&gt;
&lt;p&gt;查看版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT VERSION();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看所有用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT DISTINCT(USER) FROM mysql.user;
SELECT user,host,plugin FROM mysql.user;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看当前用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT USER();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建/删除用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE USER &#39;username&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;;
DROP USER &#39;username&#39;@&#39;%&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置和更改密码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UPDATE mysql.user SET PASSWORD(&#39;password&#39;) WHRER USER=&#39;username&#39; AND HOST=&#39;hostname&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看所有数据库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show databases;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看当前数据库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT DATABASE();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建/删除数据库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE DATABASE databasename;
DROP DATABASE databasename;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定数据库对用户授权：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GRANT ALL PRIVILEGES ON databasename.* TO &#39;username&#39;@&#39;%&#39;;
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看权限：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SHOW GRANTS FOR &#39;username&#39;@&#39;%&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用数据库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use databasename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看所有表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show tables;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看表结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;desc tablename;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正则：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 类似like，特殊字符要用双反斜杠转义.
select * from tablename where colume REGEXP &#39;...&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看系统配置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show variables like &#39;version&#39;;
select @@version;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;issue&#34;&gt;Issue&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;mysql8  workbench 连不上的问题 :&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;issue:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;authentication plugin &#39;caching_sha2_password&#39; cannot be loaded: the specified module could not be found。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fix：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql8 开始默认授权插件改成caching_sha2_password.
可以指定为--default-authentication-plugin=mysql_native_password，
alter user &#39;sandbox&#39;@&#39;%&#39; identified with mysql_native_password by &#39;password&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;max_commection 问题:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;issue:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;当连接池连接数量超过最大连接数就无法再建立连接
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show processlist;
show variables like &#39;max_connections&#39;;
set global max_connections = 2048;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;1153, &amp;ldquo;Got a packet bigger than &amp;lsquo;max_allowed_packet&amp;rsquo; bytes&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;issue:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;请求数据超过限制，默认可能是4M
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 设置成最大值1G
select @@max_allowed_packet;
SET GLOBAL max_allowed_packet = 1024 * 1024 * 1024;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;1205, &amp;lsquo;Lock wait timeout exceeded; try restarting transaction&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;issue:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;后提交的事务等待前面处理的事务释放锁，但是在等待的时候超过了mysql的锁等待时
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 首先优化表索引.
select @@innodb_lock_wait_timeout
set global innodb_lock_wait_timeout=100;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5. 1840 (HY000) at line 24: @@GLOBAL.GTID_PURGED can only be set when @@GLOBAL.GTID_EXECUTED is empty.&lt;/p&gt;
&lt;p&gt;fix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;mysql&amp;gt; reset master&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;
</description>
        </item>
        <item>
        <title>MSSql</title>
        <link>https://canuxcheng.com/post/mssql/</link>
        <pubDate>Wed, 06 Apr 2016 15:33:42 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/mssql/</guid>
        <description>&lt;h1 id=&#34;mssql&#34;&gt;MSSQL&lt;/h1&gt;
&lt;p&gt;商业版：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;企业版&lt;/li&gt;
&lt;li&gt;商业智能版&lt;/li&gt;
&lt;li&gt;标准版&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;免费版：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Express&lt;/li&gt;
&lt;li&gt;Developer&lt;/li&gt;
&lt;li&gt;Compact&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;li&gt;SQL Azure&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;system databases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;master 主数据库&lt;/li&gt;
&lt;li&gt;model  模板数据库&lt;/li&gt;
&lt;li&gt;msdb   自动机数据库&lt;/li&gt;
&lt;li&gt;tempdb 零时交换数据库,不需要备份,挂载到独立的子系统。&lt;/li&gt;
&lt;li&gt;resource&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;default port：1433&lt;/p&gt;
&lt;p&gt;2008: max instance 16&lt;/p&gt;
&lt;p&gt;2012: max instance 256&lt;/p&gt;
&lt;p&gt;Client -&amp;gt; SNAC(OLE DB/ODBC) -&amp;gt; Network Libraries -&amp;gt; TDS &amp;lt;=&amp;gt; Server -&amp;gt; Endpoints -&amp;gt; SQL OS(relational engine/storage engine)&lt;/p&gt;
&lt;h2 id=&#34;gui&#34;&gt;GUI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SSMS&lt;/p&gt;
&lt;p&gt;SQL Server Management Studio是mssql的图形化管理界面。&lt;/p&gt;
&lt;p&gt;从模板中获取常用的SQL：&lt;/p&gt;
&lt;p&gt;view -&amp;gt; template explorer + query -&amp;gt; specify values for template parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSIS&lt;/p&gt;
&lt;p&gt;数据集成服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cliconfg.exe&lt;/p&gt;
&lt;p&gt;用于给数据库取别名并分发。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sqlcmd&lt;/p&gt;
&lt;p&gt;SQL Server的命令行界面。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  sqlcmd -? # 查看帮助
  sqlcmd /?
  sqlcmd -A # 管理员专用模式。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bcp&lt;/p&gt;
&lt;p&gt;数据库import/export工具&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  bcp -? # 查看帮助
  bcp XXX out XXX -T -c
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sqlps&lt;/p&gt;
&lt;p&gt;SQL Server的PowerShell命令行模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;
&lt;p&gt;三种数据类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;system data types&lt;/li&gt;
&lt;li&gt;alias data types&lt;/li&gt;
&lt;li&gt;user-defined data types&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;system data有下面类型：&lt;/p&gt;
&lt;p&gt;可以通过SSMS查看。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tinyint: 8bits
smallint: 16bits
int: 32bits
bigint: 64bits
decimal:
numeric:
smallmoney: 32bits
money: 64bits
bit: 0/1

float: &amp;lt;=53bits
real: 32bits

date:
datetime2:
datetime:
datetimeoffset:
smalldatetime:
time:

# 只能用单引号，不能用双引号
char:
nchar:
varchar:
nvarchar:
varchar(max): &amp;lt;=2GB
nvarchar(max): &amp;lt;=2GB

rowversion:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;data-attribution&#34;&gt;data attribution&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;uniqueidentifer

null
not null

unicode

collate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;modify-data-type&#34;&gt;modify data type&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cast

convert

try_convert

parse

try_parse

Implicit data conversion(隐式的数据转换)。
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;函数和操作符&#34;&gt;函数和操作符&lt;/h1&gt;
&lt;p&gt;date &amp;amp; time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Current_Timestamp // 2018-11-18 00:33:27.840
Getdate() // 2018-11-18 00:34:00.173
Getutcdate() // 2018-11-18 08:34:11.137

Sysdatetime() // 2018-11-18 00:34:59.9698057
Sysutcdatetime() // 2018-11-18 08:35:30.6485379

DATEDIFF(datepart varchar, startingdate datetime, endingdate datetime) // 返回两个时间的间隔
DATEDIFF(s, &#39;1970-01-01 00:00:00&#39;, GETUTCDATE()) # 当前时间的epoch time.
DATEADD()
DATEPART()
DATENAME()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;other:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Cast()
Nullif()
Isnull(column, 0)    column为NULL函数返回0
Convert()
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;常用sql&#34;&gt;常用sql&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;select @@version()
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;security&#34;&gt;Security&lt;/h1&gt;
&lt;p&gt;设置权限：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据库服务器级别权限&lt;/li&gt;
&lt;li&gt;数据库权限&lt;/li&gt;
&lt;li&gt;表级权限(schema)&lt;/li&gt;
&lt;li&gt;列级权限&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据库服务器的security&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以创建Logins用户，包括sa帐号和windows的AD帐号。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库的security&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以创建Users用户，用于连接这个数据库。&lt;/li&gt;
&lt;li&gt;可以创建和设置schemas,默认dbo。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;权限的设置在SSMS的 属性-&amp;gt;权限 里面设置。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;
&lt;h2 id=&#34;tables&#34;&gt;tables&lt;/h2&gt;
&lt;p&gt;创建create，更新alert，删除drop都是标准sql。&lt;/p&gt;
&lt;p&gt;插入insert，更改update，删除delete表的内容都是标准sql。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;merge&lt;/p&gt;
&lt;p&gt;使用merge来快速插入，没有就insert，有就update。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;views&#34;&gt;views&lt;/h2&gt;
&lt;p&gt;创建create，更新alert，删除drop都是标准sql。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;system views&lt;/p&gt;
&lt;p&gt;系统视图都是以sys开头的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SELECT * FROM [dbname].sys.databases # 查询所有数据库信息。
  SELECT * FROM [dbname].sys.servers
  SELECT * FROM [dbname].sys.services
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户自定义的view&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;index&#34;&gt;index&lt;/h2&gt;
&lt;p&gt;创建create，更新alert，删除drop都是标准sql。&lt;/p&gt;
&lt;p&gt;table和view都有index。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;database-actions&#34;&gt;database actions&lt;/h1&gt;
&lt;h2 id=&#34;administrator-command&#34;&gt;administrator command&lt;/h2&gt;
&lt;p&gt;sa是数据库默认的管理员,dbcc需要sa权限执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DBCC HELP(&#39;?&#39;) # 查询所有DBCC命令
DBCC HELP(&#39;command&#39;) # 查询具体命令的帮助
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建/删除数据库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE DATABASE databasename;
DROP DATABASE databasename;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;replication&#34;&gt;replication&lt;/h2&gt;
&lt;p&gt;在不同的数据库服务器之间导数据。&lt;/p&gt;
&lt;h2 id=&#34;transaction-log-ship&#34;&gt;transaction log ship&lt;/h2&gt;
&lt;p&gt;在不同的数据库服务器之间导数据。&lt;/p&gt;
&lt;h2 id=&#34;db-tasks-importexportcopy&#34;&gt;db-&amp;gt;tasks-&amp;gt;import/export/copy&lt;/h2&gt;
&lt;p&gt;导入/导出/复制，以表为单位进行复制。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;programmabilityt-sql&#34;&gt;programmability(T-SQL)&lt;/h1&gt;
&lt;h2 id=&#34;sql-query&#34;&gt;sql query&lt;/h2&gt;
&lt;p&gt;和标准SQL操作一样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bulk insert
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;stored-procedures&#34;&gt;Stored Procedures&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;system stored Procedures(系统自带的SP)&lt;/p&gt;
&lt;p&gt;sys.sp_XXX是系统SP。
sys.xp_XXX是扩展SP。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户自定义的SP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建SP&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; CREATE PROCEDURE &amp;lt;schema&amp;gt;.&amp;lt;procedure&amp;gt;
     @p1 type = value1
     @p2 type = value2
     ...
 AS
 BEGIN
     SELECT @p1, @p2, ...
 END
 GO
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改SP&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ALERT PROCEURE &amp;lt;schema&amp;gt;.&amp;lt;procedure&amp;gt;
     @p1 type2 = value1
     @p2 type2 = value2
     ...
 AS
     SELECT @p1, @p2 ...
 GO
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行SP&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; EXECUTE/EXEC &amp;lt;Schema&amp;gt;.&amp;lt;Procedure&amp;gt; &amp;lt;value1&amp;gt; &amp;lt;value2&amp;gt; ...
 GO

 该sql语句可以执行dos命令
 exec xp_cmdshell &#39;net user username 2546 /add&#39; # 新建系统用户
 exec xp_cmdshell &#39;net localgroup administrator username /add&#39; # 授权
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除SP&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; DROP PROCEDURE &amp;lt;procedure&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;system functions&lt;/p&gt;
&lt;p&gt;系统自带的函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SELECT @@VERSION
  SELECT @@SERVERNAME
  SELECT @@SERVICENAME
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scalar functions&lt;/p&gt;
&lt;p&gt;scalar-valued: 标量函数，返回单一值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;table-valued functions&lt;/p&gt;
&lt;p&gt;表值函数，返回一个数据和类型对的表。
inline table-valued: 内嵌的表值函数。
multi-statement table-valued:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建scalar-valued函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; CREATE FUNCTION &amp;lt;schema&amp;gt;.&amp;lt;function&amp;gt; (@p1 type1)
 RETURNS return_value_datatype
 WITH EXECUTE AS CALLER
 AS
 BEGIN
 body of the function
 END
 GO
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建inline table-valued函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建multi-statement table-valued函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; DROP FUNCTION &amp;lt;schema&amp;gt;.&amp;lt;function&amp;gt;
 GO
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;debug&#34;&gt;debug&lt;/h2&gt;
&lt;p&gt;11-16&lt;/p&gt;
&lt;p&gt;RAISE ERROR&lt;/p&gt;
&lt;p&gt;THROW error, &amp;lsquo;msg&amp;rsquo;, number;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;wmi&#34;&gt;wmi&lt;/h1&gt;
&lt;p&gt;安装mssql之后提供mssql的wmi的类：&lt;/p&gt;
&lt;p&gt;通过运行wql获取数据库属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select * from Win32_PerfFormattedData_MSSQLSERVER_SQLServerLocks
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;powershell&#34;&gt;powershell&lt;/h1&gt;
&lt;p&gt;通过powershell运行sql语句或store procedure：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$connection = new-object System.Data.SqlClient.SqlConnection &amp;quot;Server=$server;Database=$database&amp;quot;;Trusted_Connection=True&amp;quot;
$connection.Open()
$sql = &amp;quot;select @@version&amp;quot;
$command = new-object System.Data.SqlClient.SqlCommand $sql $connection
$return = $command.ExecuteReader()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装mssql之后提供mssql的powershell模块sqlps：&lt;/p&gt;
&lt;p&gt;通过模块的命令运行sql语句和store procedure。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import-module sqlps
get-command -module sqlps
invoke-sqlcmd -ServerInstance $serverinstance -Database $database -Query $sql
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;freetds&#34;&gt;freeTDS&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;FreeTDS is a set of libraries for Unix and Linux that allows your programs to natively talk to Microsoft SQL Server and Sybase databases.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.freetds.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.freetds.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/FreeTDS/freetds&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/FreeTDS/freetds&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo apt-get install freetds-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置freetds，/etc/freetds/freetds.conf:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# A typical Microsoft server
[egServer70]
        host = ntmachine.domain.com
        port = 1433
        tds version = 7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;freetds的命令行工具tsql:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install freetds-bin
$ man tsql
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Microsoft/mssql-monitoring&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Microsoft/mssql-monitoring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blogs.msdn.microsoft.com/sqlcat/2017/07/03/how-the-sqlcat-customer-lab-is-monitoring-sql-on-linux/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blogs.msdn.microsoft.com/sqlcat/2017/07/03/how-the-sqlcat-customer-lab-is-monitoring-sql-on-linux/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/zh-cn/sql/relational-databases/system-dynamic-management-views/system-dynamic-management-views?view=sql-server-2017&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.microsoft.com/zh-cn/sql/relational-databases/system-dynamic-management-views/system-dynamic-management-views?view=sql-server-2017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/zh-cn/sql/relational-databases/system-dynamic-management-views/sql-server-operating-system-related-dynamic-management-views-transact-sql?view=sql-server-2017&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.microsoft.com/zh-cn/sql/relational-databases/system-dynamic-management-views/sql-server-operating-system-related-dynamic-management-views-transact-sql?view=sql-server-2017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考telegraf/inputs/sqlserver.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Postgresql</title>
        <link>https://canuxcheng.com/post/postgre/</link>
        <pubDate>Sun, 03 Apr 2016 14:46:14 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/postgre/</guid>
        <description>&lt;h1 id=&#34;postgresql&#34;&gt;PostgreSQL&lt;/h1&gt;
&lt;p&gt;安装postgresql：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装第三方库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install postgresql-contrib-9.3 libpg-dev postgresql-server-dev-9.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GUI工具： pgAdminIII&lt;/p&gt;
&lt;p&gt;CLI工具： psql&lt;/p&gt;
&lt;p&gt;postgresql的端口是5432．&lt;/p&gt;
&lt;h1 id=&#34;postgresql命令&#34;&gt;postgresql命令&lt;/h1&gt;
&lt;p&gt;安装完成后默认的admin就是postgres, postgres里有默认数据库postgres.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$passwd postgres # 修改默认管理员用户postgres的密码
$su - postgres # 切换到默认的postgres用户

$ psql [OPTION]... [DBNAME [USERNAME]]

$createuser &amp;lt;username&amp;gt; -P # 在命令行添加用户
$dropuser &amp;lt;username&amp;gt; # 在命令行删除用户

$createdb &amp;lt;database&amp;gt; -O &amp;lt;username&amp;gt; # 在命令行添加数据库
$dropdb &amp;lt;database&amp;gt; # 在命令行删除数据库

# 交互式:
$ psql -U [username] [database]

# 非交互式：
$ PGPASSWORD=&#39;password&#39;;psql -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; -U &amp;lt;username&amp;gt; -d [database] -c &amp;quot;[psql command]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;导出数据：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pg_dump dbname &amp;gt; out.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pgcli:&lt;/p&gt;
&lt;p&gt;This is a postgres client that does auto-completion and syntax highlighting.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/dbcli/pgcli&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/dbcli/pgcli&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install -U pgcli
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;
&lt;p&gt;先用psql进入postgre的命令行.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;help # 查看所有信息
\? # 查看psql命令
\h # 查看sql命令
\g # 执行sql语句
\q # 退出psql

\du # 查看所有用户信息
\l # 查询当前用户的所有数据库
\c &amp;lt;database&amp;gt; # 切换数据库
\c &amp;lt;database&amp;gt; &amp;lt;username&amp;gt; # 登陆用户的数据库
\dt 等效于show tables;
\d # 查看表关系
\d &amp;lt;table&amp;gt; # 查询表结构
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;
&lt;h1 id=&#34;函数&#34;&gt;函数&lt;/h1&gt;
&lt;h1 id=&#34;sql&#34;&gt;SQL&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;ALTER USER/ROLE &amp;lt;username&amp;gt; WITH PASSWORD &amp;lt;password&amp;gt;; #更改用户密码
SELECT username/* FROM pg_user; # 查看所有用户
SELECT username/* FROM pg_shadow; # 查看所有用户密码

CREATE GROUP &amp;lt;groupname&amp;gt;; # 添加用户组
ALTER GROUP &amp;lt;groupname&amp;gt; ADD USER &amp;lt;username&amp;gt;,&amp;lt;username1&amp;gt;,...; # 添加用户到组
ALTER GROUP &amp;lt;groupname&amp;gt; DROP USER &amp;lt;username&amp;gt;,&amp;lt;username1&amp;gt;,...; # 从组删除用户

CREATE ROLE &amp;lt;username&amp;gt; PASSWORD &amp;lt;password&amp;gt;; # 创建用户和密码
CREATE ROLE &amp;lt;username&amp;gt; LOGIN;
CREATE ROLE &amp;lt;username&amp;gt; SUPERUSER;
CREATE ROLE &amp;lt;username&amp;gt; CREATEDB;
CREATE ROLE &amp;lt;username&amp;gt; CREATEROLE;
CREATE ROLE &amp;lt;username&amp;gt; REPLICATION;
DROP ROLE &amp;lt;username&amp;gt;; # 删除role

SELECT datname/* FROM pg_database; # 查询当前用户的所有数据库
CREATE DATABASE &amp;lt;database&amp;gt; OWNER=&amp;lt;username&amp;gt;; # 创建数据库
DROP DATABASE &amp;lt;database&amp;gt;; # 删除数据库

SELECT tablename/* FROM pg_tables; # 查看所有表
CREATE TABLE tablename(
&amp;lt;type&amp;gt; &amp;lt;name&amp;gt;,
...
); # 创建表
DROP TABLE &amp;lt;table&amp;gt;; # 删除表

SELECT version();
SELECT current_date;
SELECT current_time;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
