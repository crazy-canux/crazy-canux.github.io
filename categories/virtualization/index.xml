<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Virtualization on Morgoth</title>
    <link>https://canuxcheng.com/categories/virtualization/</link>
    <description>Recent content in Virtualization on Morgoth</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 May 2021 20:55:52 +0800</lastBuildDate>
    <atom:link href="https://canuxcheng.com/categories/virtualization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KubeVirt</title>
      <link>https://canuxcheng.com/post/k8s_kubevirt/</link>
      <pubDate>Mon, 10 May 2021 20:55:52 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_kubevirt/</guid>
      <description>&lt;h1 id=&#34;kubevirt&#34;&gt;KubeVirt&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubevirt.io/quickstart_cloud/&#34;&gt;https://kubevirt.io/quickstart_cloud/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://quay.io/organization/kubevirt&#34;&gt;https://quay.io/organization/kubevirt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.fedoraproject.org/en-US/quick-docs/using-nested-virtualization-in-kvm/index.html&#34;&gt;https://docs.fedoraproject.org/en-US/quick-docs/using-nested-virtualization-in-kvm/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;virtctl&#34;&gt;virtctl&lt;/h2&gt;&#xA;&lt;h2 id=&#34;vm&#34;&gt;VM&lt;/h2&gt;&#xA;&lt;p&gt;创建vm&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;apiVersion: kubevirt.io/v1&#xA;kind: VirtualMachine&#xA;metadata:&#xA;name: testvm&#xA;spec:&#xA;running: false&#xA;template:&#xA;    metadata:&#xA;    labels:&#xA;        kubevirt.io/size: small&#xA;        kubevirt.io/domain: testvm&#xA;    spec:&#xA;    domain:&#xA;        devices:&#xA;        disks:&#xA;            - name: containerdisk&#xA;            disk:&#xA;                bus: virtio&#xA;            - name: cloudinitdisk&#xA;            disk:&#xA;                bus: virtio&#xA;        interfaces:&#xA;        - name: default&#xA;            masquerade: {}&#xA;        resources:&#xA;        requests:&#xA;            memory: 64M&#xA;    networks:&#xA;    - name: default&#xA;        pod: {}&#xA;    volumes:&#xA;        - name: containerdisk&#xA;        containerDisk:&#xA;            image: quay.io/kubevirt/cirros-container-disk-demo&#xA;        - name: cloudinitdisk&#xA;        cloudInitNoCloud:&#xA;            userDataBase64: SGkuXG4=&#xA;    nodeSelector:&#xA;        kubernetes.io/arch: arm64&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Virtualbox</title>
      <link>https://canuxcheng.com/post/virtualbox/</link>
      <pubDate>Mon, 03 Jun 2019 22:53:23 +0800</pubDate>
      <guid>https://canuxcheng.com/post/virtualbox/</guid>
      <description>&lt;h1 id=&#34;virtualbox&#34;&gt;Virtualbox&lt;/h1&gt;&#xA;&lt;p&gt;虚拟化工具virtualbox.&lt;/p&gt;&#xA;&lt;h1 id=&#34;vboxmanage&#34;&gt;vboxmanage&lt;/h1&gt;&#xA;&lt;p&gt;vm&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 导入ova&#xA;$ vboxmanage import win7.ova &#xA;&#xA;// 添加host网络&#xA;$ vboxmanage modifyvm &amp;quot;win764&amp;quot; --nic1 hostonly --hostonlyadapter1 vboxnet0&#xA;// 添加bridge网络&#xA;$ vboxmanage modifyvm &amp;quot;Win732&amp;quot; --nic2 bridged --bridgeadapter2 docker_gwbridge&#xA;// 重命名vm&#xA;$ vboxmanage modifyvm &amp;lt;vm&amp;gt; --name &amp;lt;new-name&amp;gt; &#xA;// 修改参数&#xA;$ vboxmanage modifyvm &amp;lt;vm&amp;gt; --memory 4096 --cpus 4 --hwvirtex on --ioapic on&#xA;&#xA;// 启动虚拟机&#xA;$ vboxmanage startvm &amp;quot;Win732&amp;quot;&#xA;$ vboxmanage startvm &amp;lt;vm&amp;gt; --type headless &#xA;$ VBoxHeadless --startvm &amp;lt;uuid|name&amp;gt; --vrde on&#xA;&#xA;// 控制虚拟机&#xA;$ vboxmanage controlvm &amp;lt;vm&amp;gt; pause/resume/reset/poweroff/savestate&#xA;&#xA;// 查看所有/运行虚拟机&#xA;$ vboxmanage list vms/runningvms &#xA;&#xA;// 删除vm&#xA;$ vboxmanage unregistervm &amp;lt;vm&amp;gt; --delete&#xA;&#xA;// linux上执行命令&#xA;$ vboxmanage guestcontrol {} --username {} --password {} run --exe /bin/bash -- -l -c &#39;pwd&#39;&#xA;&#xA;// windows上执行命令&#xA;$ vboxmanage guestcontrol {} --username &#39;Administrator&#39; run --exe &#39;C:\\Program Files\\Oracle\\VirtualBox Guest Additions\\uninst.exe&#39; -- uninst.exe /S&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;media&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kvm</title>
      <link>https://canuxcheng.com/post/kvm/</link>
      <pubDate>Wed, 05 Apr 2017 21:47:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/kvm/</guid>
      <description>&lt;h1 id=&#34;kvm&#34;&gt;KVM&lt;/h1&gt;&#xA;&lt;p&gt;Kernel-based Virtual Machine.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;qemu&#34;&gt;Qemu&lt;/h1&gt;&#xA;&lt;p&gt;安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install qemu-system qemu-kvm&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Libvirt</title>
      <link>https://canuxcheng.com/post/libvirt/</link>
      <pubDate>Wed, 05 Apr 2017 21:47:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/libvirt/</guid>
      <description>&lt;h1 id=&#34;libvirt&#34;&gt;Libvirt&lt;/h1&gt;&#xA;&lt;p&gt;支持多种虚拟化平台的库&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://libvirt.org/&#34;&gt;https://libvirt.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libvirt-bin (包含virsh命令和libvirtd daemon)&#xA;// libvirtd在container中无法运行；在container中安装libvirt-bin可以获取virsh命令远程访问libvirt-bin server.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;libvirt-bin拆分成了两个包：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;libvirt-daemon-system&#xA;libvirt-clients&#xA;&#xA;$ sudo apt-get install libvirt-dev # 库, python/go client依赖该库&#xA;&#xA;$ sudo apt-get install virt-manager # windows管理工具&#xA;&#xA;$ sudo apt-get install virt-view # ...&#xA;&#xA;$ sudo service libvirt-bin restart&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;virsh&#34;&gt;virsh&lt;/h1&gt;&#xA;&lt;p&gt;libvirt的命令行工具&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ virsh list --all    # 查看所有虚拟机&#xA;$ virsh list --all --name # 只看domain name.&#xA;&#xA;$ virsh define /path/to/X.xml    # 从xml配置文件定义一个domain&#xA;$ virsh start     # 启动虚拟机&#xA;$ virsh reboot    # 重启虚拟机&#xA;$ virsh shutdown   # 关闭虚拟机&#xA;$ virsh destroy    # 强制关闭虚拟机&#xA;$ virsh undefine   # 移除虚拟机&#xA;$ virsh vncdisplay # 查看虚拟机的vnc信息，可以通过vnc访问.&#xA;&#xA;$ virsh net-list --all # 查看所有网络&#xA;$ virsh net-define default.xml&#xA;$ virsh net-autostart default&#xA;$ virsh net-start default&#xA;$ virsh net-undefine default&#xA;$ virsh net-destroy default&#xA;&#xA;# 批量操作vm&#xA;$ for vm in `virsh list --all --name`; do virsh undefine/destroy ${vm}; done&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;qemu-img&#34;&gt;qemu-img&lt;/h1&gt;&#xA;&lt;p&gt;创建虚拟机的镜像文件:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vagrant</title>
      <link>https://canuxcheng.com/post/vagrant/</link>
      <pubDate>Thu, 12 Jan 2017 21:00:01 +0000</pubDate>
      <guid>https://canuxcheng.com/post/vagrant/</guid>
      <description>&lt;h1 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h1&gt;&#xA;&lt;p&gt;构建在虚拟化技术之上的虚拟机运行环境管理工具．&lt;/p&gt;&#xA;&lt;p&gt;适合用来构建和分发开发环境．通过命令行可以批量自动化，不用一个一个安装配置图形界面的虚拟机．&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mitchellh/vagrant&#34;&gt;https://github.com/mitchellh/vagrant&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;需要安装virtualbox或vmware等虚拟机.&lt;/p&gt;&#xA;&lt;p&gt;vagrant还支持其它的providers(docker, vmware, hyper-v, aws)&lt;/p&gt;&#xA;&lt;p&gt;可以在这里找到很多vagrant可用的box:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://atlas.hashicorp.com/boxes/search&#34;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;初始化&#34;&gt;初始化&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ mkdir -p /home/user/vagrant&#xA;$ cd /vagrant&#xA;&#xA;# 在当前目录生成一个Vagrantfile文件, 需手动添加vm.box&#xA;$ vagrant init &#xA;&#xA;# 相当于直接添加了vm.box到Vagrantfile.&#xA;$ vagrant init [box-name]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;添加box&#34;&gt;添加box&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 默认从https://atlas.hashicorp.com/boxes/search下载该box.&#xA;$ vagrant box add [[--name ]box-name] hashicorp/precise64&#xA;&#xA;# 也可以使用下载到本地的box&#xA;$ vagrant box add [[--name ]box-name] /path/to/your.box&#xA;&#xA;# 也可以使用自己的服务器上的box&#xA;$ vagrant box add [[--name ]box-name] URL&#xA;&#xA;# 添加box之后修改Vagrantfile,添加vm.box:&#xA;Vagrant.configure(&amp;quot;2&amp;quot;) do |config|&#xA;  config.vm.box = &amp;quot;[box-name]&amp;quot;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;使用box&#34;&gt;使用box&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vagrant up [box-name]&#xA;$ vagrant up --provider docker/aws/vmware/hyperv/... [box-name]&#xA;&#xA;$ vagrant ssh&#xA;# 会进入一个vagrant@precise64:~$的环境．&#xA;# /vagrant 是一个和/home/user/vagrant同步的路径．&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;结束使用&#34;&gt;结束使用&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vagrant status # 查看box状态&#xA;$ vagrant halt # 关闭box&#xA;$ vagrant reload # 重启box&#xA;$ vagrant suspend&#xA;$ vagrant resume&#xA;$ vagrant provision&#xA;&#xA;# 会销毁box占用的所有资源，但不删除box.&#xA;$ vagrant destroy&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;管理box&#34;&gt;管理box&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vagrant box list&#xA;$ vagrant box remove&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;其它&#34;&gt;其它&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vagrant global-status&#xA;$ vagrant global-status --prune&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;配置vagrantfile&#34;&gt;配置Vagrantfile&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;config.vm.box_version = &amp;quot;1.1.0&amp;quot;&#xA;cfg.vm.hostname = &amp;quot;ubuntu.labs&amp;quot;&#xA;&#xA;# 端口映射, 把主机的端口映射到vagrant的box&#xA;# 访问主机的该端口就是访问vagrant的box&#xA;cfg.vm.network :forward_port, guest: 80, host: 8080&#xA;&#xA;# 私有网络，只有主机可以访问vagrant的box.&#xA;# 如果多个vagrant的box设定在同一个网段也可以互相访问．&#xA;cfg.vm.network :private_network, ip: &amp;quot;192.168.50.10&amp;quot;&#xA;&#xA;# 公有网络，vagrant的box和主机使用一样的网络．&#xA;cfg.vm.network :public_network&#xA;cfg.vm.network :public_network, ip: &amp;quot;192.168.1.1&amp;quot;&#xA;&#xA;cfg.vm.synced_folder &amp;quot;/var/tmp/pkg-build&amp;quot;, &amp;quot;/var/tmp/pkg-build&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;打包&#34;&gt;打包&lt;/h1&gt;&#xA;&lt;p&gt;用户可以打包自己的开发环境，然后分发出去．&lt;/p&gt;</description>
    </item>
    <item>
      <title>Esxi</title>
      <link>https://canuxcheng.com/post/esxi/</link>
      <pubDate>Tue, 05 Apr 2016 21:47:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/esxi/</guid>
      <description>&lt;h1 id=&#34;vmware&#34;&gt;VMware&lt;/h1&gt;&#xA;&lt;p&gt;vSphere是vmware的虚拟化平台,包括ESXi和vSphere Client.&lt;/p&gt;&#xA;&lt;p&gt;vSphere Hypervisor(也叫ESXi)是vSphere的免费裸机hypervisor. 把物理机虚拟出多个虚拟机．&lt;/p&gt;&#xA;&lt;p&gt;vSphere client是vSphere的简单管理工具．只能管理一台ESXi物理机和上面的虚拟机．&lt;/p&gt;&#xA;&lt;p&gt;vCenter Server是vSphere的高级管理系统．需单独购买．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;配置管理&#34;&gt;配置管理&lt;/h1&gt;&#xA;&lt;p&gt;开启虚拟机copy/paste功能：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 通过vsphere client&#xA;edit properties -&amp;gt; Options -&amp;gt; Advanced -&amp;gt; General -&amp;gt; configuration Parameters&#xA;# isolation.tools.copy.disable    false&#xA;# isolation.tools.paste.disable    false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;开启虚拟机的虚拟化功能：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 通过ssh到esxi服务器&#xA;$ vim /vmfs/volumes/datastore1/Ubuntu1604/Ubuntu1604.vmx&#xA;vhv.enable = &amp;quot;TRUE&amp;quot; # 添加到最后一行&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建的vm命名不能带小数点.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;命令&#34;&gt;命令&lt;/h1&gt;&#xA;&lt;p&gt;vim-cmd:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;vim-cmd vmsvc/getallvms # 获取所有虚拟机&#xA;vim-cmd vmsvc/reload&#xA;vim-cmd vmsvc/power.on vmid&#xA;vim-cmd vmsvc/power.shutdown vimid&#xA;vim-cmd vmsvc/power.off vimid&#xA;vim-cmd vmsvc/power.reboot vimid&#xA;&#xA;# power on all vms&#xA;for vm in `vim-cmd vmsvc/getallvms | awk &#39;{if (NR&amp;gt;1) {print $1}}&#39;`;&#xA;do&#xA;    echo &amp;quot;power on ${vm}...&amp;quot;;&#xA;    vim-cmd vmsvc/power.on ${vm}&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;esxcli:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Virtualization</title>
      <link>https://canuxcheng.com/post/virtualization/</link>
      <pubDate>Tue, 05 Apr 2016 21:47:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/virtualization/</guid>
      <description>&lt;h1 id=&#34;virtualization&#34;&gt;Virtualization&lt;/h1&gt;&#xA;&lt;p&gt;虚拟化技术的发展：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;DataCenter, 最原始的数据中心&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Virtualization, 虚拟化技术，包括Kvm, Xen(Citrix), HyperV(MicroSoft), ESXi(VMware)等&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;</description>
    </item>
  </channel>
</rss>
