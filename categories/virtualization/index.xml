<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Virtualization on Morgoth</title>
        <link>https://canuxcheng.com/categories/virtualization/</link>
        <description>Recent content in Virtualization on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 10 May 2021 20:55:52 +0800</lastBuildDate><atom:link href="https://canuxcheng.com/categories/virtualization/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>KubeVirt</title>
        <link>https://canuxcheng.com/post/k8s_kubevirt/</link>
        <pubDate>Mon, 10 May 2021 20:55:52 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/k8s_kubevirt/</guid>
        <description>&lt;h1 id=&#34;kubevirt&#34;&gt;KubeVirt&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kubevirt.io/quickstart_cloud/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubevirt.io/quickstart_cloud/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://quay.io/organization/kubevirt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://quay.io/organization/kubevirt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.fedoraproject.org/en-US/quick-docs/using-nested-virtualization-in-kvm/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.fedoraproject.org/en-US/quick-docs/using-nested-virtualization-in-kvm/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;virtctl&#34;&gt;virtctl&lt;/h2&gt;
&lt;h2 id=&#34;vm&#34;&gt;VM&lt;/h2&gt;
&lt;p&gt;创建vm&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
name: testvm
spec:
running: false
template:
    metadata:
    labels:
        kubevirt.io/size: small
        kubevirt.io/domain: testvm
    spec:
    domain:
        devices:
        disks:
            - name: containerdisk
            disk:
                bus: virtio
            - name: cloudinitdisk
            disk:
                bus: virtio
        interfaces:
        - name: default
            masquerade: {}
        resources:
        requests:
            memory: 64M
    networks:
    - name: default
        pod: {}
    volumes:
        - name: containerdisk
        containerDisk:
            image: quay.io/kubevirt/cirros-container-disk-demo
        - name: cloudinitdisk
        cloudInitNoCloud:
            userDataBase64: SGkuXG4=
    nodeSelector:
        kubernetes.io/arch: arm64
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Virtualbox</title>
        <link>https://canuxcheng.com/post/virtualbox/</link>
        <pubDate>Mon, 03 Jun 2019 22:53:23 +0800</pubDate>
        
        <guid>https://canuxcheng.com/post/virtualbox/</guid>
        <description>&lt;h1 id=&#34;virtualbox&#34;&gt;Virtualbox&lt;/h1&gt;
&lt;p&gt;虚拟化工具virtualbox.&lt;/p&gt;
&lt;h1 id=&#34;vboxmanage&#34;&gt;vboxmanage&lt;/h1&gt;
&lt;p&gt;vm&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 导入ova
$ vboxmanage import win7.ova 

// 添加host网络
$ vboxmanage modifyvm &amp;quot;win764&amp;quot; --nic1 hostonly --hostonlyadapter1 vboxnet0
// 添加bridge网络
$ vboxmanage modifyvm &amp;quot;Win732&amp;quot; --nic2 bridged --bridgeadapter2 docker_gwbridge
// 重命名vm
$ vboxmanage modifyvm &amp;lt;vm&amp;gt; --name &amp;lt;new-name&amp;gt; 
// 修改参数
$ vboxmanage modifyvm &amp;lt;vm&amp;gt; --memory 4096 --cpus 4 --hwvirtex on --ioapic on

// 启动虚拟机
$ vboxmanage startvm &amp;quot;Win732&amp;quot;
$ vboxmanage startvm &amp;lt;vm&amp;gt; --type headless 
$ VBoxHeadless --startvm &amp;lt;uuid|name&amp;gt; --vrde on

// 控制虚拟机
$ vboxmanage controlvm &amp;lt;vm&amp;gt; pause/resume/reset/poweroff/savestate

// 查看所有/运行虚拟机
$ vboxmanage list vms/runningvms 

// 删除vm
$ vboxmanage unregistervm &amp;lt;vm&amp;gt; --delete

// linux上执行命令
$ vboxmanage guestcontrol {} --username {} --password {} run --exe /bin/bash -- -l -c &#39;pwd&#39;

// windows上执行命令
$ vboxmanage guestcontrol {} --username &#39;Administrator&#39; run --exe &#39;C:\\Program Files\\Oracle\\VirtualBox Guest Additions\\uninst.exe&#39; -- uninst.exe /S
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;media&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 列出所有hdd
$ vboxmanage list hdds

// 删除hdd
$ vboxmanage closemedium disk &amp;lt;uuid&amp;gt; --delete
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;snapshot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//查看快照
$ vboxmanage snapshot &amp;lt;vm&amp;gt; list 

$ vboxmanage snapshot &amp;lt;vm&amp;gt; take &amp;lt;name&amp;gt; --live --pause // 创建快照

$ vboxmanage snapshot &amp;lt;vm&amp;gt; delete &amp;lt;snapshot-name/uuid&amp;gt; // 删除快照

$ vboxmanage snapshot &amp;lt;vm&amp;gt; restore &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;hostonly-network&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vboxmanage hostonlyif crate // 创建hostonly bridge
$ vboxmanage hostonlyif ipconfig vboxnet0 --ip 192.168.1.1 --netmask 255.255.255.0 // 给hostonly bridge分配ip和netmask.
$ vboxmanage hostonlyif remove &amp;lt;name&amp;gt;

// 查看所有hostonly网路
$ vboxmanage list hostonlyifs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bridge-network&lt;/p&gt;
&lt;p&gt;nat-network&lt;/p&gt;
&lt;p&gt;storage&lt;/p&gt;
&lt;p&gt;extpack&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 安装扩展包
$ sudo vboxmanage extpack install Oracle_VM_VirtualBox_Extension_Pack-6.0.8.vbox-extpack
$ sudo vboxmanage extpack uninstall \
&amp;quot;Oracle VM VirtualBox Extension Pack&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Kvm</title>
        <link>https://canuxcheng.com/post/kvm/</link>
        <pubDate>Wed, 05 Apr 2017 21:47:54 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/kvm/</guid>
        <description>&lt;h1 id=&#34;kvm&#34;&gt;KVM&lt;/h1&gt;
&lt;p&gt;Kernel-based Virtual Machine.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;qemu&#34;&gt;Qemu&lt;/h1&gt;
&lt;p&gt;安装:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install qemu-system qemu-kvm
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Libvirt</title>
        <link>https://canuxcheng.com/post/libvirt/</link>
        <pubDate>Wed, 05 Apr 2017 21:47:54 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/libvirt/</guid>
        <description>&lt;h1 id=&#34;libvirt&#34;&gt;Libvirt&lt;/h1&gt;
&lt;p&gt;支持多种虚拟化平台的库&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://libvirt.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://libvirt.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libvirt-bin (包含virsh命令和libvirtd daemon)
// libvirtd在container中无法运行；在container中安装libvirt-bin可以获取virsh命令远程访问libvirt-bin server.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;libvirt-bin拆分成了两个包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;libvirt-daemon-system
libvirt-clients

$ sudo apt-get install libvirt-dev # 库, python/go client依赖该库

$ sudo apt-get install virt-manager # windows管理工具

$ sudo apt-get install virt-view # ...

$ sudo service libvirt-bin restart
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;virsh&#34;&gt;virsh&lt;/h1&gt;
&lt;p&gt;libvirt的命令行工具&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ virsh list --all    # 查看所有虚拟机
$ virsh list --all --name # 只看domain name.

$ virsh define /path/to/X.xml    # 从xml配置文件定义一个domain
$ virsh start     # 启动虚拟机
$ virsh reboot    # 重启虚拟机
$ virsh shutdown   # 关闭虚拟机
$ virsh destroy    # 强制关闭虚拟机
$ virsh undefine   # 移除虚拟机
$ virsh vncdisplay # 查看虚拟机的vnc信息，可以通过vnc访问.

$ virsh net-list --all # 查看所有网络
$ virsh net-define default.xml
$ virsh net-autostart default
$ virsh net-start default
$ virsh net-undefine default
$ virsh net-destroy default

# 批量操作vm
$ for vm in `virsh list --all --name`; do virsh undefine/destroy ${vm}; done
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;qemu-img&#34;&gt;qemu-img&lt;/h1&gt;
&lt;p&gt;创建虚拟机的镜像文件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ qemu-img create -f qcow2 /path/to/name.qcow2 100G
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;libvirt-qemu&#34;&gt;libvirt-qemu&lt;/h1&gt;
&lt;p&gt;libvirt操作qemu/kvm.&lt;/p&gt;
&lt;p&gt;本地:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qemu:///system
qemu:///session
qemu+unix:///system
qemu+unix:///session
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ssh远程:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# libvirt-bin server上需要安装nc和libvirt-bin
$ sudo apt-get install netcat-openbsd
$ sudo update-alternatives --config nc // netcat-traditional避免使用默认安装

# ssh用户需要在libvirt和kvm组里
$ adduser username libvirtd
$ adduser username kvm

$ sudo apt-get install sshpass // 免密码访问

# client上需要安装openssh-clients
$ sshpass -p password virsh -c qemu+ssh://user@127.0.0.1/system list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tcp远程:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim /etc/libvirt/libvirtd.conf:
listen_tls = 0　　　　　　　　　 #禁用tls登录
listen_tcp = 1　　　　　　　　　 #启用tcp方式登录
tcp_port = &amp;quot;16509&amp;quot;　　　　　　　 #tcp端口16509
listen_addr = &amp;quot;0.0.0.0&amp;quot;         # 允许任意ip访问
auth_tcp = &amp;quot;none&amp;quot;　　　　　　    #TCP不使用认证

$ vim /etc/default/libvirt-bin
start_libvirtd=&amp;quot;yes&amp;quot;
libvirtd_opts=&amp;quot;-l --config /etc/libvirt/libvirtd.conf&amp;quot;

$ sudo service libvirt-bin restart

$ virsh -c qemu+tcp://127.0.0.1:16509/system list
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;libvirtd配置&#34;&gt;libvirtd配置&lt;/h1&gt;
&lt;p&gt;配置libvirtd：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim /etc/libvirt/libvirtd.conf

max_clients = 1024　　　　　　   #最大总的连接客户数1024
min_workers = 50　　　　　　    #libvirtd启动时，初始的工作线程数目
max_workers = 200　　　　　　 #同上，最大数目
max_requests = 1000　　　　　
#最大同时支持的RPC调用，必须大于等于max_workers
max_client_requests = 200　　 #每个客户端支持的最大连接数
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Vagrant</title>
        <link>https://canuxcheng.com/post/vagrant/</link>
        <pubDate>Thu, 12 Jan 2017 21:00:01 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/vagrant/</guid>
        <description>&lt;h1 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h1&gt;
&lt;p&gt;构建在虚拟化技术之上的虚拟机运行环境管理工具．&lt;/p&gt;
&lt;p&gt;适合用来构建和分发开发环境．通过命令行可以批量自动化，不用一个一个安装配置图形界面的虚拟机．&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mitchellh/vagrant&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/mitchellh/vagrant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要安装virtualbox或vmware等虚拟机.&lt;/p&gt;
&lt;p&gt;vagrant还支持其它的providers(docker, vmware, hyper-v, aws)&lt;/p&gt;
&lt;p&gt;可以在这里找到很多vagrant可用的box:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://atlas.hashicorp.com/boxes/search&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;初始化&#34;&gt;初始化&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir -p /home/user/vagrant
$ cd /vagrant

# 在当前目录生成一个Vagrantfile文件, 需手动添加vm.box
$ vagrant init 

# 相当于直接添加了vm.box到Vagrantfile.
$ vagrant init [box-name]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;添加box&#34;&gt;添加box&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;# 默认从https://atlas.hashicorp.com/boxes/search下载该box.
$ vagrant box add [[--name ]box-name] hashicorp/precise64

# 也可以使用下载到本地的box
$ vagrant box add [[--name ]box-name] /path/to/your.box

# 也可以使用自己的服务器上的box
$ vagrant box add [[--name ]box-name] URL

# 添加box之后修改Vagrantfile,添加vm.box:
Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
  config.vm.box = &amp;quot;[box-name]&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;使用box&#34;&gt;使用box&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ vagrant up [box-name]
$ vagrant up --provider docker/aws/vmware/hyperv/... [box-name]

$ vagrant ssh
# 会进入一个vagrant@precise64:~$的环境．
# /vagrant 是一个和/home/user/vagrant同步的路径．
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;结束使用&#34;&gt;结束使用&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ vagrant status # 查看box状态
$ vagrant halt # 关闭box
$ vagrant reload # 重启box
$ vagrant suspend
$ vagrant resume
$ vagrant provision

# 会销毁box占用的所有资源，但不删除box.
$ vagrant destroy
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;管理box&#34;&gt;管理box&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ vagrant box list
$ vagrant box remove
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;其它&#34;&gt;其它&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ vagrant global-status
$ vagrant global-status --prune
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;配置vagrantfile&#34;&gt;配置Vagrantfile&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;config.vm.box_version = &amp;quot;1.1.0&amp;quot;
cfg.vm.hostname = &amp;quot;ubuntu.labs&amp;quot;

# 端口映射, 把主机的端口映射到vagrant的box
# 访问主机的该端口就是访问vagrant的box
cfg.vm.network :forward_port, guest: 80, host: 8080

# 私有网络，只有主机可以访问vagrant的box.
# 如果多个vagrant的box设定在同一个网段也可以互相访问．
cfg.vm.network :private_network, ip: &amp;quot;192.168.50.10&amp;quot;

# 公有网络，vagrant的box和主机使用一样的网络．
cfg.vm.network :public_network
cfg.vm.network :public_network, ip: &amp;quot;192.168.1.1&amp;quot;

cfg.vm.synced_folder &amp;quot;/var/tmp/pkg-build&amp;quot;, &amp;quot;/var/tmp/pkg-build&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;打包&#34;&gt;打包&lt;/h1&gt;
&lt;p&gt;用户可以打包自己的开发环境，然后分发出去．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vagrant package [options] [name]
$ vagrant package
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;windows&#34;&gt;windows&lt;/h1&gt;
&lt;p&gt;在windows物理机安装virtualbox和vagrant.&lt;/p&gt;
&lt;p&gt;windows不支持ssh,所以需要类似于putty这种客户端．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;host: 127.0.0.1
port: 2222
user: vagrant/root
password: vagrant
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;linux&#34;&gt;linux&lt;/h1&gt;
&lt;p&gt;只能在linux物理机安装virtualbox和vagrant使用．&lt;/p&gt;
&lt;p&gt;如果想在windows物理机里面的virtualbox上安装的linux系统中使用vagrant会报错：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# default: Warning: Connection timeout. Retrying...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为需要在linux上在安装virtualxo，然后不能设置加速．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/vagrant.PNG&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pic&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/vagrant1.PNG&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pic1&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;qa&#34;&gt;Q&amp;amp;A&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;vagrant怎样打包ESXi上的虚拟机．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vagrant能否打包cluster(virtualbox或esxi)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Esxi</title>
        <link>https://canuxcheng.com/post/esxi/</link>
        <pubDate>Tue, 05 Apr 2016 21:47:54 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/esxi/</guid>
        <description>&lt;h1 id=&#34;vmware&#34;&gt;VMware&lt;/h1&gt;
&lt;p&gt;vSphere是vmware的虚拟化平台,包括ESXi和vSphere Client.&lt;/p&gt;
&lt;p&gt;vSphere Hypervisor(也叫ESXi)是vSphere的免费裸机hypervisor. 把物理机虚拟出多个虚拟机．&lt;/p&gt;
&lt;p&gt;vSphere client是vSphere的简单管理工具．只能管理一台ESXi物理机和上面的虚拟机．&lt;/p&gt;
&lt;p&gt;vCenter Server是vSphere的高级管理系统．需单独购买．&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;配置管理&#34;&gt;配置管理&lt;/h1&gt;
&lt;p&gt;开启虚拟机copy/paste功能：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 通过vsphere client
edit properties -&amp;gt; Options -&amp;gt; Advanced -&amp;gt; General -&amp;gt; configuration Parameters
# isolation.tools.copy.disable    false
# isolation.tools.paste.disable    false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;开启虚拟机的虚拟化功能：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 通过ssh到esxi服务器
$ vim /vmfs/volumes/datastore1/Ubuntu1604/Ubuntu1604.vmx
vhv.enable = &amp;quot;TRUE&amp;quot; # 添加到最后一行
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建的vm命名不能带小数点.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;命令&#34;&gt;命令&lt;/h1&gt;
&lt;p&gt;vim-cmd:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim-cmd vmsvc/getallvms # 获取所有虚拟机
vim-cmd vmsvc/reload
vim-cmd vmsvc/power.on vmid
vim-cmd vmsvc/power.shutdown vimid
vim-cmd vmsvc/power.off vimid
vim-cmd vmsvc/power.reboot vimid

# power on all vms
for vm in `vim-cmd vmsvc/getallvms | awk &#39;{if (NR&amp;gt;1) {print $1}}&#39;`;
do
    echo &amp;quot;power on ${vm}...&amp;quot;;
    vim-cmd vmsvc/power.on ${vm}
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;esxcli:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;esxcli vm process list # 查看所有运行的vm
esxcli vm process kill --type=[force/soft/hard] --world-id=&amp;lt;world-id&amp;gt; # 关机
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;esxtop:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 类似于linux的top命令
esxtop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vscsiStats:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vscsiStats -l
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;python&#34;&gt;python&lt;/h1&gt;
&lt;p&gt;pyVmomi is the Python SDK for the VMware vSphere API that allows you to manage ESX, ESXi, and vCenter.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/vmware/pyvmomi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/vmware/pyvmomi&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install pyvmomi

from pyVmomi import vim
from pyVim import connect
si = connect.SmartConnect(host=&#39;hostname&#39;, user=&#39;username&#39;, pwd=&#39;password&#39;, port=&#39;port&#39;)

def find_vm(si, name):
    ct = si.content
    ov = ct.viewManager.CreatecontainerView(ct.rootFolder, [vim.VirtualMachine], true)
    vm_list = ov.view
    for vm in vm_list:
        if vm.name == &amp;quot;vmname&amp;quot;:
            return vm
    return None
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Virtualization</title>
        <link>https://canuxcheng.com/post/virtualization/</link>
        <pubDate>Tue, 05 Apr 2016 21:47:54 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/virtualization/</guid>
        <description>&lt;h1 id=&#34;virtualization&#34;&gt;Virtualization&lt;/h1&gt;
&lt;p&gt;虚拟化技术的发展：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;DataCenter, 最原始的数据中心&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Virtualization, 虚拟化技术，包括Kvm, Xen(Citrix), HyperV(MicroSoft), ESXi(VMware)等&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
