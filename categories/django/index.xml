<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on Morgoth</title>
    <link>https://canuxcheng.com/categories/django/</link>
    <description>Recent content in Django on Morgoth</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jan 2022 04:29:37 +0000</lastBuildDate>
    <atom:link href="https://canuxcheng.com/categories/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Auth</title>
      <link>https://canuxcheng.com/post/django_auth/</link>
      <pubDate>Fri, 14 Jan 2022 04:29:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_auth/</guid>
      <description>&lt;h1 id=&#34;authpy&#34;&gt;auth.py&lt;/h1&gt;&#xA;&lt;p&gt;自定义authentication backend.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib.auth.backends import BaseBackend&#xA;&#xA;class MyBackend(BaseBackend):&#xA;    def authenticate(self, request):&#xA;        ...&#xA;    def get_user(self, user_id):&#xA;        ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;配置使用自定义backend&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;AUTHENTICATION_BACKENDS =  (&amp;quot;apps.ldap_auth.auth.MyBackend&amp;quot;,)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/etianen/django-python3-ldap&#34;&gt;https://github.com/etianen/django-python3-ldap&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;auth&#34;&gt;auth&lt;/h1&gt;&#xA;&lt;p&gt;配置&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = (&#xA;    &#39;django.contrib.auth&#39;，&#xA;    &#39;django.contrib.contenttypes&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&amp;lsquo;django.contrib.auth&amp;rsquo; 包含了验证框架的内核和它的默认模型。&lt;/p&gt;&#xA;&lt;p&gt;&amp;lsquo;django.contrib.contenttypes&amp;rsquo; 是 Django content type system ，允许你创建的模型和权限相关联。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;MIDDLEWARE_CLASSES = (&#xA;    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,&#xA;    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;用户登录:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib.auth import authenticate, login&#xA;user = authenticate(username=&#39;name&#39;, password=&#39;pw&#39;)&#xA;login(request, user)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;登陆时的默认验证后端:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;AUTHENTICATION_BACKENDS = [&#39;django.contrib.auth.backends.ModelBackend&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;用户登出:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib.auth import logout&#xA;logout(request)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Cache</title>
      <link>https://canuxcheng.com/post/django_cache/</link>
      <pubDate>Tue, 04 May 2021 04:51:30 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_cache/</guid>
      <description>&lt;h1 id=&#34;cache&#34;&gt;cache&lt;/h1&gt;&#xA;&lt;p&gt;缓存的backend可以是django内置的，也可以是第三方的。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;缓存整个站点&lt;/p&gt;&#xA;&lt;p&gt;MIDDLEWARE = [&#xA;&amp;lsquo;django.middleware.cache.UpdateCacheMiddleware&amp;rsquo;,&#xA;&amp;lsquo;django.middleware.common.CommonMiddleware&amp;rsquo;,&#xA;&amp;lsquo;django.middleware.cache.FetchFromCacheMiddleware&amp;rsquo;,&#xA;]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;视图缓存&lt;/p&gt;&#xA;&lt;p&gt;from django.views.decorators.cache import cache_page&lt;/p&gt;&#xA;&lt;p&gt;@cache_page(60 * 2)&#xA;def my_view(request):&#xA;&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;或者在URLconf中指定&#xA;urlpatterns = [&#xA;path(&amp;lsquo;foo/&lt;a href=&#34;int:code&#34;&gt;int:code&lt;/a&gt;/&amp;rsquo;, cache_page(60 * 2)(my_view)),&#xA;]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;模板片段缓存&lt;/p&gt;&#xA;&lt;p&gt;{% load cache %}&#xA;{% cache &amp;hellip; %}&#xA;&amp;hellip;&#xA;{% endcache %}&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;redis&#34;&gt;redis&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;CACHES = {&#xA;    &amp;quot;default&amp;quot;: {&#xA;        &amp;quot;BACKEND&amp;quot;: &amp;quot;django_redis.cache.RedisCache&amp;quot;,&#xA;        &amp;quot;LOCATION&amp;quot;: os.environ.get(&amp;quot;REDIS_URL&amp;quot;, &#39;&#39;),&#xA;        &amp;quot;OPTIONS&amp;quot;: {&#xA;            &amp;quot;CLIENT_CLASS&amp;quot;: &amp;quot;django_redis.client.DefaultClient&amp;quot;,&#xA;        },&#xA;        &amp;quot;TIMEOUT&amp;quot;: 60,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;memcached&#34;&gt;memcached&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;CACHES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;BACKEND&#39;: &#39;django.core.cache.backends.memcached.MemcachedCache&#39;,&#xA;        &#39;LOCATION&#39;: &#39;127.0.0.1:11211&#39;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;database&#34;&gt;database&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;CACHES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;BACKEND&#39;: &#39;django.core.cache.backends.db.DatabaseCache&#39;,&#xA;        &#39;LOCATION&#39;: &#39;my_cache_table&#39;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Django Misc</title>
      <link>https://canuxcheng.com/post/django_misc/</link>
      <pubDate>Wed, 04 Jan 2017 01:13:36 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_misc/</guid>
      <description>&lt;h1 id=&#34;django的国际化和本地化&#34;&gt;Django的国际化和本地化&lt;/h1&gt;&#xA;&lt;p&gt;settings.py里面和国际化和本地化相关的设置:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;USE_I18N = True&#xA;USE_L10N = True&#xA;TIME_ZONE = &#39;UTC&#39;&#xA;USE_TZ = True&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;国际化i18n&#34;&gt;国际化(i18N)&lt;/h2&gt;&#xA;&lt;p&gt;由开发者完成,本地化的准备工作.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.i18nguy.com/unicode/language-identifiers.html&#34;&gt;http://www.i18nguy.com/unicode/language-identifiers.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;LANGUAGE_CODE = &#39;en-us&#39; # default&#xA;&#xA;LANGUAGES = [&#xA;    (&#39;en-US&#39;, _(&#39;English&#39;)),&#xA;    (&#39;zh-CN&#39;, _(&#39;Chinese&#39;)),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;本地化l10n&#34;&gt;本地化(l10N)&lt;/h2&gt;&#xA;&lt;p&gt;由翻译者完成.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;django的安全&#34;&gt;Django的安全&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;django的性能优化&#34;&gt;Django的性能优化&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/zh-hans/3.2/topics/performance/&#34;&gt;https://docs.djangoproject.com/zh-hans/3.2/topics/performance/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;django的地理框架&#34;&gt;Django的地理框架&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Test</title>
      <link>https://canuxcheng.com/post/django_test/</link>
      <pubDate>Tue, 04 Oct 2016 04:51:30 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_test/</guid>
      <description>&lt;h1 id=&#34;testspy&#34;&gt;tests.py&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/tools/&#34;&gt;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/tools/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/advanced/&#34;&gt;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/advanced/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;单个测试文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;vim app/tests.py&#xA;from django.test import TestCase&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;多个测试文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;mkdir -p app/tests&#xA;vi test_case1.py&#xA;vi test_case2.py&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;配置和运行&#34;&gt;配置和运行&lt;/h1&gt;&#xA;&lt;p&gt;默认情况下运行 manage.py test 会创建测试数据库运行testcase，完成后自动销毁测试数据库.&lt;/p&gt;&#xA;&lt;p&gt;测试相关配置&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;vim project/settings.py&#xA;&#xA;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;NAME&#39;: &#39;mydb&#39;,&#xA;        &#39;TEST&#39;: {&#xA;            // 默认测试数据库是&#39;NAME&#39;前加&#39;test_&#39; (eg: &#39;test_mydb&#39;)&#xA;            // 可以通过TEST.NAME指定测试数据库&#xA;            &#39;NAME&#39;: &#39;mytestdb&#39;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;# 指定runner&#xA;## 默认 django.test.runner.DiscoverRunner&#xA;TEST_RUNNER = &#39;site_main.base_tests.TestRunner&#xA;&#xA;# 指定fixture文件路径&#xA;FIXTURE_DIRS = (os.path.join(BASE_DIR, &#39;app&#39;, &#39;fixtures&#39;), )&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;运行测试程序：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ python3 manage.py test // 查找test 开头的文件运行里面的 unittest.TestCase的子类.&#xA;$ python3 manage.py test &amp;lt;package&amp;gt; // 运行指️定应用内的测试&#xA;$ python3 manage.py test &amp;lt;module&amp;gt; // 运行指定模块内的测试&#xA;$ python3 manage.py test &amp;lt;module&amp;gt;.tests.MyTestCase // 运行一个指定的testcase&#xA;$ python3 manage.py test &amp;lt;module&amp;gt;.tests.MyTestCase.test_method // 运行一个指定的test method&#xA;&#xA;--keepdb // 保留测试数据库&#xA;--parallel // 并行运行测试。&#xA;-v/--verbosity 0/1/2/3  测试输出信息级别，默认为1， 0表示不输出。&#xA;-d/--debug-sql 输出测试执行的sql语句.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;client&#34;&gt;Client&lt;/h1&gt;&#xA;&lt;p&gt;测试客户端是一个 Python 类，它充当一个虚拟的 Web 浏览器，&#xA;允许你测试视图并以编程方式与 Django 驱动的应用程序交互。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Form</title>
      <link>https://canuxcheng.com/post/django_form/</link>
      <pubDate>Tue, 04 Oct 2016 04:30:02 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_form/</guid>
      <description>&lt;h1 id=&#34;formspy&#34;&gt;forms.py&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django import forms&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;表单&#34;&gt;表单&lt;/h1&gt;&#xA;&lt;p&gt;用户在浏览器中输入数据提交，对数据验证以及输入框的生成等。&lt;/p&gt;&#xA;&lt;p&gt;django的表单系统的核心类是django.forms.Form类,所有的构建的表单都是这个类的子类。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Admin</title>
      <link>https://canuxcheng.com/post/django_admin/</link>
      <pubDate>Tue, 04 Oct 2016 04:29:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_admin/</guid>
      <description>&lt;h1 id=&#34;adminpy&#34;&gt;admin.py&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib import admin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建一个管理员用户：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ python manage.py createsuperuser&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;管理员登陆界面：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;http://localhost:8000/admin/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在admin.py中注册模型，然后就可以在登陆界面管理模型了&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from .models import Question&#xA;admin.site.register(Question)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;自定义管理表单：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from .models import Question&#xA;class QuestionAdmin(admin.ModelAdmin):&#xA;    fileds = [&#39;pub_date&#39;, &#39;question_date&#39;]&#xA;admin.site.register(Question, QuestionAdmin)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;把表单分割成字段集：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from .models import Question&#xA;class QuestionAdmin(admin.ModelAdmin):&#xA;    fieldsets = [&#xA;        (None,               {&#39;fields&#39;: [&#39;question_text&#39;]}),&#xA;        (&#39;Date information&#39;, {&#39;fields&#39;: [&#39;pub_date&#39;]}),&#xA;    ]&#xA;admin.site.register(Question, QuestionAdmin)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;后台&#34;&gt;后台&lt;/h1&gt;&#xA;&lt;p&gt;django的后台管理程序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>URL</title>
      <link>https://canuxcheng.com/post/django_url/</link>
      <pubDate>Tue, 04 Oct 2016 04:20:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_url/</guid>
      <description>&lt;h1 id=&#34;urlspy&#34;&gt;urls.py&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.urls import path, include&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;django请求站点的方法：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ROOT_URLCONF，在settings.py中设置。&lt;/li&gt;&#xA;&lt;li&gt;寻找urlpatterns，它是django.conf.urls.url()实例的一个python列表。&lt;/li&gt;&#xA;&lt;li&gt;dnango依次匹配每个URL模式，在第一个匹配停下。&lt;/li&gt;&#xA;&lt;li&gt;一旦一个正则表达式匹配，django就调用对应的视图，视图获得HttpRequest实例,如果是没有命名的组返回内容作为位置参数，如果是命名的组返回内容作为关键字参数。&lt;/li&gt;&#xA;&lt;li&gt;如果没有匹配到或者过程跑出异常，django调用合适的错误处理。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;项目的url&#34;&gt;项目的URL&lt;/h1&gt;&#xA;&lt;p&gt;项目的URL主要用来包含应用的URL以及全局的URL:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib import admin&#xA;from django.urls import path, include&#xA;&#xA;urlpatterns = [&#xA;    # 默认的项目的admin的url&#xA;    path(&#39;admin/&#39;, admin.site.urls),&#xA;    &#xA;    # 在项目URL添加链接到应用URL：&#xA;    # 在下面添加你的所有应用的url,&#xA;    path(&#39;polls/&#39;, include(&#39;polls.urls&#39;)),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;应用的url&#34;&gt;应用的URL&lt;/h1&gt;&#xA;&lt;p&gt;将应用的视图映射到URL,需要在应用目录新建urls.py文件,然后在项目的url中包含应用的url。&lt;/p&gt;&#xA;&lt;p&gt;urlpatterns是url()实例类型的python列表。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.urls import path&#xA;from . import views&#xA;&#xA;app_name = &#39;polls&#39;&#xA;&#xA;urlpatterns = [&#xA;    # 普通视图&#xA;    path(&#39;&#39;, views.index, name=&#39;index&#39;),&#xA;    # 类视图&#xA;    path(&#39;&#39;, views.IndexView.as_view(), name=&#39;index&#39;),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;没有命名的组&#34;&gt;没有命名的组&lt;/h1&gt;&#xA;&lt;p&gt;视图函数只有request参数，匹配的正则表达式作为位置参数。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;url(r&#39;^pattern1/pattern2/$&#39;, views.index, name=&#39;index&#39;),&#xA;&#xA;def index(request):&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;命名组&#34;&gt;命名组&lt;/h1&gt;&#xA;&lt;p&gt;视图函数除了request参数还有关键字参数，匹配的命名表达式组作为关键字参数,覆盖默认的关键字参数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>View</title>
      <link>https://canuxcheng.com/post/django_view/</link>
      <pubDate>Tue, 04 Oct 2016 04:20:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_view/</guid>
      <description>&lt;h1 id=&#34;viewspy&#34;&gt;views.py&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.shortcuts import render&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;定义自己的视图函数：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse&#xA;from django.template import RequestContext, loader&#xA;&#xA;# 导入模板中的类&#xA;from .models import Question&#xA;&#xA;def index(request):&#xA;    ...&#xA;    t = loader.get_template(&#39;application/index.html&#39;)&#xA;    c = RequestContext(request, {&#39;foo&#39;: &#39;bar&#39;})&#xA;    return HttpResponse(t.render(c), content_type=&amp;quot;text/html&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;当请求一个页面时django会建立一个包含请求元数据的HttpRequest对象，当django加载对应视图时，这个对象作为视图第一个参数。&lt;/p&gt;&#xA;&lt;p&gt;每个视图会返回一个HttpResponse对象。&lt;/p&gt;&#xA;&lt;p&gt;每个视图函数都用HttpRequest对象（通常用request）作为第一个参数。&lt;/p&gt;&#xA;&lt;p&gt;每个视图函数都返回一个HttpResponse对象，包含生成的响应。&lt;/p&gt;&#xA;&lt;p&gt;HttpRquest和HttpResponse在django.http包中，参考：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://python.usyiyi.cn/documents/django_182/ref/request-response.html&#34;&gt;http://python.usyiyi.cn/documents/django_182/ref/request-response.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;HttpRequest对象属性：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;request.scheme # http/https&#xA;request.body&#xA;request.path&#xA;request.path_info&#xA;request.method # GET/POST&#xA;request.encoding&#xA;request.user&#xA;request.session&#xA;request.urlconf&#xA;request.GET&#xA;request.POST&#xA;request.REQUEST&#xA;request.COOKIES&#xA;request.FILES&#xA;request.META&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;HttpRequest对象方法：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;request.get_host()&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;HttpResponse对象属性：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;response.content&#xA;response.charset&#xA;response.status_code&#xA;response.reason_phrase&#xA;response.streaming&#xA;response.closed&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;HttpResponse对象的方法：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Model</title>
      <link>https://canuxcheng.com/post/django_model/</link>
      <pubDate>Tue, 04 Oct 2016 04:20:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_model/</guid>
      <description>&lt;h1 id=&#34;modelspy&#34;&gt;models.py&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.db import models&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;django模型是和数据库关联的，代码放在models.py，数据库信息在settings.py中统一配置即可。&lt;/p&gt;&#xA;&lt;p&gt;每个模型对应数据库唯一的一张表，是django.db.models.Model的子类。&lt;/p&gt;&#xA;&lt;p&gt;每个模型实例代表数据库中的一条特定记录.&lt;/p&gt;&#xA;&lt;p&gt;模型的每个属性都表示为数据库中的一个字段。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在项目的settings.py中激活应用，并设置数据库相关参数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;让django包含你的应用：&lt;/p&gt;&#xA;&lt;p&gt;告诉django你对模型做了更改，并且将这些更改存储为迁移文件polls/migrations/0001_initial.py:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;  $python manage.py makemigrations polls&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;可以查看迁移文件执行了哪些sql语句,并不真的在数据库执行：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;  $python manage.py sqlmigrate polls 0001&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;可以检查项目中的模型是否存在问题：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;  $python manage.py check&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在数据库中创建模型,查找还没有被应用的迁移文件然后和数据库同步：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;  $python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;模型的字段类型和字段选项&#34;&gt;模型的字段类型和字段选项&lt;/h1&gt;&#xA;&lt;p&gt;模型的每个属性都表示为数据库的一个字段,是Field子类的某个实例。&lt;/p&gt;&#xA;&lt;p&gt;模型的字段还有一些选项。&lt;/p&gt;&#xA;&lt;p&gt;字段命名规则：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不能是python的保留关键字。&lt;/li&gt;&#xA;&lt;li&gt;字段名中连续的下划线不能超过一个。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;访问其它应用的模型,导入即可：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from &amp;lt;other-aplication&amp;gt;.models import &amp;lt;module-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;模型字段类型和选项参考：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://python.usyiyi.cn/documents/django_182/ref/models/fields.html#common-model-field-options&#34;&gt;http://python.usyiyi.cn/documents/django_182/ref/models/fields.html#common-model-field-options&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;模型字段类型&#34;&gt;模型字段类型&lt;/h2&gt;&#xA;&lt;p&gt;字段的类型都是Field类的子类：&lt;/p&gt;&#xA;&lt;p&gt;每个字段都接受一个可选的位置参数(一般是第一个），叫字段的自述名,如果不指定就默认是字段名字（下划线换成空格）。&lt;/p&gt;&#xA;&lt;p&gt;自增字段:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;AutoField&#xA;# 默认django会每个模型添加一个自增主键字段,如果你显示设置一个自增主键字段就不会默认再添加,每个模型只能有一个主键字段。&#xA;# id = models.AutoField(primary_key=True)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;普通字段:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;BigIntegerField&#xA;BinaryField&#xA;BooleanField&#xA;CharField&#xA;CommaSeparatedIntegerField&#xA;DateField&#xA;DateTimeField&#xA;DecimalField&#xA;DurationField&#xA;EmailField&#xA;FileField&#xA;FilePathField&#xA;FloatField&#xA;GenericIPAddressField&#xA;IPAddressField&#xA;ImageField&#xA;IntegerField&#xA;NullBooleanField&#xA;PositiveIntegerField&#xA;PositiveSmallIntegerField&#xA;SlugField&#xA;SmallIntegerField&#xA;TextField&#xA;TimeField&#xA;URLField&#xA;UUIDField&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;关系字段:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Template</title>
      <link>https://canuxcheng.com/post/django_template/</link>
      <pubDate>Tue, 04 Oct 2016 04:12:49 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_template/</guid>
      <description>&lt;h1 id=&#34;模板设置&#34;&gt;模板设置&lt;/h1&gt;&#xA;&lt;p&gt;模板引擎在settings.py设置, django有两套模板引擎：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;TEMPLATES = [&#xA;    # DjangoTemplates&#xA;    {&#xA;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,&#xA;        # 定义项目的通用模板, mysite/templates&#xA;        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],&#xA;        # True 表示在所有安装应用的application/templates中查找。&#xA;        &#39;APP_DIRS&#39;: True,&#xA;        # 模板的选项：&#xA;        &#39;OPTIONS&#39;: {&#xA;            &#39;context_processors&#39;: [&#xA;                &#39;django.template.context_processors.debug&#39;,&#xA;                &#39;django.template.context_processors.request&#39;,&#xA;                &#39;django.contrib.auth.context_processors.auth&#39;,&#xA;                &#39;django.contrib.messages.context_processors.messages&#39;,&#xA;            ]&#xA;        },&#xA;    },&#xA;&#xA;    # Jinja2&#xA;    {&#xA;        &#39;BACKEND&#39;: &#39;django.template.backends.jinja2.Jinja2&#39;,&#xA;        # 定义项目的通用模板, mysite/templates&#xA;        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],&#xA;        # True表示在所有已安装应用的application/jinja2中查找。&#xA;        &#39;APP_DIRS&#39;: True,&#xA;        # 模板的选项：&#xA;        &#39;OPTIONS&#39;: {&#xA;            &#39;context_processors&#39;: [&#xA;                &#39;django.template.context_processors.debug&#39;,&#xA;                &#39;django.template.context_processors.request&#39;,&#xA;                &#39;django.contrib.auth.context_processors.auth&#39;,&#xA;                &#39;django.contrib.messages.context_processors.messages&#39;,&#xA;            ]&#xA;        },&#xA;    },&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;BACKEND定义模板引擎,django内置的模板引擎有两个django.template.backends.django.DjangoTemplates(默认)和django.template.backends.jinja2.Jinja2&lt;/p&gt;&#xA;&lt;p&gt;DIRS存放自定义的不在应用路径的模板，模板引擎按列表顺序搜索查找模板源文件,默认就是默认引擎的默认路径。&lt;/p&gt;&#xA;&lt;p&gt;APP_DIRS告诉模板引擎是否进入安装应用的templates(jinja2的目录是jinja2)查找模板。&lt;/p&gt;&#xA;&lt;p&gt;在视图中使用模板：&lt;/p&gt;&#xA;&lt;p&gt;默认django会在项目的所有应用的templates中查找模板，所以为了防止多个应用有同名的模板，需要在templates下新建application同名的目录来存放模板&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploy</title>
      <link>https://canuxcheng.com/post/django_deploy/</link>
      <pubDate>Tue, 27 Sep 2016 10:23:22 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_deploy/</guid>
      <description>&lt;h1 id=&#34;发布django项目&#34;&gt;发布django项目&lt;/h1&gt;&#xA;&lt;p&gt;django内置一个轻量级web开发服务器。&lt;/p&gt;&#xA;&lt;p&gt;如果要发布django项目需要另外的操作。&lt;/p&gt;&#xA;&lt;p&gt;也可以发布到其它的云平台。&lt;/p&gt;&#xA;&lt;p&gt;一般通过wsgi或者asgi来部署.&lt;/p&gt;&#xA;&lt;h2 id=&#34;deploy时django的设置&#34;&gt;deploy时django的设置&lt;/h2&gt;&#xA;&lt;p&gt;settings.py中的设置：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ALLOWED_HOSTS = [&#39;*&#39;]&#xA;DEBUG = False&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;wsgi-部署&#34;&gt;WSGI 部署&lt;/h1&gt;&#xA;&lt;h2 id=&#34;apache2--mod_wsgi&#34;&gt;apache2 + mod_wsgi&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GrahamDumpleton/mod_wsgi&#34;&gt;https://github.com/GrahamDumpleton/mod_wsgi&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;mod_wsgi是C写的apache的模块，实现了兼容WSGI接口，用来部署python的web应用。&lt;/p&gt;&#xA;&lt;p&gt;作为apache2的模块安装&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# ubuntu/debian&#xA;sudo aptitude install apache2 # 安装apache2&#xA;sudo aptitude install libapache2-mod-wsgi # for python2&#xA;sudo aptitude install libapache2-mod-wsgi-py3 # for python3&#xA;&#xA;# redhat/centos/fedora&#xA;sudo yum install httpd2&#xA;sudo yum install httpd-devel&#xA;sudo yum install mod_wsgi&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Ubuntu创建网站的配置文件/etc/apache2/sites-available/mysite.conf:&lt;/p&gt;&#xA;&lt;p&gt;Fedora创建网站的配置文件/etc/httpd/conf.d/mysite.conf:&lt;/p&gt;&#xA;&lt;p&gt;一般部署到web服务器，/home/user/修改为/var/www/&lt;project-name&gt;/&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Include the project dir, can not inside VirtualHost section.&#xA;WSGIPythonPath /home/user/mysite&#xA;# If use virtualenv and named .venv&#xA;# WSGIPythonPath /home/user/mysite:/home/user/mysite/.venv/lib/python2.7/site-packages&#xA;&#xA;&amp;lt;VirtualHost *:80&amp;gt;&#xA;    ServerName localhost&#xA;    # ServerName yoursite.domain&#xA;    ServerAdmin canuxcheng@gmail.com&#xA;&#xA;    Alias /robots.txt /home/user/mysite/static/robots.txt&#xA;    Alias /favicon.ico /home/user/mysite/static/favicon.ico&#xA;&#xA;    Alias /media/ /home/user/mysite/media/&#xA;    Alias /static/ /home/user/mysite/static/&#xA;&#xA;    &amp;lt;Directory /home/user/mysite/media&amp;gt;&#xA;    Required all granted&#xA;    &amp;lt;/Directory&amp;gt;&#xA;&#xA;    &amp;lt;Directory /home/user/mysite/static&amp;gt;&#xA;    Required all granted&#xA;    &amp;lt;/Directory&amp;gt;&#xA;&#xA;    # If use daemon mode to run WSGI process.&#xA;    WSGIDaemonProcess mysite python-path=/home/user/mysite&#xA;    # If use virtualenv and named .venv&#xA;    # WSGIDaemonProcess mysite python-path=/home/user/mysite:/home/user/mysite/.venv/lib/python2.7/site-packages&#xA;    # WSGIProcessGroup mysite&#xA;&#xA;    WSGIScriptAlias / /home/user/mysite/mysite/wsgi.py&#xA;&#xA;    &amp;lt;Directory /home/user/mysite/mysite&amp;gt;&#xA;    &amp;lt;Files wsgi.py&amp;gt;&#xA;    Required all granted&#xA;    &amp;lt;/Files&amp;gt;&#xA;    &amp;lt;/Directory&amp;gt;&#xA;&#xA;    # check the log in /var/log/apache2/error_mysite.log or access_mysite.log&#xA;    ErrorLog ${APACHE_LOG_DIR}/error_mysite.log&#xA;    CustomLog ${APACHE_LOG_DIR}/access_mysite.log combined&#xA;&amp;lt;/VirtualHost&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;修改项目的wsgi.py:&lt;/p&gt;</description>
    </item>
    <item>
      <title>TPL</title>
      <link>https://canuxcheng.com/post/django_tpl/</link>
      <pubDate>Tue, 27 Sep 2016 01:33:42 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_tpl/</guid>
      <description>&lt;h1 id=&#34;django-third-party-library&#34;&gt;Django Third Party Library.&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rosarior/awesome-django&#34;&gt;https://github.com/rosarior/awesome-django&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Add this application to your django project in settings.py.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = (&#xA;    &#39;south&#39;,&#xA;    &#39;debug_toolbar&#39;,&#xA;    &#39;crispy_forms&#39;,&#xA;    ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;django-rest-framework&#34;&gt;django-rest-framework&lt;/h1&gt;&#xA;&lt;p&gt;django的RESTful API的application。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tomchristie/django-rest-framework/tree/master&#34;&gt;https://github.com/tomchristie/django-rest-framework/tree/master&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-json-api/django-rest-framework-json-api&#34;&gt;https://github.com/django-json-api/django-rest-framework-json-api&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SimpleJWT/django-rest-framework-simplejwt&#34;&gt;https://github.com/SimpleJWT/django-rest-framework-simplejwt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;admin-interface&#34;&gt;admin interface&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/geex-arts/django-jet&#34;&gt;https://github.com/geex-arts/django-jet&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sehmaschine/django-grappelli&#34;&gt;https://github.com/sehmaschine/django-grappelli&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/darklow/django-suit&#34;&gt;https://github.com/darklow/django-suit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sshwsfc/xadmin&#34;&gt;https://github.com/sshwsfc/xadmin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;authentication&#34;&gt;authentication&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/etianen/django-python3-ldap&#34;&gt;https://github.com/etianen/django-python3-ldap&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pennersr/django-allauth/&#34;&gt;https://github.com/pennersr/django-allauth/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-guardian/django-guardian&#34;&gt;https://github.com/django-guardian/django-guardian&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;database&#34;&gt;database&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-dbbackup/django-dbbackup&#34;&gt;https://github.com/django-dbbackup/django-dbbackup&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;debug&#34;&gt;debug&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jazzband/django-debug-toolbar&#34;&gt;https://github.com/jazzband/django-debug-toolbar&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-extensions/django-extensions/&#34;&gt;https://github.com/django-extensions/django-extensions/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;form&#34;&gt;form&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-crispy-forms/django-crispy-forms&#34;&gt;https://github.com/django-crispy-forms/django-crispy-forms&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;search&#34;&gt;search&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/carltongibson/django-filter&#34;&gt;https://github.com/carltongibson/django-filter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-haystack/django-haystack&#34;&gt;https://github.com/django-haystack/django-haystack&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;security&#34;&gt;security&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/adamchainz/django-cors-headers&#34;&gt;https://github.com/adamchainz/django-cors-headers&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cms-project&#34;&gt;CMS Project&lt;/h1&gt;&#xA;&lt;h2 id=&#34;django-cms&#34;&gt;django-cms&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/divio/django-cms/&#34;&gt;https://github.com/divio/django-cms/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;wagtail&#34;&gt;wagtail&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wagtail/wagtail&#34;&gt;https://github.com/wagtail/wagtail&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;mezzanine&#34;&gt;mezzanine&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stephenmcd/mezzanine/&#34;&gt;https://github.com/stephenmcd/mezzanine/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;e-commerce-project&#34;&gt;e-Commerce Project&lt;/h1&gt;&#xA;&lt;h2 id=&#34;django-oscar&#34;&gt;django-oscar&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-oscar/django-oscar&#34;&gt;https://github.com/django-oscar/django-oscar&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;django-shop&#34;&gt;django-shop&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/awesto/django-shop&#34;&gt;https://github.com/awesto/django-shop&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;pm-project&#34;&gt;PM Project&lt;/h1&gt;&#xA;&lt;h2 id=&#34;taiga&#34;&gt;taiga&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taigaio&#34;&gt;https://github.com/taigaio&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django</title>
      <link>https://canuxcheng.com/post/django/</link>
      <pubDate>Tue, 20 Sep 2016 23:14:07 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django/</guid>
      <description>&lt;h1 id=&#34;django&#34;&gt;Django&lt;/h1&gt;&#xA;&lt;p&gt;django是python的web框架。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django/django&#34;&gt;https://github.com/django/django&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;https://www.djangoproject.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/zh-hans/3.1/contents/&#34;&gt;https://docs.djangoproject.com/zh-hans/3.1/contents/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;django遵守MVC设计模式，采用MTV框架。&lt;/p&gt;&#xA;&lt;p&gt;M: model,数据存取&lt;/p&gt;&#xA;&lt;p&gt;T: template，如何展现数据&lt;/p&gt;&#xA;&lt;p&gt;V: view，展现哪些数据&lt;/p&gt;&#xA;&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/zh-hans/3.1/faq/install/#faq-python-version-support&#34;&gt;https://docs.djangoproject.com/zh-hans/3.1/faq/install/#faq-python-version-support&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;django1.11是最后一个支持python2.7的长期支持版(2017.4).&lt;/p&gt;&#xA;&lt;p&gt;django2.0开始只支持python3(2018).&lt;/p&gt;&#xA;&lt;p&gt;本文以django3.1为例创建名为next的project.&lt;/p&gt;&#xA;&lt;p&gt;virtualenv中安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$mkdir next&#xA;$cd next&#xA;$virtualenv .venv&#xA;&#xA;# mac/linux&#xA;$source .venv/bin/activate&#xA;&#xA;# windows&#xA;&amp;gt;cd .venv/Scripts&#xA;&amp;gt;activate&#xA;&#xA;$pip install django&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;验证安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$python&#xA;&amp;gt;&amp;gt;&amp;gt;import django&#xA;&amp;gt;&amp;gt;&amp;gt;django.VERSION&#xA;&amp;gt;&amp;gt;&amp;gt;django.get_version()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;安装使用的数据库引擎的库：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo udo apt-get install libmysqlclient-dev&#xA;$ pip install mysqlclient&#xA;&#xA;$pip install psycopg2&#xA;&#xA;$pip install cx_Oracle&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;django默认是mysqlclient，可以使用pymysql替代：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# vim settings.py&#xA;import pymysql&#xA;pymysql.version_info = (1, 4, 13, &amp;quot;final&amp;quot;, 0)&#xA;pymysql.install_as_MySQLdb()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;project&#34;&gt;project&lt;/h1&gt;&#xA;&lt;p&gt;创建一个名为next的项目&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
