<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Django on Morgoth</title>
        <link>https://canuxcheng.com/categories/django/</link>
        <description>Recent content in Django on Morgoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 14 Jan 2022 04:29:37 +0000</lastBuildDate><atom:link href="https://canuxcheng.com/categories/django/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Auth</title>
        <link>https://canuxcheng.com/post/django_auth/</link>
        <pubDate>Fri, 14 Jan 2022 04:29:37 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_auth/</guid>
        <description>&lt;h1 id=&#34;authpy&#34;&gt;auth.py&lt;/h1&gt;
&lt;p&gt;自定义authentication backend.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.contrib.auth.backends import BaseBackend

class MyBackend(BaseBackend):
    def authenticate(self, request):
        ...
    def get_user(self, user_id):
        ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置使用自定义backend&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AUTHENTICATION_BACKENDS =  (&amp;quot;apps.ldap_auth.auth.MyBackend&amp;quot;,)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/etianen/django-python3-ldap&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/etianen/django-python3-ldap&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;auth&#34;&gt;auth&lt;/h1&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = (
    &#39;django.contrib.auth&#39;，
    &#39;django.contrib.contenttypes&#39;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lsquo;django.contrib.auth&amp;rsquo; 包含了验证框架的内核和它的默认模型。&lt;/p&gt;
&lt;p&gt;&amp;lsquo;django.contrib.contenttypes&amp;rsquo; 是 Django content type system ，允许你创建的模型和权限相关联。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MIDDLEWARE_CLASSES = (
    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用户登录:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.contrib.auth import authenticate, login
user = authenticate(username=&#39;name&#39;, password=&#39;pw&#39;)
login(request, user)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;登陆时的默认验证后端:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AUTHENTICATION_BACKENDS = [&#39;django.contrib.auth.backends.ModelBackend&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用户登出:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.contrib.auth import logout
logout(request)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Cache</title>
        <link>https://canuxcheng.com/post/django_cache/</link>
        <pubDate>Tue, 04 May 2021 04:51:30 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_cache/</guid>
        <description>&lt;h1 id=&#34;cache&#34;&gt;cache&lt;/h1&gt;
&lt;p&gt;缓存的backend可以是django内置的，也可以是第三方的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缓存整个站点&lt;/p&gt;
&lt;p&gt;MIDDLEWARE = [
&amp;lsquo;django.middleware.cache.UpdateCacheMiddleware&amp;rsquo;,
&amp;lsquo;django.middleware.common.CommonMiddleware&amp;rsquo;,
&amp;lsquo;django.middleware.cache.FetchFromCacheMiddleware&amp;rsquo;,
]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视图缓存&lt;/p&gt;
&lt;p&gt;from django.views.decorators.cache import cache_page&lt;/p&gt;
&lt;p&gt;@cache_page(60 * 2)
def my_view(request):
&amp;hellip;&lt;/p&gt;
&lt;p&gt;或者在URLconf中指定
urlpatterns = [
path(&amp;lsquo;foo/&lt;a class=&#34;link&#34; href=&#34;int:code&#34; &gt;int:code&lt;/a&gt;/&amp;rsquo;, cache_page(60 * 2)(my_view)),
]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模板片段缓存&lt;/p&gt;
&lt;p&gt;{% load cache %}
{% cache &amp;hellip; %}
&amp;hellip;
{% endcache %}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;redis&#34;&gt;redis&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;CACHES = {
    &amp;quot;default&amp;quot;: {
        &amp;quot;BACKEND&amp;quot;: &amp;quot;django_redis.cache.RedisCache&amp;quot;,
        &amp;quot;LOCATION&amp;quot;: os.environ.get(&amp;quot;REDIS_URL&amp;quot;, &#39;&#39;),
        &amp;quot;OPTIONS&amp;quot;: {
            &amp;quot;CLIENT_CLASS&amp;quot;: &amp;quot;django_redis.client.DefaultClient&amp;quot;,
        },
        &amp;quot;TIMEOUT&amp;quot;: 60,
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;memcached&#34;&gt;memcached&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;CACHES = {
    &#39;default&#39;: {
        &#39;BACKEND&#39;: &#39;django.core.cache.backends.memcached.MemcachedCache&#39;,
        &#39;LOCATION&#39;: &#39;127.0.0.1:11211&#39;,
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;database&#34;&gt;database&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;CACHES = {
    &#39;default&#39;: {
        &#39;BACKEND&#39;: &#39;django.core.cache.backends.db.DatabaseCache&#39;,
        &#39;LOCATION&#39;: &#39;my_cache_table&#39;,
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Django Misc</title>
        <link>https://canuxcheng.com/post/django_misc/</link>
        <pubDate>Wed, 04 Jan 2017 01:13:36 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_misc/</guid>
        <description>&lt;h1 id=&#34;django的国际化和本地化&#34;&gt;Django的国际化和本地化&lt;/h1&gt;
&lt;p&gt;settings.py里面和国际化和本地化相关的设置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;USE_I18N = True
USE_L10N = True
TIME_ZONE = &#39;UTC&#39;
USE_TZ = True
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;国际化i18n&#34;&gt;国际化(i18N)&lt;/h2&gt;
&lt;p&gt;由开发者完成,本地化的准备工作.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.i18nguy.com/unicode/language-identifiers.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.i18nguy.com/unicode/language-identifiers.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LANGUAGE_CODE = &#39;en-us&#39; # default

LANGUAGES = [
    (&#39;en-US&#39;, _(&#39;English&#39;)),
    (&#39;zh-CN&#39;, _(&#39;Chinese&#39;)),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;本地化l10n&#34;&gt;本地化(l10N)&lt;/h2&gt;
&lt;p&gt;由翻译者完成.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;django的安全&#34;&gt;Django的安全&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;django的性能优化&#34;&gt;Django的性能优化&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.djangoproject.com/zh-hans/3.2/topics/performance/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.djangoproject.com/zh-hans/3.2/topics/performance/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;django的地理框架&#34;&gt;Django的地理框架&lt;/h1&gt;
</description>
        </item>
        <item>
        <title>Test</title>
        <link>https://canuxcheng.com/post/django_test/</link>
        <pubDate>Tue, 04 Oct 2016 04:51:30 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_test/</guid>
        <description>&lt;h1 id=&#34;testspy&#34;&gt;tests.py&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/tools/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/tools/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/advanced/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/advanced/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;单个测试文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim app/tests.py
from django.test import TestCase
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多个测试文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p app/tests
vi test_case1.py
vi test_case2.py
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;配置和运行&#34;&gt;配置和运行&lt;/h1&gt;
&lt;p&gt;默认情况下运行 manage.py test 会创建测试数据库运行testcase，完成后自动销毁测试数据库.&lt;/p&gt;
&lt;p&gt;测试相关配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim project/settings.py

DATABASES = {
    &#39;default&#39;: {
        &#39;NAME&#39;: &#39;mydb&#39;,
        &#39;TEST&#39;: {
            // 默认测试数据库是&#39;NAME&#39;前加&#39;test_&#39; (eg: &#39;test_mydb&#39;)
            // 可以通过TEST.NAME指定测试数据库
            &#39;NAME&#39;: &#39;mytestdb&#39;
        }
    }
}

# 指定runner
## 默认 django.test.runner.DiscoverRunner
TEST_RUNNER = &#39;site_main.base_tests.TestRunner

# 指定fixture文件路径
FIXTURE_DIRS = (os.path.join(BASE_DIR, &#39;app&#39;, &#39;fixtures&#39;), )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行测试程序：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python3 manage.py test // 查找test 开头的文件运行里面的 unittest.TestCase的子类.
$ python3 manage.py test &amp;lt;package&amp;gt; // 运行指️定应用内的测试
$ python3 manage.py test &amp;lt;module&amp;gt; // 运行指定模块内的测试
$ python3 manage.py test &amp;lt;module&amp;gt;.tests.MyTestCase // 运行一个指定的testcase
$ python3 manage.py test &amp;lt;module&amp;gt;.tests.MyTestCase.test_method // 运行一个指定的test method

--keepdb // 保留测试数据库
--parallel // 并行运行测试。
-v/--verbosity 0/1/2/3  测试输出信息级别，默认为1， 0表示不输出。
-d/--debug-sql 输出测试执行的sql语句.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;client&#34;&gt;Client&lt;/h1&gt;
&lt;p&gt;测试客户端是一个 Python 类，它充当一个虚拟的 Web 浏览器，
允许你测试视图并以编程方式与 Django 驱动的应用程序交互。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.test import Client
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;测试class&#34;&gt;测试Class&lt;/h1&gt;
&lt;h2 id=&#34;simpletestcase&#34;&gt;SimpleTestCase&lt;/h2&gt;
&lt;p&gt;SimpleTestCase继承自unittest.TestCase.&lt;/p&gt;
&lt;h2 id=&#34;transactiontestcase&#34;&gt;TransactionTestCase&lt;/h2&gt;
&lt;p&gt;TransactionTestCase继承自SimpleTestCase.&lt;/p&gt;
&lt;h2 id=&#34;liveservertestcase&#34;&gt;LiveServerTestCase&lt;/h2&gt;
&lt;p&gt;LiveServerTestCase继承自TransactionTestCase.&lt;/p&gt;
&lt;p&gt;LiveServerTestCase 和 TransactionTestCase` 的功能基本相同，
但多了一个功能：它在设置时在后台启动一个实时的 Django 服务器，并在关闭时将其关闭。
这就允许使用 Django 虚拟客户端 以外的自动化测试客户端，
例如，Selenium 客户端，在浏览器内执行一系列功能测试，并模拟真实用户的操作。&lt;/p&gt;
&lt;h2 id=&#34;testcase&#34;&gt;TestCase&lt;/h2&gt;
&lt;p&gt;TestCase继承自TransactionTestCase.&lt;/p&gt;
&lt;h2 id=&#34;fixtures&#34;&gt;fixtures&lt;/h2&gt;
&lt;p&gt;fixtures是类属性, 可以通过模拟在数据库中插入数据进行测试.&lt;/p&gt;
&lt;p&gt;在setUp的时候会插入fixtures指定的json文件中的数据。&lt;/p&gt;
&lt;p&gt;在tearDown的时候会销毁数据。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 导出数据为json格式，用于单元测试
$ python3 manage.py dumpdata &amp;gt; test_data.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;databases&#34;&gt;databases&lt;/h2&gt;
&lt;p&gt;databases是类属性&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Form</title>
        <link>https://canuxcheng.com/post/django_form/</link>
        <pubDate>Tue, 04 Oct 2016 04:30:02 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_form/</guid>
        <description>&lt;h1 id=&#34;formspy&#34;&gt;forms.py&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;from django import forms
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;表单&#34;&gt;表单&lt;/h1&gt;
&lt;p&gt;用户在浏览器中输入数据提交，对数据验证以及输入框的生成等。&lt;/p&gt;
&lt;p&gt;django的表单系统的核心类是django.forms.Form类,所有的构建的表单都是这个类的子类。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Admin</title>
        <link>https://canuxcheng.com/post/django_admin/</link>
        <pubDate>Tue, 04 Oct 2016 04:29:37 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_admin/</guid>
        <description>&lt;h1 id=&#34;adminpy&#34;&gt;admin.py&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;from django.contrib import admin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建一个管理员用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;管理员登陆界面：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:8000/admin/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在admin.py中注册模型，然后就可以在登陆界面管理模型了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from .models import Question
admin.site.register(Question)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自定义管理表单：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from .models import Question
class QuestionAdmin(admin.ModelAdmin):
    fileds = [&#39;pub_date&#39;, &#39;question_date&#39;]
admin.site.register(Question, QuestionAdmin)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把表单分割成字段集：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from .models import Question
class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {&#39;fields&#39;: [&#39;question_text&#39;]}),
        (&#39;Date information&#39;, {&#39;fields&#39;: [&#39;pub_date&#39;]}),
    ]
admin.site.register(Question, QuestionAdmin)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;后台&#34;&gt;后台&lt;/h1&gt;
&lt;p&gt;django的后台管理程序。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>URL</title>
        <link>https://canuxcheng.com/post/django_url/</link>
        <pubDate>Tue, 04 Oct 2016 04:20:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_url/</guid>
        <description>&lt;h1 id=&#34;urlspy&#34;&gt;urls.py&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;from django.urls import path, include
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;django请求站点的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ROOT_URLCONF，在settings.py中设置。&lt;/li&gt;
&lt;li&gt;寻找urlpatterns，它是django.conf.urls.url()实例的一个python列表。&lt;/li&gt;
&lt;li&gt;dnango依次匹配每个URL模式，在第一个匹配停下。&lt;/li&gt;
&lt;li&gt;一旦一个正则表达式匹配，django就调用对应的视图，视图获得HttpRequest实例,如果是没有命名的组返回内容作为位置参数，如果是命名的组返回内容作为关键字参数。&lt;/li&gt;
&lt;li&gt;如果没有匹配到或者过程跑出异常，django调用合适的错误处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;项目的url&#34;&gt;项目的URL&lt;/h1&gt;
&lt;p&gt;项目的URL主要用来包含应用的URL以及全局的URL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    # 默认的项目的admin的url
    path(&#39;admin/&#39;, admin.site.urls),
    
    # 在项目URL添加链接到应用URL：
    # 在下面添加你的所有应用的url,
    path(&#39;polls/&#39;, include(&#39;polls.urls&#39;)),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;应用的url&#34;&gt;应用的URL&lt;/h1&gt;
&lt;p&gt;将应用的视图映射到URL,需要在应用目录新建urls.py文件,然后在项目的url中包含应用的url。&lt;/p&gt;
&lt;p&gt;urlpatterns是url()实例类型的python列表。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.urls import path
from . import views

app_name = &#39;polls&#39;

urlpatterns = [
    # 普通视图
    path(&#39;&#39;, views.index, name=&#39;index&#39;),
    # 类视图
    path(&#39;&#39;, views.IndexView.as_view(), name=&#39;index&#39;),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;没有命名的组&#34;&gt;没有命名的组&lt;/h1&gt;
&lt;p&gt;视图函数只有request参数，匹配的正则表达式作为位置参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r&#39;^pattern1/pattern2/$&#39;, views.index, name=&#39;index&#39;),

def index(request):
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;命名组&#34;&gt;命名组&lt;/h1&gt;
&lt;p&gt;视图函数除了request参数还有关键字参数，匹配的命名表达式组作为关键字参数,覆盖默认的关键字参数。&lt;/p&gt;
&lt;p&gt;使用命名的正则表达式组： (?P&lt;name&gt;pattern)&lt;/p&gt;
&lt;p&gt;name就是关键字参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r&#39;^pattern1/(?P&amp;lt;name&amp;gt;pattern)/pattern2/$), views.index, name=&#39;index),

def index(request, name):
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;错误处理&#34;&gt;错误处理&lt;/h1&gt;
&lt;p&gt;django会调用一个错误处理视图处理异常。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;handler404 页面没找到&lt;/li&gt;
&lt;li&gt;handler500 服务器错误&lt;/li&gt;
&lt;li&gt;handler403 权限被拒绝&lt;/li&gt;
&lt;li&gt;handler400 无效的请求&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你也可以在项目的urls.py中重新定义这些默认视图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;handler404 = &#39;mysite.views.your_custom_page_not_found_view&#39;
handler500 = &#39;mysite.views.your_custom_error_view&#39;
handler403 = &#39;mysite.views.your_custom_permission_denied_view&#39;
handler400 = &#39;mysite.views.your_custom_bad_request_view&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>View</title>
        <link>https://canuxcheng.com/post/django_view/</link>
        <pubDate>Tue, 04 Oct 2016 04:20:39 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_view/</guid>
        <description>&lt;h1 id=&#34;viewspy&#34;&gt;views.py&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定义自己的视图函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse
from django.template import RequestContext, loader

# 导入模板中的类
from .models import Question

def index(request):
    ...
    t = loader.get_template(&#39;application/index.html&#39;)
    c = RequestContext(request, {&#39;foo&#39;: &#39;bar&#39;})
    return HttpResponse(t.render(c), content_type=&amp;quot;text/html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当请求一个页面时django会建立一个包含请求元数据的HttpRequest对象，当django加载对应视图时，这个对象作为视图第一个参数。&lt;/p&gt;
&lt;p&gt;每个视图会返回一个HttpResponse对象。&lt;/p&gt;
&lt;p&gt;每个视图函数都用HttpRequest对象（通常用request）作为第一个参数。&lt;/p&gt;
&lt;p&gt;每个视图函数都返回一个HttpResponse对象，包含生成的响应。&lt;/p&gt;
&lt;p&gt;HttpRquest和HttpResponse在django.http包中，参考：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://python.usyiyi.cn/documents/django_182/ref/request-response.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://python.usyiyi.cn/documents/django_182/ref/request-response.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HttpRequest对象属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;request.scheme # http/https
request.body
request.path
request.path_info
request.method # GET/POST
request.encoding
request.user
request.session
request.urlconf
request.GET
request.POST
request.REQUEST
request.COOKIES
request.FILES
request.META
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HttpRequest对象方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;request.get_host()
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HttpResponse对象属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;response.content
response.charset
response.status_code
response.reason_phrase
response.streaming
response.closed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HttpResponse对象的方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;response.getvalue()
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回错误：&lt;/p&gt;
&lt;p&gt;HttpResponse的子类提供了对不同类型HTTP响应。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.http import HttpResponseBadRequest, HttpResponseNotFound, HttpResponseForbidden, HttpResponseServerError,
return HttpResponseNotFound(&amp;quot;&amp;lt;h1&amp;gt;Page not found&amp;lt;/h1&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;http404异常：&lt;/p&gt;
&lt;p&gt;在应用的模板目录顶层定义一个404.html模板文件，当跑出Http404异常就会调用这个模板文件展示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.http import Http404

def index(request):
    try:
        ...
    except Application.DoesNotExist:
        raise Http404(&amp;quot;Application does not exist&amp;quot;)
    return HttpResponse(...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自定义错误视图：&lt;/p&gt;
&lt;p&gt;参考urls中的内容。&lt;/p&gt;
&lt;h1 id=&#34;快捷函数&#34;&gt;快捷函数&lt;/h1&gt;
&lt;p&gt;django.shortcuts中定义了多个快捷函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
render(request, template_name, context=None, context_instance=&amp;lt;object object&amp;gt;, content_type=None, status=None, current_app=&amp;lt;object object&amp;gt;, dirs=&amp;lt;object object&amp;gt;, dictionary=&amp;lt;object object&amp;gt;, using=None)
# render第一个参数是request，根据给定模板和上下文字典，返回一个渲染后的HttpResponse对象。
return render(request, &#39;application/index.html&#39;, {&#39;foo&#39;: &#39;bar&#39;}, content_type=&amp;quot;text/html&amp;quot;)

from django.shortcuts import get_object_or_404
get_object_or_404(klass, *args, **kwargs)
# 在给定的模型管理器调用get()，如果不存在引发Http404异常。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;基于类的视图&#34;&gt;基于类的视图&lt;/h1&gt;
&lt;p&gt;基于类的视图的基类在django.views.generic中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.generic import View
def MyView(View):
    def get(self, request):
        return HttpResponse(...)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;templateresponse和simpletemplateresponse&#34;&gt;TemplateResponse和SimpleTemplateResponse&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;from django.template.response import TemplateResponse, SimpleTemplateResponse
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;视图装饰器&#34;&gt;视图装饰器&lt;/h1&gt;
&lt;p&gt;django.views.decorators包中定义了视图的装饰器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.decorators import *
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;内建的视图&#34;&gt;内建的视图&lt;/h1&gt;
&lt;p&gt;django.views.static.serve定义了开发环境的文件服务器视图，仅用于开发。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.static import serve
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;django.views.defaults定义了内建的错误处理的视图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.defaults import *
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Model</title>
        <link>https://canuxcheng.com/post/django_model/</link>
        <pubDate>Tue, 04 Oct 2016 04:20:31 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_model/</guid>
        <description>&lt;h1 id=&#34;modelspy&#34;&gt;models.py&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;from django.db import models
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;django模型是和数据库关联的，代码放在models.py，数据库信息在settings.py中统一配置即可。&lt;/p&gt;
&lt;p&gt;每个模型对应数据库唯一的一张表，是django.db.models.Model的子类。&lt;/p&gt;
&lt;p&gt;每个模型实例代表数据库中的一条特定记录.&lt;/p&gt;
&lt;p&gt;模型的每个属性都表示为数据库中的一个字段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在项目的settings.py中激活应用，并设置数据库相关参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让django包含你的应用：&lt;/p&gt;
&lt;p&gt;告诉django你对模型做了更改，并且将这些更改存储为迁移文件polls/migrations/0001_initial.py:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  $python manage.py makemigrations polls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以查看迁移文件执行了哪些sql语句,并不真的在数据库执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  $python manage.py sqlmigrate polls 0001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以检查项目中的模型是否存在问题：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  $python manage.py check
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在数据库中创建模型,查找还没有被应用的迁移文件然后和数据库同步：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  $python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;模型的字段类型和字段选项&#34;&gt;模型的字段类型和字段选项&lt;/h1&gt;
&lt;p&gt;模型的每个属性都表示为数据库的一个字段,是Field子类的某个实例。&lt;/p&gt;
&lt;p&gt;模型的字段还有一些选项。&lt;/p&gt;
&lt;p&gt;字段命名规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能是python的保留关键字。&lt;/li&gt;
&lt;li&gt;字段名中连续的下划线不能超过一个。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;访问其它应用的模型,导入即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from &amp;lt;other-aplication&amp;gt;.models import &amp;lt;module-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;模型字段类型和选项参考：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://python.usyiyi.cn/documents/django_182/ref/models/fields.html#common-model-field-options&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://python.usyiyi.cn/documents/django_182/ref/models/fields.html#common-model-field-options&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;模型字段类型&#34;&gt;模型字段类型&lt;/h2&gt;
&lt;p&gt;字段的类型都是Field类的子类：&lt;/p&gt;
&lt;p&gt;每个字段都接受一个可选的位置参数(一般是第一个），叫字段的自述名,如果不指定就默认是字段名字（下划线换成空格）。&lt;/p&gt;
&lt;p&gt;自增字段:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AutoField
# 默认django会每个模型添加一个自增主键字段,如果你显示设置一个自增主键字段就不会默认再添加,每个模型只能有一个主键字段。
# id = models.AutoField(primary_key=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;普通字段:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BigIntegerField
BinaryField
BooleanField
CharField
CommaSeparatedIntegerField
DateField
DateTimeField
DecimalField
DurationField
EmailField
FileField
FilePathField
FloatField
GenericIPAddressField
IPAddressField
ImageField
IntegerField
NullBooleanField
PositiveIntegerField
PositiveSmallIntegerField
SlugField
SmallIntegerField
TextField
TimeField
URLField
UUIDField
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关系字段:&lt;/p&gt;
&lt;p&gt;django定义了一系列字段类型描述数据库之间的关联:&lt;/p&gt;
&lt;p&gt;这三个字段要求第一个参数是模型类，用verbose_name选项才能指定自述名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ForeignKey 定义多对一关系
OneToOneField 定义一对一关系
ManyToManyField 定义多对多关系
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;模型字段选项&#34;&gt;模型字段选项&lt;/h2&gt;
&lt;p&gt;django定义的字段的通用的选项：&lt;/p&gt;
&lt;p&gt;每个字段都有特定的选项，也有通用的选项,特定参数参考文档。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Field.null    django将空值以NULL存储到数据库中,默认是false
Field.blank    该字段允许为空白,默认false
Field.primary_key    true表示该字段为模型的主键字段,默认是false
Field.unique    true表示该字段在表中必须有唯一值,默认是false
Field.unique_for_date
Field.unique_for_month
Field.unique_for_year
Field.choices    可迭代结构,给字段提供选项
Field.default    该字段默认值
Field.help_text    额外的help文本
Field.editable    false表示该字段不会出现在admin,默认是true
Field.error_messages    重写默认抛出的错误信息
Field.verbose_name    该字段可读性更高的名称
Field.validators    该字段要运行的一个Validator的列表
Field.db_column
Field.db_index
Field.db_tablespace
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;模型元选项&#34;&gt;模型元选项&lt;/h1&gt;
&lt;p&gt;使用内部类Meta定义模型的元数据。&lt;/p&gt;
&lt;p&gt;模型元数据是任何不是字段的数据，比如排序选项等。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.db import models
class Ox(models.Model):
    horn_length = models.IntegerField()
    ...
    class Meta:
        ordering = [&amp;quot;horn_length&amp;quot;]
        verbose_name_plural = &amp;quot;oxen&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;模型的元选项：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://python.usyiyi.cn/translate/django_182/ref/models/options.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://python.usyiyi.cn/translate/django_182/ref/models/options.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在元类Meta中使用的选项.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Options.abstract = True 表示模型是抽象基类, 数据库不会创建这个表
Options.db_table 该模型所用的数据表的名称
Options.db_tablespace
Options.default_related_name
Options.get_latest_by
Options.managed
Options.order_with_respect_to
Options.ordering = [&#39;字段名&#39;, &#39;-字段名&#39;] 对象的默认顺序, -表示倒序
Options.permissions
Options.default_permissions
Options.proxy
Options.select_on_save
Options.unique_together
Options.index_together
Options.verbose_name 对象的一个易于理解的名字
Options.verbose_name_plural 该对象复数形式的名字
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;模型的属性&#34;&gt;模型的属性&lt;/h1&gt;
&lt;p&gt;模型的属性是表级别的,是对表的操作.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://python.usyiyi.cn/translate/django_182/ref/models/class.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://python.usyiyi.cn/translate/django_182/ref/models/class.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每个模型类都要添加一个Manager实例,如果不显示添加，django就会默认添加objects属性，包含Manager实例。&lt;/p&gt;
&lt;p&gt;Manager或object属性是模型进行数据库查询操作的接口,也叫管理器,用于从数据库获取实例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.db import models
class Foo(models.Model):
    # 显示添加
    bar = models.Manager()
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;执行查询&#34;&gt;执行查询&lt;/h1&gt;
&lt;p&gt;一旦建立数据模型,django会自动生成一套抽象的API,用于创建,检索,更新和删除对象.&lt;/p&gt;
&lt;h2 id=&#34;创建对象&#34;&gt;创建对象&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;q = Question(question_text=&#39;content&#39;, pub_date=&#39;date&#39;)
q.save()

q = Question(question_text=&#39;content&#39;)
q.pub_date=&#39;date&#39;
q.save()

Question.objects.create(question_text=&amp;quot;content&amp;quot;, pub_date=&#39;date&#39;)

# 防止重复,不存在就创建，返回(object, True),存在返回(object, False)
Question.objects.get_or_create(question_text=&#39;content&#39;, pub_date=&#39;date&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取对象&#34;&gt;获取对象&lt;/h2&gt;
&lt;p&gt;通过模型中的管理器构造一个查询集来从数据库获取对象.&lt;/p&gt;
&lt;p&gt;查询集求值：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;迭代&lt;/li&gt;
&lt;li&gt;切片&lt;/li&gt;
&lt;li&gt;序列化&lt;/li&gt;
&lt;li&gt;repr()&lt;/li&gt;
&lt;li&gt;len()&lt;/li&gt;
&lt;li&gt;list()&lt;/li&gt;
&lt;li&gt;bool()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查询集参考QuerySet类的方法：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://python.usyiyi.cn/translate/django_182/ref/models/querysets.html#queryset-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://python.usyiyi.cn/translate/django_182/ref/models/querysets.html#queryset-api&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 获取表中所有对象
Question.objects.all()
# 切片获取部分
Question.objects.all()[:10]
# 获取单个
Question.objects.get(question_text=&#39;content&#39;)
# 过滤
Question.objects.filter(**kwargs)
Question.objects.exclude(**kwargs)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查询集的链式过滤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Question.objects.all().exists()
Question.objects.all().order_by(&#39;name&#39;)
Question.objects.filter(**kwargs).filter(**kwargs)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;模型的方法&#34;&gt;模型的方法&lt;/h1&gt;
&lt;p&gt;模型的方法是对模型的实例的操作.&lt;/p&gt;
&lt;p&gt;模型中可以自定义方法，可以使用预定义的自动生成的方法，也可以覆盖预定义的方法。&lt;/p&gt;
&lt;p&gt;预定义方法参考：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://python.usyiyi.cn/translate/django_182/ref/models/instances.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://python.usyiyi.cn/translate/django_182/ref/models/instances.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Model.__unicode__()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;python2需要使用__unicode__方法.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __unicode__(self):
    return u&#39;%s&#39; % self.title

Model.__str__()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;python3只需要__str__方法.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __str__(self):
    return &#39;%s&#39; % self.title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码兼容python2和python3.&lt;/p&gt;
&lt;p&gt;python_2_unicode_compatible是一个用于类的装饰器，在类中定义__str__并返回文本.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from __future__ import unicode_literals
from django.utils.encoding import python_2_unicode_compatible

@python_2_unicode_compatible
class Question(models.Model):
    title = models.CharField(&#39;title&#39;, max_length=256)
    ...

    def __str__(self):
        return self.title

Model.__eq__()

Model.__hash__()

Model.get_absolute_url()

Model.get_FOO_display()

Model.get_next_by_FOO(**kwargs)

Model.get_previous_by_FOO(**kwargs)

Model.DoesNotExist
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Template</title>
        <link>https://canuxcheng.com/post/django_template/</link>
        <pubDate>Tue, 04 Oct 2016 04:12:49 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_template/</guid>
        <description>&lt;h1 id=&#34;模板设置&#34;&gt;模板设置&lt;/h1&gt;
&lt;p&gt;模板引擎在settings.py设置, django有两套模板引擎：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TEMPLATES = [
    # DjangoTemplates
    {
        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
        # 定义项目的通用模板, mysite/templates
        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],
        # True 表示在所有安装应用的application/templates中查找。
        &#39;APP_DIRS&#39;: True,
        # 模板的选项：
        &#39;OPTIONS&#39;: {
            &#39;context_processors&#39;: [
                &#39;django.template.context_processors.debug&#39;,
                &#39;django.template.context_processors.request&#39;,
                &#39;django.contrib.auth.context_processors.auth&#39;,
                &#39;django.contrib.messages.context_processors.messages&#39;,
            ]
        },
    },

    # Jinja2
    {
        &#39;BACKEND&#39;: &#39;django.template.backends.jinja2.Jinja2&#39;,
        # 定义项目的通用模板, mysite/templates
        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],
        # True表示在所有已安装应用的application/jinja2中查找。
        &#39;APP_DIRS&#39;: True,
        # 模板的选项：
        &#39;OPTIONS&#39;: {
            &#39;context_processors&#39;: [
                &#39;django.template.context_processors.debug&#39;,
                &#39;django.template.context_processors.request&#39;,
                &#39;django.contrib.auth.context_processors.auth&#39;,
                &#39;django.contrib.messages.context_processors.messages&#39;,
            ]
        },
    },
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;BACKEND定义模板引擎,django内置的模板引擎有两个django.template.backends.django.DjangoTemplates(默认)和django.template.backends.jinja2.Jinja2&lt;/p&gt;
&lt;p&gt;DIRS存放自定义的不在应用路径的模板，模板引擎按列表顺序搜索查找模板源文件,默认就是默认引擎的默认路径。&lt;/p&gt;
&lt;p&gt;APP_DIRS告诉模板引擎是否进入安装应用的templates(jinja2的目录是jinja2)查找模板。&lt;/p&gt;
&lt;p&gt;在视图中使用模板：&lt;/p&gt;
&lt;p&gt;默认django会在项目的所有应用的templates中查找模板，所以为了防止多个应用有同名的模板，需要在templates下新建application同名的目录来存放模板&lt;/p&gt;
&lt;p&gt;应用的模板文件需要在应用目录创建templates文件夹&lt;/p&gt;
&lt;p&gt;默认模板放在polls/templates/polls/XXX.html&lt;/p&gt;
&lt;p&gt;应用的静态文件需要在应用目录创建static文件夹&lt;/p&gt;
&lt;p&gt;默认静态文件存放在polls/static/polls/XXX.css&lt;/p&gt;
&lt;p&gt;静态文件夹用来集中存放和管理图片，js脚本和css样式表等静态文件。&lt;/p&gt;
&lt;p&gt;django.template.loader定义了两个函数加载模板。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;get_template(template_name, dirs=&amp;lt;object object&amp;gt;, using=None)
select_template(template_name_list, dirs=&amp;lt;object object&amp;gt;, using=None)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;模板语言&#34;&gt;模板语言&lt;/h1&gt;
&lt;p&gt;django模板语言由四部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;li&gt;标签&lt;/li&gt;
&lt;li&gt;过滤器&lt;/li&gt;
&lt;li&gt;评论&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;{{ var }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示字符串：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string = &amp;quot;test string&amp;quot;
return render(request, &#39;index.html&#39;, {&#39;string&#39;: string})

{{ string }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示字典：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dict = {&amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;: &amp;quot;value2&amp;quot;}
return render(request, &#39;index.html&#39;, {&#39;dict&#39;: dict})

{{ dict.name1 }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;标签&#34;&gt;标签&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;{% tag %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考内置标签：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://python.usyiyi.cn/translate/django_182/ref/templates/builtins.html#ref-templates-builtins-tags&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://python.usyiyi.cn/translate/django_182/ref/templates/builtins.html#ref-templates-builtins-tags&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;for标签：&lt;/p&gt;
&lt;p&gt;遍历列表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list = [&#39;val1&#39;, &#39;val2&#39;, &#39;val3&#39;]
return render(request, &#39;index.html&#39;, {&#39;list&#39;: &#39;list&#39;})

```html
{% for i in list %}
{{ i }}
{% endfor %}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;遍历字典：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```html
{% for key, value in dict.items %}
{{ key }}: {{ value }}
{% endfor %}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;empty列表可能为空：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```html
{% for i in list %}
...
{% empty %}
...
{% endfor %}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reversed反向循环：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% for i in list reversed %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for循环有用的变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;forloop.counter    # 1 - indexed
forloop.counter0    # 0 - indexed
forloop.revcounter    # 1 - indexed
forloop.revcounter0    # 0 - indexed
forloop.first
forloop.last
forloop.parentloop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```html
{% if expression %}
...
{% else %}
...
{% endif %}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if可用的布尔操作符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% if expression1 and expression2 %}
{% if not expression %}
{% if expression1 or expression2 %}
{% if not expression1 or expression2 %} # not优先级高于or
{% if expression1 and not expression2 %} # not优先级高于and
{% if expression1 and expression2 or expression3 %} # and优先级高于or
{% if var == value %}
{% if var != value %}
{% if var &amp;lt; value %}
{% if var &amp;gt; value %}
{% if var &amp;lt;= value %}
{% if var &amp;gt;= value %}
{% if var in value %}
{% if a &amp;gt; b and b &amp;gt; c %}
{% if var|filter&amp;quot;arguments expression %} # if中使用过滤器
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;布尔操作符的优先级：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;or
and
not
in
==, !=, &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;include标签：&lt;/p&gt;
&lt;p&gt;加载模板并以标签内的参数渲染。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% include &#39;XXX.html&#39; %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;load标签：&lt;/p&gt;
&lt;p&gt;加载自定义模板标签集。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% load foo bar from somelibrary %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now标签：&lt;/p&gt;
&lt;p&gt;显示最近的日期和事件。&lt;/p&gt;
&lt;p&gt;spaceless标签：&lt;/p&gt;
&lt;p&gt;删除html标签之间的空白格，包括制表符和换行。&lt;/p&gt;
&lt;p&gt;url标签：&lt;/p&gt;
&lt;p&gt;返回一个绝对路径的引用，该引用匹配一个给定的视图函数和一些可选的参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% &#39;some-url-name&#39; v1 v2 %}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;模板继承&#34;&gt;模板继承&lt;/h3&gt;
&lt;p&gt;block标签：&lt;/p&gt;
&lt;p&gt;在底层模板定义一些通用的内容，block标签可以被子模板覆盖。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```html
{% block XXX %}
This is default content
{% endblock %}}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;extends标签：&lt;/p&gt;
&lt;p&gt;表示当前模板继承自父模板。&lt;/p&gt;
&lt;p&gt;extends标签必须放在子模板第一行。&lt;/p&gt;
&lt;p&gt;extends用来调用底层的模板，然后修改block标签内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```html
{% extends &amp;quot;XXX.html&amp;quot;/variable %}
{% block XXX %}
This is rewrite content
{% endblock %}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;block.super:&lt;/p&gt;
&lt;p&gt;如果需要获取父模板的block中的内容，可以用block.super。&lt;/p&gt;
&lt;p&gt;可以在父模板的block中增加内容，而不是完全覆盖。&lt;/p&gt;
&lt;h2 id=&#34;过滤器&#34;&gt;过滤器&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;{{ var|filter:arguments }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考内置过滤器&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://python.usyiyi.cn/translate/django_182/ref/templates/builtins.html#ref-templates-builtins-filters&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://python.usyiyi.cn/translate/django_182/ref/templates/builtins.html#ref-templates-builtins-filters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;add过滤器：&lt;/p&gt;
&lt;p&gt;把add后的参数加给value。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|add:&amp;quot;2&amp;quot; }} # value -&amp;gt; value+2
{{ value|addslashes }} # &amp;quot;I&#39;m string&amp;quot; -&amp;gt; &amp;quot;I\&#39;m string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;addslashed过滤器：&lt;/p&gt;
&lt;p&gt;在引号前面加\&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|addslashes }} # I&#39;m canux -&amp;gt; I\&#39;m canux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;capfirst过滤器：&lt;/p&gt;
&lt;p&gt;变量的第一个字母大写。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|capfirst }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;center过滤器：&lt;/p&gt;
&lt;p&gt;使value在给定的宽度范围内居中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|center:&amp;quot;15&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cut过滤器：&lt;/p&gt;
&lt;p&gt;移除value中所有的与给出的变量相同的字符串。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|cut:&amp;quot;cut&amp;quot; }} # 移除value中的字符串&amp;quot;cut&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;date过滤器：&lt;/p&gt;
&lt;p&gt;根据给定格式对一个date变量格式化。&lt;/p&gt;
&lt;p&gt;default过滤器：&lt;/p&gt;
&lt;p&gt;给value设定默认值，如果value没有赋值，就用默认值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|default:&amp;quot;default-value&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;default_if_none过滤器：&lt;/p&gt;
&lt;p&gt;仅当value是None使用默认值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value:default_if_none:&amp;quot;nothing&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dictsort过滤器：&lt;/p&gt;
&lt;p&gt;dictsortreversed过滤器：&lt;/p&gt;
&lt;p&gt;divisibleby过滤器：&lt;/p&gt;
&lt;p&gt;如果value可以被给出的参数整除，返回True。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|divisibleby:&amp;quot;3&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;escape过滤器：&lt;/p&gt;
&lt;p&gt;escapejs过滤器：&lt;/p&gt;
&lt;p&gt;filesizeformat过滤器：&lt;/p&gt;
&lt;p&gt;格式化为人类可读的文件大小。&lt;/p&gt;
&lt;p&gt;first过滤器：&lt;/p&gt;
&lt;p&gt;返回迭代器的第一个元素。&lt;/p&gt;
&lt;p&gt;floatformat过滤器：&lt;/p&gt;
&lt;p&gt;force_escape过滤器：&lt;/p&gt;
&lt;p&gt;get_digit过滤器：&lt;/p&gt;
&lt;p&gt;iriencode过滤器：&lt;/p&gt;
&lt;p&gt;join过滤器：&lt;/p&gt;
&lt;p&gt;last过滤器：&lt;/p&gt;
&lt;p&gt;length过滤器：&lt;/p&gt;
&lt;p&gt;length_is过滤器：&lt;/p&gt;
&lt;p&gt;linebreaks过滤器：&lt;/p&gt;
&lt;p&gt;linebreaksbr过滤器：&lt;/p&gt;
&lt;p&gt;linenumbers过滤器：&lt;/p&gt;
&lt;p&gt;ljust过滤器：&lt;/p&gt;
&lt;p&gt;lower过滤器：&lt;/p&gt;
&lt;p&gt;把字符串转换成小写。&lt;/p&gt;
&lt;p&gt;make_list过滤器：&lt;/p&gt;
&lt;p&gt;phone2numeric过滤器：&lt;/p&gt;
&lt;p&gt;pluralize过滤器：&lt;/p&gt;
&lt;p&gt;pprint过滤器：&lt;/p&gt;
&lt;p&gt;random过滤器：&lt;/p&gt;
&lt;p&gt;romevetags过滤器：&lt;/p&gt;
&lt;p&gt;rjust过滤器：&lt;/p&gt;
&lt;p&gt;slice过滤器：&lt;/p&gt;
&lt;p&gt;slugify过滤器：&lt;/p&gt;
&lt;p&gt;stringformat过滤器：&lt;/p&gt;
&lt;p&gt;striptags过滤器：&lt;/p&gt;
&lt;p&gt;time过滤器：&lt;/p&gt;
&lt;p&gt;timesince过滤器：&lt;/p&gt;
&lt;p&gt;timeuntil过滤器：&lt;/p&gt;
&lt;p&gt;title过滤器：&lt;/p&gt;
&lt;p&gt;truncatechars过滤器：&lt;/p&gt;
&lt;p&gt;truncatechars_html过滤器：&lt;/p&gt;
&lt;p&gt;truncatewords过滤器：&lt;/p&gt;
&lt;p&gt;truncatewords_html过滤器;&lt;/p&gt;
&lt;p&gt;unordered_list过滤器：&lt;/p&gt;
&lt;p&gt;upper过滤器：&lt;/p&gt;
&lt;p&gt;将字符串转换成大写形式。&lt;/p&gt;
&lt;p&gt;urlencode过滤器：&lt;/p&gt;
&lt;p&gt;urlize过滤器：&lt;/p&gt;
&lt;p&gt;urlizetrunc过滤器：&lt;/p&gt;
&lt;p&gt;wordcount过滤器：&lt;/p&gt;
&lt;p&gt;wordwrap过滤器：&lt;/p&gt;
&lt;p&gt;yesno过滤器：&lt;/p&gt;
&lt;p&gt;i18n过滤器：&lt;/p&gt;
&lt;p&gt;l10n过滤器：&lt;/p&gt;
&lt;p&gt;tz过滤器：&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;
&lt;p&gt;单行注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```html
{# this is single line comment #}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多行注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```html
{% comment %}
line1
line2
{% endcomment %}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;自动html转义&#34;&gt;自动html转义&lt;/h1&gt;
&lt;p&gt;当从模板生成html时，值可能包含影响html最终呈现的字符。&lt;/p&gt;
&lt;p&gt;django的自动转义,默认是打开的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt; 转义成 &amp;amp;lt;
&amp;gt; 转义成 &amp;amp;gt;
&#39; 转义成 &amp;amp;#39
&amp;quot; 转义成 &amp;amp;quot;
$ 转义成 &amp;amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不需要自动转义可以关闭它&lt;/p&gt;
&lt;p&gt;可以用safe过滤器关闭独立变量中的自动转义：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data = &amp;lt;b&amp;gt;
{{ data }} -&amp;gt; &amp;amp;lt;b&amp;amp;gt;
{{ data|safe }} -&amp;gt; &amp;lt;b&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以用autoescape标签关闭模板代码中的自动转义：&lt;/p&gt;
&lt;p&gt;autoescape标签有off和on两个参数，表示关闭和打开自动转义。&lt;/p&gt;
&lt;p&gt;父模板中的autoescape可以被子模板继承，也可以被include标签包含的模板继承。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```html
{% autoescape off %}
{{ name }}
{% endautoescape %}
```
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Deploy</title>
        <link>https://canuxcheng.com/post/django_deploy/</link>
        <pubDate>Tue, 27 Sep 2016 10:23:22 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_deploy/</guid>
        <description>&lt;h1 id=&#34;发布django项目&#34;&gt;发布django项目&lt;/h1&gt;
&lt;p&gt;django内置一个轻量级web开发服务器。&lt;/p&gt;
&lt;p&gt;如果要发布django项目需要另外的操作。&lt;/p&gt;
&lt;p&gt;也可以发布到其它的云平台。&lt;/p&gt;
&lt;p&gt;一般通过wsgi或者asgi来部署.&lt;/p&gt;
&lt;h2 id=&#34;deploy时django的设置&#34;&gt;deploy时django的设置&lt;/h2&gt;
&lt;p&gt;settings.py中的设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ALLOWED_HOSTS = [&#39;*&#39;]
DEBUG = False
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;wsgi-部署&#34;&gt;WSGI 部署&lt;/h1&gt;
&lt;h2 id=&#34;apache2--mod_wsgi&#34;&gt;apache2 + mod_wsgi&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/GrahamDumpleton/mod_wsgi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/GrahamDumpleton/mod_wsgi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mod_wsgi是C写的apache的模块，实现了兼容WSGI接口，用来部署python的web应用。&lt;/p&gt;
&lt;p&gt;作为apache2的模块安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ubuntu/debian
sudo aptitude install apache2 # 安装apache2
sudo aptitude install libapache2-mod-wsgi # for python2
sudo aptitude install libapache2-mod-wsgi-py3 # for python3

# redhat/centos/fedora
sudo yum install httpd2
sudo yum install httpd-devel
sudo yum install mod_wsgi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ubuntu创建网站的配置文件/etc/apache2/sites-available/mysite.conf:&lt;/p&gt;
&lt;p&gt;Fedora创建网站的配置文件/etc/httpd/conf.d/mysite.conf:&lt;/p&gt;
&lt;p&gt;一般部署到web服务器，/home/user/修改为/var/www/&lt;project-name&gt;/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Include the project dir, can not inside VirtualHost section.
WSGIPythonPath /home/user/mysite
# If use virtualenv and named .venv
# WSGIPythonPath /home/user/mysite:/home/user/mysite/.venv/lib/python2.7/site-packages

&amp;lt;VirtualHost *:80&amp;gt;
    ServerName localhost
    # ServerName yoursite.domain
    ServerAdmin canuxcheng@gmail.com

    Alias /robots.txt /home/user/mysite/static/robots.txt
    Alias /favicon.ico /home/user/mysite/static/favicon.ico

    Alias /media/ /home/user/mysite/media/
    Alias /static/ /home/user/mysite/static/

    &amp;lt;Directory /home/user/mysite/media&amp;gt;
    Required all granted
    &amp;lt;/Directory&amp;gt;

    &amp;lt;Directory /home/user/mysite/static&amp;gt;
    Required all granted
    &amp;lt;/Directory&amp;gt;

    # If use daemon mode to run WSGI process.
    WSGIDaemonProcess mysite python-path=/home/user/mysite
    # If use virtualenv and named .venv
    # WSGIDaemonProcess mysite python-path=/home/user/mysite:/home/user/mysite/.venv/lib/python2.7/site-packages
    # WSGIProcessGroup mysite

    WSGIScriptAlias / /home/user/mysite/mysite/wsgi.py

    &amp;lt;Directory /home/user/mysite/mysite&amp;gt;
    &amp;lt;Files wsgi.py&amp;gt;
    Required all granted
    &amp;lt;/Files&amp;gt;
    &amp;lt;/Directory&amp;gt;

    # check the log in /var/log/apache2/error_mysite.log or access_mysite.log
    ErrorLog ${APACHE_LOG_DIR}/error_mysite.log
    CustomLog ${APACHE_LOG_DIR}/access_mysite.log combined
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改项目的wsgi.py:&lt;/p&gt;
&lt;p&gt;因为环境变量是进程范围的，在同一个进程运行多个站点会出问题，所以推荐多站点使用mod_wsgi的守护进程模式,也可以在单进程中覆盖DJANGO_SETTINGS_MODULE这个变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import os

from django.core.wsgi import get_wsgi_application

# If you have more than 1 django project you need to change this.
# Or you can use daemon mode for WSGI process.
# os.environ.setdefault(&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;, &amp;quot;mysite.settings&amp;quot;)
os.environ[&amp;quot;DIANGO_SETTINGS_MODULE&amp;quot;] = &amp;quot;mysite.settings&amp;quot;
application = get_wsgi_application()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改项目的settings.py:&lt;/p&gt;
&lt;p&gt;ROOT表示存放位置，URL表示对应网址。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DEBUG = False

ALLOWED_HOSTS = [&#39;*&#39;]

# Static files (CSS, JavaScript, Images)
STATIC_URL = &#39;/static/&#39;

STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)

# Media files (upload files)
MEDIA_URL = &#39;/media/&#39;

MEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;收集静态文件和迁移：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$python manage.py makemigration
$python mamage.py migrate
$python manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置权限：&lt;/p&gt;
&lt;p&gt;Ubuntu默认用户和组是www-data,Fedora默认用户和组是apache。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$cd /home/user
$sudo chgrp www-data mysite
$sudo chmod g+w mysite
$sudo chgrp www-data mysite/db.sqlite3
$sudo chmod g+w mysite/db.sqlite3
$sudo chgrp -R www-data mysite/media/uploads
$sudo chmod -R g+w mysite/media/uploads
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ubuntu激活网站：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo a2ensite &amp;lt;newsite&amp;gt;
$sudo service apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fedora激活网站：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo systemctl restart  httpd
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;uwsgi&#34;&gt;uWSGI&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/unbit/uwsgi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/unbit/uwsgi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C写的wsgi应用服务器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python3 -m pip install uwsgi
$ uwsgi --http :8000 --chdir /path/to/project --module mysite.wsgi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;gunicorn&#34;&gt;Gunicorn&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/benoitc/gunicorn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/benoitc/gunicorn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;纯python写的WSGI服务器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python3 -m pip install gunicorn
$ gunicorn mysite.wsgi
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;asgi&#34;&gt;ASGI&lt;/h1&gt;
&lt;h2 id=&#34;uvicorn&#34;&gt;Uvicorn&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ python -m pip install uvicorn gunicorn
$ gunicorn myproject.asgi:application -k uvicorn.workers.UvicornWorker
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;hypercorn&#34;&gt;Hypercorn&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ python -m pip install hypercorn
$ hypercorn myproject.asgi:application
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;daphne&#34;&gt;Daphne&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ python -m pip install daphne
$ daphne myproject.asgi:application
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>TPL</title>
        <link>https://canuxcheng.com/post/django_tpl/</link>
        <pubDate>Tue, 27 Sep 2016 01:33:42 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django_tpl/</guid>
        <description>&lt;h1 id=&#34;django-third-party-library&#34;&gt;Django Third Party Library.&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/rosarior/awesome-django&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/rosarior/awesome-django&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Add this application to your django project in settings.py.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = (
    &#39;south&#39;,
    &#39;debug_toolbar&#39;,
    &#39;crispy_forms&#39;,
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;django-rest-framework&#34;&gt;django-rest-framework&lt;/h1&gt;
&lt;p&gt;django的RESTful API的application。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/tomchristie/django-rest-framework/tree/master&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/tomchristie/django-rest-framework/tree/master&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/django-json-api/django-rest-framework-json-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/django-json-api/django-rest-framework-json-api&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/SimpleJWT/django-rest-framework-simplejwt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/SimpleJWT/django-rest-framework-simplejwt&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;admin-interface&#34;&gt;admin interface&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/geex-arts/django-jet&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/geex-arts/django-jet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sehmaschine/django-grappelli&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/sehmaschine/django-grappelli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/darklow/django-suit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/darklow/django-suit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sshwsfc/xadmin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/sshwsfc/xadmin&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;authentication&#34;&gt;authentication&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/etianen/django-python3-ldap&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/etianen/django-python3-ldap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/pennersr/django-allauth/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/pennersr/django-allauth/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/django-guardian/django-guardian&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/django-guardian/django-guardian&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;database&#34;&gt;database&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/django-dbbackup/django-dbbackup&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/django-dbbackup/django-dbbackup&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;debug&#34;&gt;debug&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jazzband/django-debug-toolbar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jazzband/django-debug-toolbar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/django-extensions/django-extensions/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/django-extensions/django-extensions/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;form&#34;&gt;form&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/django-crispy-forms/django-crispy-forms&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/django-crispy-forms/django-crispy-forms&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;search&#34;&gt;search&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/carltongibson/django-filter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/carltongibson/django-filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/django-haystack/django-haystack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/django-haystack/django-haystack&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;security&#34;&gt;security&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/adamchainz/django-cors-headers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/adamchainz/django-cors-headers&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cms-project&#34;&gt;CMS Project&lt;/h1&gt;
&lt;h2 id=&#34;django-cms&#34;&gt;django-cms&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/divio/django-cms/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/divio/django-cms/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;wagtail&#34;&gt;wagtail&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/wagtail/wagtail&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wagtail/wagtail&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mezzanine&#34;&gt;mezzanine&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/stephenmcd/mezzanine/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/stephenmcd/mezzanine/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;e-commerce-project&#34;&gt;e-Commerce Project&lt;/h1&gt;
&lt;h2 id=&#34;django-oscar&#34;&gt;django-oscar&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/django-oscar/django-oscar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/django-oscar/django-oscar&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;django-shop&#34;&gt;django-shop&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/awesto/django-shop&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/awesto/django-shop&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pm-project&#34;&gt;PM Project&lt;/h1&gt;
&lt;h2 id=&#34;taiga&#34;&gt;taiga&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/taigaio&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/taigaio&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Django</title>
        <link>https://canuxcheng.com/post/django/</link>
        <pubDate>Tue, 20 Sep 2016 23:14:07 +0000</pubDate>
        
        <guid>https://canuxcheng.com/post/django/</guid>
        <description>&lt;h1 id=&#34;django&#34;&gt;Django&lt;/h1&gt;
&lt;p&gt;django是python的web框架。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/django/django&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/django/django&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.djangoproject.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.djangoproject.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.djangoproject.com/zh-hans/3.1/contents/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.djangoproject.com/zh-hans/3.1/contents/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;django遵守MVC设计模式，采用MTV框架。&lt;/p&gt;
&lt;p&gt;M: model,数据存取&lt;/p&gt;
&lt;p&gt;T: template，如何展现数据&lt;/p&gt;
&lt;p&gt;V: view，展现哪些数据&lt;/p&gt;
&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.djangoproject.com/zh-hans/3.1/faq/install/#faq-python-version-support&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.djangoproject.com/zh-hans/3.1/faq/install/#faq-python-version-support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;django1.11是最后一个支持python2.7的长期支持版(2017.4).&lt;/p&gt;
&lt;p&gt;django2.0开始只支持python3(2018).&lt;/p&gt;
&lt;p&gt;本文以django3.1为例创建名为next的project.&lt;/p&gt;
&lt;p&gt;virtualenv中安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$mkdir next
$cd next
$virtualenv .venv

# mac/linux
$source .venv/bin/activate

# windows
&amp;gt;cd .venv/Scripts
&amp;gt;activate

$pip install django
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;验证安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$python
&amp;gt;&amp;gt;&amp;gt;import django
&amp;gt;&amp;gt;&amp;gt;django.VERSION
&amp;gt;&amp;gt;&amp;gt;django.get_version()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装使用的数据库引擎的库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo udo apt-get install libmysqlclient-dev
$ pip install mysqlclient

$pip install psycopg2

$pip install cx_Oracle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;django默认是mysqlclient，可以使用pymysql替代：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim settings.py
import pymysql
pymysql.version_info = (1, 4, 13, &amp;quot;final&amp;quot;, 0)
pymysql.install_as_MySQLdb()
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;project&#34;&gt;project&lt;/h1&gt;
&lt;p&gt;创建一个名为next的项目&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd next
$ django-admin startproject next.

next
|-- manage.py
|-- next
    |- __init__.py
    |- settings.py
    |- urls.py
    |- wsgi.py
    |- asgi.py
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;next 最外层根目录只是你项目的容器， 根目录名称对Django没有影响，你可以将它重命名为任何你喜欢的名称。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;manage.py: 一个让你用各种方式管理 Django 项目的命令行工具。你可以阅读 django-admin and manage.py 获取所有 manage.py 的细节。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;templates: project的模版.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;next 里层的目录包含你的项目，它是一个纯 Python 包。它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 next.urls).&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;next/&lt;strong&gt;init&lt;/strong&gt;.py：一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包。如果你是 Python 初学者，阅读官方文档中的 更多关于包的知识。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;next/settings.py：Django 项目的配置文件。如果你想知道这个文件是如何工作的，请查看 Django 配置 了解细节。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;next/urls.py：Django 项目的 URL 声明，就像你网站的“目录”。阅读 URL调度器 文档来获取更多关于 URL 的内容。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;next/asgi.py：作为你的项目的运行在 ASGI 兼容的Web服务器上的入口。阅读 如何使用 ASGI 来部署 了解更多细节。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;next/wsgi.py：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。阅读 如何使用 WSGI 进行部署 了解更多细节。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;验证开发服务器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$python manage.py runserver
$python manage.py runserver &amp;lt;ip address&amp;gt;:&amp;lt;port&amp;gt;
&amp;gt; py manage.py runserver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;浏览器输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;settingspy&#34;&gt;settings.py&lt;/h2&gt;
&lt;p&gt;默认enable的app:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = [
    &#39;django.contrib.admin&#39;, //管理员站点， 你很快就会使用它。 
    &#39;django.contrib.auth&#39;, //认证授权系统。
    &#39;django.contrib.contenttypes&#39;, //内容类型框架。/
    &#39;django.contrib.sessions&#39;, //会话框架。 
    &#39;django.contrib.messages&#39;, //消息框架。 
    &#39;django.contrib.staticfiles&#39;, //管理静态文件的框架。 
]

默认开启的某些应用需要至少一个数据表，所以，在使用他们之前需要在数据库中创建一些表
$ python manage.py migrate
&amp;gt; py manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认enable的midleware:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MIDDLEWARE = [
    &#39;django.middleware.security.SecurityMiddleware&#39;,
    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
    &#39;django.middleware.common.CommonMiddleware&#39;,
    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;支持的template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TEMPLATES = [
    {
        &#39;BACKEND&#39;: &#39;django.template.backends.jinja2.Jinja2&#39;,
        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],
        &#39;APP_DIRS&#39;: True,
        &#39;OPTIONS&#39;: {
            &#39;context_processors&#39;: [
                &#39;django.template.context_processors.debug&#39;,
                &#39;django.template.context_processors.request&#39;,
                &#39;django.contrib.auth.context_processors.auth&#39;,
                &#39;django.contrib.messages.context_processors.messages&#39;,
            ],
        },
    },
    {
        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],
        &#39;APP_DIRS&#39;: True,
        &#39;OPTIONS&#39;: {
            &#39;context_processors&#39;: [
                &#39;django.template.context_processors.debug&#39;,
                &#39;django.template.context_processors.request&#39;,
                &#39;django.contrib.auth.context_processors.auth&#39;,
                &#39;django.contrib.messages.context_processors.messages&#39;,
            ],
        },
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认的数据库:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,
        &#39;NAME&#39;: BASE_DIR / &#39;db.sqlite3&#39;,
        &#39;TEST&#39;: {
            // 默认测试数据库是test_ 加 default.NAME，TEST可以指定数据库名字.
            &#39;NAME&#39;: &#39;test_db&#39;
        }
    }
}

// 可扩展的数据库
ENGINE:
    django.db.backends.mysql
    django.db.backends.oracle
    django.db.badkends.postgresql_psycopg2

NAME:
    your database name

USER:
    your database username

PASSWORD:
    your database password

HOST:
    local database or remote database

PORT:
    database port
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其它配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = &#39;-%b)79izbio$!(g!0io(he)giaqi1@))fzfq!t3s1g1dzysc(r&#39;

WSGI_APPLICATION = &#39;next.wsgi.application&#39;

ROOT_URLCONF = &#39;next.urls&#39;

DEBUG = True # 开发用来调试
DEBUG = False # 部署之后关闭

ALLOWED_HOSTS = [] # 设置哪些域名可以访问，优先级高于web服务器，debug=false必须设置
ALLOWED_HOSTS = [&#39;&#39;*&#39;&#39;] # 允许所有域名访问

STATIC_URL = &#39;/static/&#39;
STATIC_ROOT = &#39;/path/to/static&#39;
# static目录存放js/css等静态文件,collectstatic命令用来收集静态文件。

LANGUAGE_CODE = &#39;en-us&#39;
TIME_ZONE = &#39;UTC&#39;
USE_I18N = True
USE_L10N = True
USE_TZ = True
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;urlspy&#34;&gt;urls.py&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path(&#39;polls/&#39;, include(&#39;polls.urls&#39;)),
    path(&#39;admin/&#39;, admin.site.urls),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在项目的urls添加所有应用的urls，为每个应用独立创建urls，方便管理。&lt;/p&gt;
&lt;h2 id=&#34;wsgipy&#34;&gt;wsgi.py&lt;/h2&gt;
&lt;p&gt;Web Server Gateway Interface.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;next.settings&#39;)
application = get_wsgi_application()
django通过wsgi来部署，参考django的deploy。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;asgipy&#34;&gt;asgi.py&lt;/h2&gt;
&lt;p&gt;Asynchronous Server Gateway Interface.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import os
from django.core.asgi import get_asgi_application

os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;next.settings&#39;)
application = get_asgi_application()
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;application&#34;&gt;application&lt;/h1&gt;
&lt;p&gt;应用，一个项目可以有多个应用，一个应用可以用到多个项目中。&lt;/p&gt;
&lt;p&gt;可以单独打包应用发布到pypi，包名格式django-project，参考python的打包方法。&lt;/p&gt;
&lt;p&gt;创建一个名为polls的应用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$python manage.py startapp polls
&amp;gt; py manage.py startapp polls

polls/
|- __init__.py
|- admin.py
|- apps.py
|- models.py
|- views.py
|- tests.py (tests/test_case.py)
|- migrations
   |- __init__.py
|- templates
   |- polls
      |- index.html
|- static
   |- polls
      |- style.css
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;admin.py admin管理界面&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;apps.py&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;models.py 模型&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;views.py 视图&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;urls.py 新建的application的url&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;test.py 测试&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;migrations 迁移文件夹&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;templates 应用的模版文件夹&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;static 静态文件&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;django-admin--managepy&#34;&gt;django-admin &amp;amp; manage.py&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;[staticfiles]
    collectstatic # 设置STATIC_ROOT = &#39;/var/www/static/project/&#39;用来收集静态文件
    findstatic
    runserver # 启动django自带的web开发服务器

[sessions]
    clearsessions

[auth]
    changepassword
    createsuperuser
    
[contenttypes]
    remove_stale_contenttypes

[django]

    startapp
    
    startproject
    
    check
    compilemessages
    createcachetable
    dbshell # 数据库命令行
    diffsettings
    
    dumpdata # 导出数据 (json, xml, yaml)
    dumpdata &amp;gt; db.json
    flush # 清空数据库
    loaddata # 导入数据
    loaddata db.json
    
    inspectdb
    makemessages
    
    makemigrations # 创建迁移文件
    migrate # 创建/更新表结构（执行迁移文件）
    
    sendtestemail
    shell # 项目环境终端
    showmigrations # 查看可迁移的文件
    sqlflush
    sqlmigrate # 查看迁移文件会执行哪些sql
    sqlsequencereset
    squashmigrations
    
    test
    
    testserver
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
