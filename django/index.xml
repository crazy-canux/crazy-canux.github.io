<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Djangos on Canux&#39;s Blog</title>
    <link>http://canuxcheng.com/django/</link>
    <description>Recent content in Djangos on Canux&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	<atom:link href="http://canuxcheng.com/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/admin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/admin/</guid>
      <description>Title: Django Admin Date: 2016-10-04 04:29:37 Tags: Django, Admin
admin.py 1  from django.contrib import admin   创建一个管理员用户：
1  $ python manage.py createsuperuser   管理员登陆界面：
1  http://localhost:8080/admin/   在admin.py中注册模型，然后就可以在登陆界面管理模型了
1 2  from .models import Question admin.site.register(Question)   自定义管理表单：
1 2 3 4  from .models import Question class QuestionAdmin(admin.ModelAdmin): fileds = [&amp;#39;pub_date&amp;#39;, &amp;#39;question_date&amp;#39;] admin.site.register(Question, QuestionAdmin)   把表单分割成字段集：
1 2 3 4 5 6 7  from .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/deploy/</guid>
      <description>Title: Deploy Date: 2016-09-27 10:23:22 Tags: Django, Deploy
发布django项目 django内置一个轻量级web开发服务器。
如果要发布django项目需要另外的操作。
WSGI: web server gateway interface
WSGI是python web服务器和应用的标准，PEP3333.
django默认会生成wsgi.py文件。
wsgi.py -&amp;gt; settings.py -&amp;gt; urls.py -&amp;gt; application
也可以发布到其它的云平台。
deploy时django的设置 settings.py中的设置：
1 2  ALLOWED_HOSTS = [&amp;#39;*&amp;#39;] DEBUG = False   apache2.4 + mod_wsgi https://github.com/GrahamDumpleton/mod_wsgi
mod_wsgi是C写的apache的模块，实现了兼容WSGI接口，用来部署python的web应用。
作为apache2的模块安装
1 2 3 4 5 6 7 8 9  # ubuntu/debian sudo aptitude install apache2 # 安装apache2 sudo aptitude install libapache2-mod-wsgi # for python2 sudo aptitude install libapache2-mod-wsgi-py3 # for python3 # redhat/centos/fedora sudo yum install httpd2 sudo yum install httpd-devel sudo yum install mod_wsgi   Ubuntu创建网站的配置文件/etc/apache2/sites-available/mysite.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/django/</guid>
      <description>Title: Django Date: 2016-09-20 23:14:07 Tags: Python, Django
Django django是python的web框架。
https://github.com/django/django
https://www.djangoproject.com/
http://python.usyiyi.cn/translate/django_182/index.html
django遵守MVC设计模式，采用MTV框架。
M: model,数据存取
T: template，如何展现数据
V: view，展现哪些数据
安装 https://www.djangoproject.com/download/#supported-versions
django1.11是最后一个支持python2.7的长期支持版(2017.4).
django2.0开始只支持python3(2018).
django2.2是第一个python3的长期支持版(2019.4).
virtualenv中安装：
1 2 3 4 5  $mkdir mysite $cd mysite $virtualenv .venv $source .venv/bin/activate $pip install django==1.8.2   验证安装：
1 2 3 4  $python &amp;gt;&amp;gt;&amp;gt;import django &amp;gt;&amp;gt;&amp;gt;django.VERSION &amp;gt;&amp;gt;&amp;gt;django.get_version()   安装使用的数据库引擎的库：
1 2 3 4  $pip install mysql-python # MySQLdb $pip install mysqlclient # mysql-python的升级版 $pip install psycopg2 $pip install cx_Oracle   project 创建一个名为mysite的项目</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/form/</guid>
      <description>Title: Django Form Date: 2016-10-04 04:30:02 Tags: Django, Form
forms.py 1  from django import forms   表单 用户在浏览器中输入数据提交，对数据验证以及输入框的生成等。
django的表单系统的核心类是django.forms.Form类,所有的构建的表单都是这个类的子类。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/misc/</guid>
      <description> Title: Django MISC Date: 2017-01-04 01:13:36 Tags: Django, Misc
Django的国际化和本地化 settings.py里面和国际化和本地化相关的设置:
1 2 3 4  USE_I18N = True USE_L10N = True TIME_ZONE = &amp;#39;UTC&amp;#39; USE_TZ = True   国际化(i18N) 由开发者完成,本地化的准备工作.
http://www.i18nguy.com/unicode/language-identifiers.html
1 2 3 4 5 6  LANGUAGE_CODE = &amp;#39;en-us&amp;#39; # default LANGUAGES = [ (&amp;#39;en-US&amp;#39;, _(&amp;#39;English&amp;#39;)), (&amp;#39;zh-CN&amp;#39;, _(&amp;#39;Chinese&amp;#39;)), ]   本地化(l10N) 由翻译者完成.
Django的安全 Django的性能优化 Django的地理框架 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/model/</guid>
      <description>Title: Django Model Date: 2016-10-04 04:20:31 Tags: Django, Model
models.py 1  from django.db import models   django模型是和数据库关联的，代码放在models.py，数据库信息在settings.py中统一配置即可。
每个模型对应数据库唯一的一张表，是django.db.models.Model的子类。
每个模型实例代表数据库中的一条特定记录.
模型的每个属性都表示为数据库中的一个字段。
 在项目的settings.py中激活应用，并设置数据库相关参数。
 让django包含你的应用：
告诉django你对模型做了更改，并且将这些更改存储为迁移文件polls/migrations/0001_initial.py:
1  $python manage.py makemigrations polls   可以查看迁移文件执行了哪些sql语句,并不真的在数据库执行：
1  $python manage.py sqlmigrate polls 0001   可以检查项目中的模型是否存在问题：
1  $python manage.py check   在数据库中创建模型,查找还没有被应用的迁移文件然后和数据库同步：
1  $python manage.py migrate    模型的字段类型和字段选项 模型的每个属性都表示为数据库的一个字段,是Field子类的某个实例。
模型的字段还有一些选项。
字段命名规则： 1. 不能是python的保留关键字。 2. 字段名中连续的下划线不能超过一个。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/tpl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/tpl/</guid>
      <description>Title: Django TPL Date: 2016-09-27 01:33:42 Tags: Django, TPL
TPL Django Third Party Library.
https://github.com/rosarior/awesome-django
Add this application to your django project in settings.py.
1 2 3 4 5 6  INSTALLED_APPS = ( &amp;#39;south&amp;#39;, &amp;#39;debug_toolbar&amp;#39;, &amp;#39;crispy_forms&amp;#39;, ... )   django-debug-toolbar django的debugging的application。
https://github.com/jazzband/django-debug-toolbar
django-crispy-forms django的forms的application。
https://github.com/django-crispy-forms/django-crispy-forms
django-bootstrap3 django的forms的application。
https://github.com/dyve/django-bootstrap3
django-haystack django的search的application。
https://github.com/django-haystack/django-haystack
django-guardian django的authorization的application。
https://github.com/django-guardian/django-guardian
django-allauth django的authentication的application。
https://github.com/pennersr/django-allauth/
django-grappelli django的admin interface的application。
https://github.com/sehmaschine/django-grappelli/
django-rest-framework django的RESTful API的application。
https://github.com/tomchristie/django-rest-framework/tree/master
django-tastypie django的RESTful API的application。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/template/</guid>
      <description>Title: Django Template Date: 2016-10-04 04:12:49 Tags: Django, Template
模板设置 模板引擎在settings.py设置, django有两套模板引擎：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  TEMPLATES = [ # DjangoTemplates { &amp;#39;BACKEND&amp;#39;: &amp;#39;django.template.backends.django.DjangoTemplates&amp;#39;, # 定义项目的通用模板, mysite/templates &amp;#39;DIRS&amp;#39;: [os.path.join(BASE_DIR, &amp;#39;templates&amp;#39;)], # True 表示在所有安装应用的application/templates中查找。 &amp;#39;APP_DIRS&amp;#39;: True, # 模板的选项： &amp;#39;OPTIONS&amp;#39;: { &amp;#39;context_processors&amp;#39;: &amp;#39;debug&amp;#39;: &amp;#39;loaders&amp;#39;: &amp;#39;string_if_invalid&amp;#39;: &amp;#39;file_charset&amp;#39;: &amp;#39;utf-8&amp;#39; }, }, # Jinja2 { &amp;#39;BACKEND&amp;#39;: &amp;#39;django.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/test/</guid>
      <description> Title: Django Test Date: 2016-10-04 04:51:30 Tags: Django, Test
tests.py 测试 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/url/</guid>
      <description>Title: Django URL Date: 2016-10-04 04:20:39 Tags: Django, URL
urls.py 1  from django.conf.urls import url   django请求站点的方法： 1. ROOT_URLCONF，在settings.py中设置。 2. 寻找urlpatterns，它是django.conf.urls.url()实例的一个python列表。 3. dnango依次匹配每个URL模式，在第一个匹配停下。 4. 一旦一个正则表达式匹配，django就调用对应的视图，视图获得HttpRequest实例,如果是没有命名的组返回内容作为位置参数，如果是命名的组返回内容作为关键字参数。 5. 如果没有匹配到或者过程跑出异常，django调用合适的错误处理。
项目的URL 项目的URL主要用来包含应用的URL以及全局的URL:
1 2 3 4 5 6 7 8 9 10 11 12 13  from django.conf.urls import include, url from django.contrib import admin urlpatterns = [ # 默认的项目的admin的url url(r&amp;#39;^admin/&amp;#39;, include(admin.site.urls)), # 在项目URL添加链接到应用URL： # 在下面添加你的所有应用的url, include内的应用的urls需要引号. url(r&amp;#39;^polls/&amp;#39;, include(&amp;#39;polls.urls&amp;#39;)), ..., ]   应用的URL 将应用的视图映射到URL,需要在应用目录新建urls.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/django/view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/django/view/</guid>
      <description>Title: Django View Date: 2016-10-04 04:20:39 Tags: Django, View
views.py 1  from django.shortcuts import render   定义自己的视图函数：
1 2 3 4 5 6 7 8 9 10 11  from django.http import HttpResponse from django.template import RequestContext, loader # 导入模板中的类 from .models import Question def index(request): ... t = loader.get_template(&amp;#39;application/index.html&amp;#39;) c = RequestContext(request, {&amp;#39;foo&amp;#39;: &amp;#39;bar&amp;#39;}) return HttpResponse(t.render(c), content_type=&amp;#34;text/html&amp;#34;)   当请求一个页面时django会建立一个包含请求元数据的HttpRequest对象，当django加载对应视图时，这个对象作为视图第一个参数。
每个视图会返回一个HttpResponse对象。
每个视图函数都用HttpRequest对象（通常用request）作为第一个参数。
每个视图函数都返回一个HttpResponse对象，包含生成的响应。
HttpRquest和HttpResponse在django.http包中，参考：
http://python.usyiyi.cn/documents/django_182/ref/request-response.html
HttpRequest对象属性：</description>
    </item>
    
  </channel>
</rss>