<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Morgoth</title>
    <link>https://canuxcheng.com/</link>
    <description>Recent content on Morgoth</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jan 2025 09:41:39 +0000</lastBuildDate>
    <atom:link href="https://canuxcheng.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DevOps Metrics</title>
      <link>https://canuxcheng.com/post/devops_metrics/</link>
      <pubDate>Fri, 10 Jan 2025 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops_metrics/</guid>
      <description>&lt;h1 id=&#34;devops-metrics&#34;&gt;DevOps Metrics&lt;/h1&gt;&#xA;&lt;p&gt;从业务角度来看，公司希望更准确地度量其开发人员的生产力，原因如下:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Monitoring progress over time&lt;/li&gt;&#xA;&lt;li&gt;Creation of benchmarks&lt;/li&gt;&#xA;&lt;li&gt;Rewarding top performers&lt;/li&gt;&#xA;&lt;li&gt;Determining resource allocation&lt;/li&gt;&#xA;&lt;li&gt;Identification of more productive development processes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;框架是想法、概念和关系的简单总结，因此基于您的上下文、环境和团队，您可以选择一组您可以解释的指标，以确定团队是否在它应该在的地方。&lt;/p&gt;&#xA;&lt;h2 id=&#34;dora&#34;&gt;DORA&lt;/h2&gt;&#xA;&lt;p&gt;DevOps Research and Assessment.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://getdx.com/&#34;&gt;https://getdx.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;speed-metrics&#34;&gt;Speed metrics&lt;/h3&gt;&#xA;&lt;p&gt;Deployment frequency: This measures how often a team deploys code to production.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Low performance: once per month - once per semester. (inadequate integration, lack of automation.)&lt;/li&gt;&#xA;&lt;li&gt;Medium performance: once per month - once per week.&lt;/li&gt;&#xA;&lt;li&gt;High performance: daily for multiple times per day.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Lead time for change: This measures the time it takes from the moment a code change is made until it is successfully deployed to production.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Secret</title>
      <link>https://canuxcheng.com/post/sec_secret/</link>
      <pubDate>Sun, 28 Jul 2024 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_secret/</guid>
      <description>&lt;h1 id=&#34;secret&#34;&gt;Secret&lt;/h1&gt;&#xA;&lt;p&gt;secret scan tools&lt;/p&gt;&#xA;&lt;h2 id=&#34;trufflehog&#34;&gt;trufflehog&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trufflesecurity/trufflehog&#34;&gt;https://github.com/trufflesecurity/trufflehog&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>React</title>
      <link>https://canuxcheng.com/post/js_react/</link>
      <pubDate>Sat, 27 Jan 2024 22:19:20 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js_react/</guid>
      <description>&lt;h1 id=&#34;react&#34;&gt;React&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://react.dev/&#34;&gt;https://react.dev/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Development</title>
      <link>https://canuxcheng.com/post/aws_development/</link>
      <pubDate>Tue, 23 Jan 2024 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws_development/</guid>
      <description>&lt;h1 id=&#34;development&#34;&gt;Development&lt;/h1&gt;&#xA;&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;&#xA;&lt;h3 id=&#34;cloud9&#34;&gt;Cloud9&lt;/h3&gt;&#xA;&lt;h3 id=&#34;codeartifact&#34;&gt;CodeArtifact&lt;/h3&gt;&#xA;&lt;h3 id=&#34;codebuild&#34;&gt;CodeBuild&lt;/h3&gt;&#xA;&lt;h3 id=&#34;codecommit&#34;&gt;CodeCommit&lt;/h3&gt;&#xA;&lt;h3 id=&#34;codedeploy&#34;&gt;CodeDeploy&lt;/h3&gt;&#xA;&lt;h3 id=&#34;codeguru&#34;&gt;CodeGuru&lt;/h3&gt;&#xA;&lt;h3 id=&#34;codepipeline&#34;&gt;CodePipeline&lt;/h3&gt;&#xA;&lt;h3 id=&#34;codestar&#34;&gt;CodeStar&lt;/h3&gt;&#xA;&lt;h3 id=&#34;x-ray&#34;&gt;X-Ray&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;blockchain&#34;&gt;Blockchain&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;multimedia&#34;&gt;Multimedia&lt;/h2&gt;&#xA;&lt;h3 id=&#34;elastic-transcoder&#34;&gt;Elastic Transcoder&lt;/h3&gt;&#xA;&lt;h3 id=&#34;kinesis-video-streams&#34;&gt;Kinesis Video Streams&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;webmobile&#34;&gt;Web&amp;amp;Mobile&lt;/h2&gt;&#xA;&lt;h3 id=&#34;amplify&#34;&gt;Amplify&lt;/h3&gt;&#xA;&lt;h3 id=&#34;api-gateway&#34;&gt;API Gateway&lt;/h3&gt;&#xA;&lt;h3 id=&#34;device-farm&#34;&gt;Device Farm&lt;/h3&gt;&#xA;&lt;h3 id=&#34;pinpoint&#34;&gt;Pinpoint&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;iot&#34;&gt;IoT&lt;/h2&gt;&#xA;&lt;h3 id=&#34;iot-analytics&#34;&gt;IoT Analytics&lt;/h3&gt;&#xA;&lt;h3 id=&#34;iot-core&#34;&gt;IoT Core&lt;/h3&gt;&#xA;&lt;h3 id=&#34;iot-events&#34;&gt;IoT Events&lt;/h3&gt;&#xA;&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;mlai&#34;&gt;ML&amp;amp;AI&lt;/h2&gt;&#xA;&lt;h3 id=&#34;comprehend&#34;&gt;Comprehend&lt;/h3&gt;&#xA;&lt;h3 id=&#34;forecast&#34;&gt;Forecast&lt;/h3&gt;&#xA;&lt;h3 id=&#34;fraud-detector&#34;&gt;Fraud Detector&lt;/h3&gt;&#xA;&lt;h3 id=&#34;kendra&#34;&gt;Kendra&lt;/h3&gt;&#xA;&lt;h3 id=&#34;lex&#34;&gt;Lex&lt;/h3&gt;&#xA;&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Security</title>
      <link>https://canuxcheng.com/post/k8s_security/</link>
      <pubDate>Thu, 19 Oct 2023 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_security/</guid>
      <description>&lt;h1 id=&#34;k8s-security&#34;&gt;K8S Security&lt;/h1&gt;&#xA;&lt;h2 id=&#34;tetragon&#34;&gt;Tetragon&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cilium/tetragon&#34;&gt;https://github.com/cilium/tetragon&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;falco&#34;&gt;Falco&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/falcosecurity/falco&#34;&gt;https://github.com/falcosecurity/falco&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>API Gateway</title>
      <link>https://canuxcheng.com/post/k8s_apigateway/</link>
      <pubDate>Fri, 04 Aug 2023 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_apigateway/</guid>
      <description>&lt;h1 id=&#34;api-gateway&#34;&gt;API Gateway&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/gateway-api&#34;&gt;https://github.com/kubernetes-sigs/gateway-api&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;GatewayClass没有namespace&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;emissary ingress&lt;/li&gt;&#xA;&lt;li&gt;kong&lt;/li&gt;&#xA;&lt;li&gt;higress&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>First_Aid</title>
      <link>https://canuxcheng.com/post/first_aid/</link>
      <pubDate>Mon, 17 Jul 2023 14:46:57 +0800</pubDate>
      <guid>https://canuxcheng.com/post/first_aid/</guid>
      <description>&lt;h1 id=&#34;first-aid&#34;&gt;First Aid&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/fa1.jpg&#34; alt=&#34;pic0&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/fa2.jpg&#34; alt=&#34;pic1&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;确认现场环境安全&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;判断呼吸和意识&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;先跪下判断意识和呼吸情况，两手拍肩膀呼叫，判断意识，看胸口起伏判断呼吸，数数1001，1002，&amp;hellip; 1008 八秒；如果没有意识和呼吸才需要心肺复苏。否则可能是气道梗阻。&lt;/p&gt;&#xA;&lt;h2 id=&#34;气道梗阻&#34;&gt;气道梗阻&lt;/h2&gt;&#xA;&lt;p&gt;不完全气道梗阻：&lt;/p&gt;&#xA;&lt;p&gt;有意识，能沟通，优先咳嗽排出。&#xA;其次采用背部叩击。&#xA;最后才使用腹部冲击（海姆利克法）。&lt;/p&gt;&#xA;&lt;p&gt;完全气道梗阻：&lt;/p&gt;&#xA;&lt;p&gt;没有意识，没有呼吸，需要心肺复苏。&lt;/p&gt;&#xA;&lt;h2 id=&#34;心肺复苏&#34;&gt;心肺复苏&lt;/h2&gt;&#xA;&lt;p&gt;来人啊，救命啊，有人晕倒了，我是急救员，请你拨打120，有AED一并带来，会急救的和我一起。&lt;/p&gt;&#xA;&lt;p&gt;胸部按压30次01，02&amp;hellip; 30，深度5cm左右，确保完全回弹。&lt;/p&gt;&#xA;&lt;p&gt;然后清理口腔异物，吹气两次。&lt;/p&gt;&#xA;&lt;p&gt;胸部按压和吹气连续做5组。&lt;/p&gt;&#xA;&lt;p&gt;每做完5组检查脉搏和呼吸。一只手放头部，另一只手两个指头放劲动脉。计数1001，1002，&amp;hellip; 1008；若有呼吸抢救成功，否则重复上述步骤。&lt;/p&gt;&#xA;&lt;p&gt;如果有AED，随到随用，先打开电源，一个贴片用于病人右侧胸部上方，一个用于左侧胸部侧方，提醒旁人离开，开始分析是否需要除颤，若需要提示旁人离开，按下按钮。提示完成后继续心肺复苏。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arduino</title>
      <link>https://canuxcheng.com/post/hardware_arduino/</link>
      <pubDate>Mon, 15 May 2023 09:41:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/hardware_arduino/</guid>
      <description>&lt;h1 id=&#34;arduino-uno&#34;&gt;Arduino Uno&lt;/h1&gt;&#xA;&lt;p&gt;tinogo-windows开发环境配置&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://tinygo.org/getting-started/install/windows/&#34;&gt;https://tinygo.org/getting-started/install/windows/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;scoop install go&#xA;scoop install tinygo&#xA;scoop install avrdude&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;windows烧写程序&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;tinygo flash -monitor -baudrate=9600 -target arduino -port COMX /path/to/blinky1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;macos烧写程序&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;tinygo flash --target arduino -port /dev/cu.usbserial-0001 ./blinking.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;microcontroller&#34;&gt;Microcontroller&lt;/h2&gt;&#xA;&lt;p&gt;Arduino Uno 使用的是ATmega328p 控制器&lt;/p&gt;&#xA;&lt;p&gt;支持的外设接口:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GPIO：general-purpose input/output，数字接口&lt;/li&gt;&#xA;&lt;li&gt;UART：Universal asynchronous receiver-transmitter，异步串行接口&lt;/li&gt;&#xA;&lt;li&gt;SPI：Serial Peripheral Interface，同步串行接口&lt;/li&gt;&#xA;&lt;li&gt;I2C：Inter-Integrated Circuit, 同步串行接口&lt;/li&gt;&#xA;&lt;li&gt;ADC：Analog-to-digital, 模拟转数字接口&lt;/li&gt;&#xA;&lt;li&gt;PWM: Pulse-width modulation,&lt;/li&gt;&#xA;&lt;li&gt;USB：不支持，异步串行接口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;machine-包&#34;&gt;machine 包&lt;/h2&gt;&#xA;&lt;p&gt;machine包是tinygo中核心包&lt;/p&gt;&#xA;&lt;h2 id=&#34;driver&#34;&gt;Driver&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://tinygo.org/docs/reference/devices/&#34;&gt;https://tinygo.org/docs/reference/devices/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装支持的driver&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;go get tinygo.org/x/drivers&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>GCP</title>
      <link>https://canuxcheng.com/post/gcp/</link>
      <pubDate>Sun, 23 Apr 2023 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gcp/</guid>
      <description>&lt;h1 id=&#34;gcp&#34;&gt;GCP&lt;/h1&gt;&#xA;&lt;p&gt;gcp certification:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Google Cloud Certified Cloud Digital Leader&lt;/li&gt;&#xA;&lt;li&gt;Google Cloud Certified Associate Cloud Engineer&lt;/li&gt;&#xA;&lt;li&gt;Google Cloud Certified DevOps Engineer&lt;/li&gt;&#xA;&lt;li&gt;Google Cloud Certified Machine Learning Engineer&lt;/li&gt;&#xA;&lt;li&gt;Google Cloud Certified Professional Cloud Architect&lt;/li&gt;&#xA;&lt;li&gt;Google Cloud Certified Professional Data Engineer&lt;/li&gt;&#xA;&lt;li&gt;Google Cloud Certified Professional Network Engineer&lt;/li&gt;&#xA;&lt;li&gt;Google Cloud Certified Professional Security Engineer&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;cloud-sdk&#34;&gt;Cloud SDK&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/sdk/docs/install&#34;&gt;https://cloud.google.com/sdk/docs/install&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;默认安装的组件:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bq&lt;/li&gt;&#xA;&lt;li&gt;bundled-python3-unix&lt;/li&gt;&#xA;&lt;li&gt;gsutil&lt;/li&gt;&#xA;&lt;li&gt;core&lt;/li&gt;&#xA;&lt;li&gt;gcloud-crc32c&lt;/li&gt;&#xA;&lt;li&gt;alpha&lt;/li&gt;&#xA;&lt;li&gt;beta&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;安装其它组件:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;gcloud components install app-engine-go docker-credential-gcr kustomize log-streaming terraform-tools app-engine-python app-engine-python-extras gke-gcloud-auth-plugin kubectl kubectl-oidc &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;卸载:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Auth</title>
      <link>https://canuxcheng.com/post/django_auth/</link>
      <pubDate>Fri, 14 Jan 2022 04:29:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_auth/</guid>
      <description>&lt;h1 id=&#34;authpy&#34;&gt;auth.py&lt;/h1&gt;&#xA;&lt;p&gt;自定义authentication backend.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib.auth.backends import BaseBackend&#xA;&#xA;class MyBackend(BaseBackend):&#xA;    def authenticate(self, request):&#xA;        ...&#xA;    def get_user(self, user_id):&#xA;        ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;配置使用自定义backend&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;AUTHENTICATION_BACKENDS =  (&amp;quot;apps.ldap_auth.auth.MyBackend&amp;quot;,)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/etianen/django-python3-ldap&#34;&gt;https://github.com/etianen/django-python3-ldap&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;auth&#34;&gt;auth&lt;/h1&gt;&#xA;&lt;p&gt;配置&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = (&#xA;    &#39;django.contrib.auth&#39;，&#xA;    &#39;django.contrib.contenttypes&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&amp;lsquo;django.contrib.auth&amp;rsquo; 包含了验证框架的内核和它的默认模型。&lt;/p&gt;&#xA;&lt;p&gt;&amp;lsquo;django.contrib.contenttypes&amp;rsquo; 是 Django content type system ，允许你创建的模型和权限相关联。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;MIDDLEWARE_CLASSES = (&#xA;    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,&#xA;    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;用户登录:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib.auth import authenticate, login&#xA;user = authenticate(username=&#39;name&#39;, password=&#39;pw&#39;)&#xA;login(request, user)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;登陆时的默认验证后端:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;AUTHENTICATION_BACKENDS = [&#39;django.contrib.auth.backends.ModelBackend&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;用户登出:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib.auth import logout&#xA;logout(request)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Application</title>
      <link>https://canuxcheng.com/post/cncf_application/</link>
      <pubDate>Sat, 04 Dec 2021 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/cncf_application/</guid>
      <description>&lt;h1 id=&#34;application-definition--image-build&#34;&gt;Application Definition &amp;amp; Image Build&lt;/h1&gt;&#xA;&lt;p&gt;application choreography.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;helm&lt;/li&gt;&#xA;&lt;li&gt;backstage&lt;/li&gt;&#xA;&lt;li&gt;buildpack.io&lt;/li&gt;&#xA;&lt;li&gt;operatorframework&lt;/li&gt;&#xA;&lt;li&gt;dapr&lt;/li&gt;&#xA;&lt;li&gt;kubevela&lt;/li&gt;&#xA;&lt;li&gt;kubevirt&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;backstage&#34;&gt;backstage&lt;/h2&gt;</description>
    </item>
    <item>
      <title>AWS CLF</title>
      <link>https://canuxcheng.com/post/aws_clf/</link>
      <pubDate>Sat, 23 Oct 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws_clf/</guid>
      <description>&lt;h1 id=&#34;clf&#34;&gt;CLF&lt;/h1&gt;&#xA;&lt;p&gt;Foundational: 6个月经验. Cloud Practitioner Foundational(CLF).&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Fundamental cloud concepts for AWS&lt;/li&gt;&#xA;&lt;li&gt;Understanding AWS core services&lt;/li&gt;&#xA;&lt;li&gt;Introduction to security &amp;amp; architecture on AWS&lt;/li&gt;&#xA;&lt;li&gt;AWS certified cloud practitioner exam prep&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>RTFM</title>
      <link>https://canuxcheng.com/rtfm/</link>
      <pubDate>Thu, 14 Oct 2021 01:54:39 -0400</pubDate>
      <guid>https://canuxcheng.com/rtfm/</guid>
      <description>&lt;p&gt;Read The Fucking Manual&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/home/&#34;&gt;https://kubernetes.io/docs/home/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/&#34;&gt;https://docs.docker.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/&#34;&gt;https://golang.org/doc/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/&#34;&gt;https://docs.python.org/3/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/&#34;&gt;https://www.typescriptlang.org/docs/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/docs/&#34;&gt;https://nodejs.org/en/docs/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Management</title>
      <link>https://canuxcheng.com/post/aws_management/</link>
      <pubDate>Thu, 23 Sep 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws_management/</guid>
      <description>&lt;h1 id=&#34;aws-monitor&#34;&gt;AWS Monitor&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;&#xA;&lt;h2 id=&#34;management-console&#34;&gt;Management Console&lt;/h2&gt;&#xA;&lt;h2 id=&#34;quotas&#34;&gt;Quotas&lt;/h2&gt;&#xA;&lt;h2 id=&#34;service-catalog&#34;&gt;Service Catalog&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cloudwatch&#34;&gt;CloudWatch&lt;/h2&gt;&#xA;&lt;p&gt;监控和管理服务，收集logs, metrics 和 events，支持基于metrics的alert。&lt;/p&gt;&#xA;&lt;p&gt;MTTR&#xA;TCO&lt;/p&gt;&#xA;&lt;h2 id=&#34;cloudwatch-logs&#34;&gt;CloudWatch Logs&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cloudtrail&#34;&gt;CloudTrail&lt;/h2&gt;&#xA;&lt;p&gt;可以用来记录，持续监控和保留与AWS基础设施中的操作相关的账户活动。&lt;/p&gt;&#xA;&lt;p&gt;将审计记录插入S3或者cloudwatch log， 记录突发事件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aws-config&#34;&gt;AWS Config&lt;/h2&gt;&#xA;&lt;p&gt;提供基础设施的历史配置。基于规则持续评估基础设施。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aws-trusted-advisor&#34;&gt;AWS Trusted Advisor&lt;/h2&gt;&#xA;&lt;p&gt;优化性能和安全性&lt;/p&gt;&#xA;&lt;h2 id=&#34;amazon-grafana&#34;&gt;Amazon Grafana&lt;/h2&gt;&#xA;&lt;h2 id=&#34;amazon-prometheus&#34;&gt;Amazon Prometheus&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cloudformation&#34;&gt;CloudFormation&lt;/h2&gt;&#xA;&lt;p&gt;提供基于模板(yaml/json)的基础设施服务(IaaS).&lt;/p&gt;&#xA;&lt;h2 id=&#34;compute-optimizer&#34;&gt;Compute Optimizer&lt;/h2&gt;&#xA;&lt;h2 id=&#34;control-tower&#34;&gt;Control Tower&lt;/h2&gt;&#xA;&lt;h2 id=&#34;health-dashboard&#34;&gt;Health Dashboard&lt;/h2&gt;&#xA;&lt;h2 id=&#34;aws-systems-manager&#34;&gt;AWS Systems Manager&lt;/h2&gt;&#xA;&lt;p&gt;提供运维数据，并且在跨基础设施中进行自动化操作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aws-organizations&#34;&gt;AWS Organizations&lt;/h2&gt;&#xA;&lt;p&gt;账号集中管理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aws-license-manager&#34;&gt;AWS License Manager&lt;/h2&gt;&#xA;&lt;h2 id=&#34;proton&#34;&gt;Proton&lt;/h2&gt;&#xA;&lt;h2 id=&#34;aws-well-architected-tool&#34;&gt;AWS Well-Architected Tool&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;financial-management&#34;&gt;Financial Management&lt;/h1&gt;&#xA;&lt;h2 id=&#34;budgets&#34;&gt;Budgets&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cost-explorer&#34;&gt;Cost Explorer&lt;/h2&gt;&#xA;&lt;h2 id=&#34;savings-plans&#34;&gt;Savings Plans&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Samuel</title>
      <link>https://canuxcheng.com/samuel/</link>
      <pubDate>Fri, 30 Jul 2021 05:33:02 -0400</pubDate>
      <guid>https://canuxcheng.com/samuel/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/xinyan5.jpg&#34; alt=&#34;pic0&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/xinyan1.jpg&#34; alt=&#34;pic1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/xinyan2.jpg&#34; alt=&#34;pic2&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/xinyan3.jpg&#34; alt=&#34;pic3&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/xinyan4.jpg&#34; alt=&#34;pic4&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS</title>
      <link>https://canuxcheng.com/post/sec_cors/</link>
      <pubDate>Wed, 28 Jul 2021 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_cors/</guid>
      <description>&lt;h1 id=&#34;cors&#34;&gt;CORS&lt;/h1&gt;&#xA;&lt;p&gt;CORS: Cross-Origin resource sharing, 跨域资源共享.&lt;/p&gt;&#xA;&lt;p&gt;是一种基于 HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其他源（域、协议或端口），使得浏览器允许这些源访问加载自己的资源。跨源资源共享还通过一种机制来检查服务器是否会允许要发送的真实请求，该机制通过浏览器发起一个到服务器托管的跨源资源的“预检”请求。在预检中，浏览器发送的头中标示有 HTTP 方法和真实请求中会用到的头。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;same-origin-policy&#34;&gt;same-origin policy&lt;/h2&gt;&#xA;&lt;p&gt;同源策略，是一种关键的安全机制，它限制由一个源加载的文档或脚本如何与来自另一个源的资源进行交互。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;同源包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;protocal (http, https, &amp;hellip;&amp;hellip;)&lt;/li&gt;&#xA;&lt;li&gt;host&lt;/li&gt;&#xA;&lt;li&gt;port(80, 443, &amp;hellip;&amp;hellip;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;简单请求&#34;&gt;简单请求&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;请求方法是以下三种方法之一：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HEAD&lt;/li&gt;&#xA;&lt;li&gt;GET&lt;/li&gt;&#xA;&lt;li&gt;POST&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;HTTP的头信息不超出以下几种字段：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Accept&lt;/li&gt;&#xA;&lt;li&gt;Accept-Language&lt;/li&gt;&#xA;&lt;li&gt;Content-Language&lt;/li&gt;&#xA;&lt;li&gt;Last-Event-ID&lt;/li&gt;&#xA;&lt;li&gt;Content-Type：application/x-www-form-urlencoded、multipart/form-data、text/plain.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;简单请求在header添加Origin字段说明请求的源(协议，域名，端口):&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Origin: https://domain.com:port&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;预检请求&#34;&gt;预检请求&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;针对其它方法或字段类型.&lt;/p&gt;&#xA;&lt;h2 id=&#34;http-headers&#34;&gt;http headers&lt;/h2&gt;&#xA;&lt;p&gt;响应header中可以带以下字段：&lt;/p&gt;&#xA;&lt;p&gt;Access-Control-Allow-Origin&lt;/p&gt;&#xA;&lt;p&gt;Access-Control-Max-Age&lt;/p&gt;&#xA;&lt;p&gt;Access-Control-Allow-Credentials&lt;/p&gt;&#xA;&lt;p&gt;Access-Control-Allow-Methods&lt;/p&gt;&#xA;&lt;p&gt;Access-Control-Expose-Headers&#xA;Access-Control-Allow-Headers&lt;/p&gt;&#xA;&lt;p&gt;请求header中的字段：&lt;/p&gt;&#xA;&lt;p&gt;Origin&lt;/p&gt;&#xA;&lt;p&gt;Access-Control-Request-Method&lt;/p&gt;&#xA;&lt;p&gt;Access-Control-Request-Headers&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s Encrypt</title>
      <link>https://canuxcheng.com/post/sec_letsencrypt/</link>
      <pubDate>Wed, 28 Jul 2021 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_letsencrypt/</guid>
      <description>&lt;h1 id=&#34;lets-encrypt&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://letsencrypt.org/&#34;&gt;https://letsencrypt.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/letsencrypt&#34;&gt;https://github.com/letsencrypt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;是非盈利组织ISRG提供的免费的证书颁发机构。&lt;/p&gt;&#xA;&lt;p&gt;let&amp;rsquo;s encrypt生成证书的工具很多certbot, acme.sh等.&lt;/p&gt;&#xA;&lt;h1 id=&#34;certbot&#34;&gt;certbot&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/certbot/certbot&#34;&gt;https://github.com/certbot/certbot&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;acmesh&#34;&gt;acme.sh&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh&#34;&gt;https://github.com/acmesh-official/acme.sh&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>BSP</title>
      <link>https://canuxcheng.com/post/hardware_bsp/</link>
      <pubDate>Sat, 15 May 2021 09:41:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/hardware_bsp/</guid>
      <description>&lt;h1 id=&#34;bsp&#34;&gt;BSP&lt;/h1&gt;&#xA;&lt;p&gt;BSP，Board Support Package，板级支持包.&lt;/p&gt;&#xA;&lt;p&gt;熟悉常见的接口协议，如I2C, SPI, UART, USB等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FPGA</title>
      <link>https://canuxcheng.com/post/hardware_fpga/</link>
      <pubDate>Sat, 15 May 2021 09:41:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/hardware_fpga/</guid>
      <description>&lt;h1 id=&#34;fpga&#34;&gt;FPGA&lt;/h1&gt;&#xA;&lt;p&gt;FPGA: Field Programmable Gate Array, 现场可编程逻辑门阵列.&lt;/p&gt;&#xA;&lt;p&gt;下面介绍各家厂商和对应的产品系列.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;xilinx赛灵思&#34;&gt;xilinx/赛灵思&lt;/h1&gt;&#xA;&lt;p&gt;Spartan&lt;/p&gt;&#xA;&lt;p&gt;Artix&lt;/p&gt;&#xA;&lt;p&gt;Kintex&lt;/p&gt;&#xA;&lt;p&gt;Virtex&lt;/p&gt;&#xA;&lt;p&gt;SoC/MPSoC&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;altera阿尔特拉&#34;&gt;Altera/阿尔特拉&lt;/h1&gt;&#xA;&lt;p&gt;被Intel英特尔收购&lt;/p&gt;&#xA;&lt;p&gt;MAXII&lt;/p&gt;&#xA;&lt;p&gt;Cyclone&lt;/p&gt;&#xA;&lt;p&gt;Stratix&lt;/p&gt;&#xA;&lt;p&gt;Arria&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;lattice莱迪思&#34;&gt;Lattice/莱迪思&lt;/h1&gt;&#xA;&lt;p&gt;ECP&lt;/p&gt;&#xA;&lt;p&gt;ICE&lt;/p&gt;&#xA;&lt;p&gt;Mach&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;synplicity&#34;&gt;Synplicity&lt;/h1&gt;&#xA;&lt;p&gt;被Synopsys新思科技收购&lt;/p&gt;&#xA;&lt;h2 id=&#34;haps&#34;&gt;HAPS&lt;/h2&gt;&#xA;&lt;p&gt;HAPS系列产品是专为ASIC/SOC设计者提供的高性能、高容量的基于FPGA的原型验证板.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hardware</title>
      <link>https://canuxcheng.com/post/hardware/</link>
      <pubDate>Sat, 15 May 2021 09:41:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/hardware/</guid>
      <description>&lt;h1 id=&#34;hardware&#34;&gt;Hardware&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/micropython/micropython&#34;&gt;https://github.com/micropython/micropython&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tinygo-org/tinygo&#34;&gt;https://github.com/tinygo-org/tinygo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;soc&#34;&gt;SoC&lt;/h1&gt;&#xA;&lt;p&gt;SOC：（System-On-Chip)片上系统。可以简单的理解为把系统做在一块芯片上。&lt;/p&gt;&#xA;&lt;p&gt;AP: application processor, CPU, GPU, NPU, ISP, DSP, ROM/RAM.&lt;/p&gt;&#xA;&lt;p&gt;BP: base-band processor, BBU.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/chip.png&#34; alt=&#34;pic&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/ISP.png&#34; alt=&#34;pic&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;EUV: Extreme Ultraviolet Lithography，极紫外光刻&lt;/p&gt;&#xA;&lt;p&gt;DSP: Digital Signal Processing.&lt;/p&gt;&#xA;&lt;p&gt;ISP: image signal process.&lt;/p&gt;&#xA;&lt;p&gt;厂商：紫光展锐，华为海思，全志科技，瑞芯微。&lt;/p&gt;&#xA;&lt;h1 id=&#34;rfic&#34;&gt;RFIC&lt;/h1&gt;&#xA;&lt;p&gt;射频芯片&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubeVirt</title>
      <link>https://canuxcheng.com/post/k8s_kubevirt/</link>
      <pubDate>Mon, 10 May 2021 20:55:52 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_kubevirt/</guid>
      <description>&lt;h1 id=&#34;kubevirt&#34;&gt;KubeVirt&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubevirt.io/quickstart_cloud/&#34;&gt;https://kubevirt.io/quickstart_cloud/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://quay.io/organization/kubevirt&#34;&gt;https://quay.io/organization/kubevirt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.fedoraproject.org/en-US/quick-docs/using-nested-virtualization-in-kvm/index.html&#34;&gt;https://docs.fedoraproject.org/en-US/quick-docs/using-nested-virtualization-in-kvm/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;virtctl&#34;&gt;virtctl&lt;/h2&gt;&#xA;&lt;h2 id=&#34;vm&#34;&gt;VM&lt;/h2&gt;&#xA;&lt;p&gt;创建vm&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;apiVersion: kubevirt.io/v1&#xA;kind: VirtualMachine&#xA;metadata:&#xA;name: testvm&#xA;spec:&#xA;running: false&#xA;template:&#xA;    metadata:&#xA;    labels:&#xA;        kubevirt.io/size: small&#xA;        kubevirt.io/domain: testvm&#xA;    spec:&#xA;    domain:&#xA;        devices:&#xA;        disks:&#xA;            - name: containerdisk&#xA;            disk:&#xA;                bus: virtio&#xA;            - name: cloudinitdisk&#xA;            disk:&#xA;                bus: virtio&#xA;        interfaces:&#xA;        - name: default&#xA;            masquerade: {}&#xA;        resources:&#xA;        requests:&#xA;            memory: 64M&#xA;    networks:&#xA;    - name: default&#xA;        pod: {}&#xA;    volumes:&#xA;        - name: containerdisk&#xA;        containerDisk:&#xA;            image: quay.io/kubevirt/cirros-container-disk-demo&#xA;        - name: cloudinitdisk&#xA;        cloudInitNoCloud:&#xA;            userDataBase64: SGkuXG4=&#xA;    nodeSelector:&#xA;        kubernetes.io/arch: arm64&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Cache</title>
      <link>https://canuxcheng.com/post/django_cache/</link>
      <pubDate>Tue, 04 May 2021 04:51:30 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_cache/</guid>
      <description>&lt;h1 id=&#34;cache&#34;&gt;cache&lt;/h1&gt;&#xA;&lt;p&gt;缓存的backend可以是django内置的，也可以是第三方的。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;缓存整个站点&lt;/p&gt;&#xA;&lt;p&gt;MIDDLEWARE = [&#xA;&amp;lsquo;django.middleware.cache.UpdateCacheMiddleware&amp;rsquo;,&#xA;&amp;lsquo;django.middleware.common.CommonMiddleware&amp;rsquo;,&#xA;&amp;lsquo;django.middleware.cache.FetchFromCacheMiddleware&amp;rsquo;,&#xA;]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;视图缓存&lt;/p&gt;&#xA;&lt;p&gt;from django.views.decorators.cache import cache_page&lt;/p&gt;&#xA;&lt;p&gt;@cache_page(60 * 2)&#xA;def my_view(request):&#xA;&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;或者在URLconf中指定&#xA;urlpatterns = [&#xA;path(&amp;lsquo;foo/&lt;a href=&#34;int:code&#34;&gt;int:code&lt;/a&gt;/&amp;rsquo;, cache_page(60 * 2)(my_view)),&#xA;]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;模板片段缓存&lt;/p&gt;&#xA;&lt;p&gt;{% load cache %}&#xA;{% cache &amp;hellip; %}&#xA;&amp;hellip;&#xA;{% endcache %}&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;redis&#34;&gt;redis&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;CACHES = {&#xA;    &amp;quot;default&amp;quot;: {&#xA;        &amp;quot;BACKEND&amp;quot;: &amp;quot;django_redis.cache.RedisCache&amp;quot;,&#xA;        &amp;quot;LOCATION&amp;quot;: os.environ.get(&amp;quot;REDIS_URL&amp;quot;, &#39;&#39;),&#xA;        &amp;quot;OPTIONS&amp;quot;: {&#xA;            &amp;quot;CLIENT_CLASS&amp;quot;: &amp;quot;django_redis.client.DefaultClient&amp;quot;,&#xA;        },&#xA;        &amp;quot;TIMEOUT&amp;quot;: 60,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;memcached&#34;&gt;memcached&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;CACHES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;BACKEND&#39;: &#39;django.core.cache.backends.memcached.MemcachedCache&#39;,&#xA;        &#39;LOCATION&#39;: &#39;127.0.0.1:11211&#39;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;database&#34;&gt;database&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;CACHES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;BACKEND&#39;: &#39;django.core.cache.backends.db.DatabaseCache&#39;,&#xA;        &#39;LOCATION&#39;: &#39;my_cache_table&#39;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>AWS</title>
      <link>https://canuxcheng.com/post/aws/</link>
      <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws/</guid>
      <description>&lt;h1 id=&#34;aws&#34;&gt;AWS&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/donnemartin/awesome-aws&#34;&gt;https://github.com/donnemartin/awesome-aws&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;aws certification:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Foundational: 6个月经验. Cloud Practitioner Foundational(CLF).&lt;/li&gt;&#xA;&lt;li&gt;Associate: 一年经验. Solutions Architect Associate(SAA); Developer, SysOps Administrator&lt;/li&gt;&#xA;&lt;li&gt;Professional: 两年经验. Solutions Architect Professional(SAP), Devops Engineer.&lt;/li&gt;&#xA;&lt;li&gt;Specialty: 特殊领域.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;sdk&#34;&gt;SDK&lt;/h2&gt;&#xA;&lt;p&gt;python&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/boto/boto3&#34;&gt;https://github.com/boto/boto3&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;golang&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aws/aws-sdk-go&#34;&gt;https://github.com/aws/aws-sdk-go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;aws-management-console&#34;&gt;AWS Management Console&lt;/h2&gt;&#xA;&lt;p&gt;通过webUI管理资源.&#xA;kkkkjjkijijijkkjddkkkkjj&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;aws-command-line-interface&#34;&gt;AWS Command Line Interface&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aws/aws-cli&#34;&gt;https://github.com/aws/aws-cli&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/aws-shell&#34;&gt;https://github.com/awslabs/aws-shell&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;推荐使用awscli-V2:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html&#34;&gt;https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;aws [-h] [--profile PROFILE] [--debug]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;option:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;-h, --help&#xA;--profile PROFILE&#xA;--debug&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;comand option:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;aws &amp;lt;service&amp;gt; &amp;lt;subcommand&amp;gt; help &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;cli-credentials&#34;&gt;CLI credentials&lt;/h3&gt;&#xA;&lt;p&gt;优先级：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;命令行选项&lt;/li&gt;&#xA;&lt;li&gt;credentials文件&lt;/li&gt;&#xA;&lt;li&gt;config文件&lt;/li&gt;&#xA;&lt;li&gt;容器凭证&lt;/li&gt;&#xA;&lt;li&gt;实例配置文件凭证&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CLI&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;配置default profile&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Compute Services</title>
      <link>https://canuxcheng.com/post/aws_cs/</link>
      <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws_cs/</guid>
      <description>&lt;h1 id=&#34;aws-compute-service&#34;&gt;AWS Compute Service&lt;/h1&gt;&#xA;&lt;h2 id=&#34;ec2&#34;&gt;EC2&lt;/h2&gt;&#xA;&lt;p&gt;Elastic Compute.&lt;/p&gt;&#xA;&lt;p&gt;AMI: Amazon Machine Image.&lt;/p&gt;&#xA;&lt;p&gt;EC2实例类型:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通用型实例&lt;/li&gt;&#xA;&lt;li&gt;计算优化型实例&lt;/li&gt;&#xA;&lt;li&gt;内存优化型实例&lt;/li&gt;&#xA;&lt;li&gt;加速计算型实例&lt;/li&gt;&#xA;&lt;li&gt;存储优化型实例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;EC2付费类型:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;按需(on-demand)&lt;/li&gt;&#xA;&lt;li&gt;预留实例(reserved)&lt;/li&gt;&#xA;&lt;li&gt;储蓄计划(savings plans)&lt;/li&gt;&#xA;&lt;li&gt;Spot实例&lt;/li&gt;&#xA;&lt;li&gt;专用主机(dedicated)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;elastic-beanstalk&#34;&gt;Elastic Beanstalk&lt;/h2&gt;&#xA;&lt;p&gt;features:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;monitoring&lt;/li&gt;&#xA;&lt;li&gt;deployment&lt;/li&gt;&#xA;&lt;li&gt;scaling&lt;/li&gt;&#xA;&lt;li&gt;EC2 customization&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;lambda&#34;&gt;Lambda&lt;/h2&gt;&#xA;&lt;h2 id=&#34;lightsail&#34;&gt;Lightsail&lt;/h2&gt;&#xA;&lt;h2 id=&#34;batch&#34;&gt;Batch&lt;/h2&gt;&#xA;&lt;h2 id=&#34;app-runner&#34;&gt;App Runner&lt;/h2&gt;&#xA;&lt;h2 id=&#34;auto-scaling&#34;&gt;Auto Scaling&lt;/h2&gt;&#xA;&lt;h2 id=&#34;fargate&#34;&gt;Fargate&lt;/h2&gt;&#xA;&lt;h2 id=&#34;outposts&#34;&gt;Outposts&lt;/h2&gt;&#xA;&lt;h2 id=&#34;wavelength&#34;&gt;Wavelength&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;app-integration&#34;&gt;App Integration&lt;/h1&gt;&#xA;&lt;h2 id=&#34;appflow&#34;&gt;AppFlow&lt;/h2&gt;&#xA;&lt;h2 id=&#34;appsync&#34;&gt;AppSync&lt;/h2&gt;&#xA;&lt;h2 id=&#34;eventbridge&#34;&gt;EventBridge&lt;/h2&gt;&#xA;&lt;h2 id=&#34;step-functions&#34;&gt;Step Functions&lt;/h2&gt;&#xA;&lt;p&gt;无服务架构.&lt;/p&gt;&#xA;&lt;h2 id=&#34;sns&#34;&gt;SNS&lt;/h2&gt;&#xA;&lt;p&gt;Simple Notification Service是消息发布订阅服务.&lt;/p&gt;&#xA;&lt;h2 id=&#34;sqs&#34;&gt;SQS&lt;/h2&gt;&#xA;&lt;p&gt;Simple Queue Service是消息队列服务.&lt;/p&gt;&#xA;&lt;p&gt;支持256KB的payload.&lt;/p&gt;&#xA;&lt;p&gt;提供两种类型的queues:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;standard queue&lt;/li&gt;&#xA;&lt;li&gt;FIFO queue&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mq&#34;&gt;MQ&lt;/h2&gt;&#xA;&lt;p&gt;activeMQ 和 rabbitmq 托管服务。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;business-app-integration&#34;&gt;Business app integration&lt;/h1&gt;&#xA;&lt;h2 id=&#34;simple-email-service&#34;&gt;Simple Email Service&lt;/h2&gt;&#xA;&lt;p&gt;SES&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Containers</title>
      <link>https://canuxcheng.com/post/aws_containers/</link>
      <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws_containers/</guid>
      <description>&lt;h1 id=&#34;aws-containers&#34;&gt;AWS Containers&lt;/h1&gt;&#xA;&lt;h2 id=&#34;ecr&#34;&gt;ECR&lt;/h2&gt;&#xA;&lt;p&gt;Elastic Container Registry.&lt;/p&gt;&#xA;&lt;h2 id=&#34;ecs-anywhere&#34;&gt;ECS Anywhere&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ecs&#34;&gt;ECS&lt;/h2&gt;&#xA;&lt;p&gt;Elastic Container Service.&lt;/p&gt;&#xA;&lt;h2 id=&#34;eks-distro&#34;&gt;EKS Distro&lt;/h2&gt;&#xA;&lt;h2 id=&#34;eks-anywhere&#34;&gt;EKS Anywhere&lt;/h2&gt;&#xA;&lt;h2 id=&#34;eks&#34;&gt;EKS&lt;/h2&gt;&#xA;&lt;p&gt;Elastic Kubernetes Service.&lt;/p&gt;&#xA;&lt;h3 id=&#34;通过aws-cli创建eks&#34;&gt;通过AWS CLI创建EKS&lt;/h3&gt;&#xA;&lt;p&gt;通过MC创建的资源都可以通过CLI(aws)创建.&lt;/p&gt;&#xA;&lt;p&gt;创建具有公有和私有子网且符合 Amazon EKS 要求的 Amazon VPC&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ aws cloudformation create-stack \&#xA;--stack-name my-eks-vpc-stack \&#xA;--region region-code \&#xA;--template-url https://amazon-eks.s3.us-west-2.amazonaws.com/cloudformation/2020-10-29/amazon-eks-vpc-private-subnets.yaml &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建集群 IAM 角色并向其附加所需的 Amazon EKS IAM 托管策略&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 创建EKS IAM role&#xA;aws iam create-role \&#xA;--role-name my-EKSClusterRole \&#xA;--assume-role-policy-document file://cluster-role-trust-policy.json&amp;quot; \&#xA;--permissions-boundary arn:aws:iam::&amp;lt;Your AWS ID&amp;gt;:policy/ProjAdminsPermBoundaryv2&#xA;&#xA;{&#xA;    &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,&#xA;    &amp;quot;Statement&amp;quot;: [&#xA;        {&#xA;            &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,&#xA;            &amp;quot;Principal&amp;quot;: {&#xA;                &amp;quot;Service&amp;quot;: &amp;quot;eks.amazonaws.com&amp;quot;&#xA;            },&#xA;            &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRole&amp;quot;,&#xA;            &amp;quot;Condition&amp;quot;: {}&#xA;        }&#xA;    ]&#xA;}&#xA;&#xA;// 绑定role和eks策略&#xA;aws iam attach-role-policy \&#xA;--policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy \&#xA;--role-name my-EKSClusterRole&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建EKS cluster:&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Data</title>
      <link>https://canuxcheng.com/post/aws_data/</link>
      <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws_data/</guid>
      <description>&lt;h1 id=&#34;data-processing&#34;&gt;Data Processing&lt;/h1&gt;&#xA;&lt;h2 id=&#34;athena&#34;&gt;Athena&lt;/h2&gt;&#xA;&lt;p&gt;serverless交互式分析&lt;/p&gt;&#xA;&lt;h2 id=&#34;data-exchange&#34;&gt;Data Exchange&lt;/h2&gt;&#xA;&lt;h2 id=&#34;glue&#34;&gt;Glue&lt;/h2&gt;&#xA;&lt;p&gt;AWS上的ETL(extract, transform and load)服务，提供数据的提取，转换，加载服务。&lt;/p&gt;&#xA;&lt;h2 id=&#34;data-pipeline&#34;&gt;Data pipeline&lt;/h2&gt;&#xA;&lt;p&gt;也是ETL服务。&lt;/p&gt;&#xA;&lt;h2 id=&#34;emr&#34;&gt;EMR&lt;/h2&gt;&#xA;&lt;p&gt;EMR: Elastic MapReduce.&lt;/p&gt;&#xA;&lt;p&gt;AWS的大数据平台。支持spark, hive, hbase, flink, hudi 和presto.&lt;/p&gt;&#xA;&lt;h2 id=&#34;kinesis&#34;&gt;Kinesis&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Data Analytics&lt;/li&gt;&#xA;&lt;li&gt;Data Firehose&lt;/li&gt;&#xA;&lt;li&gt;Data Streams&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;lake-formation&#34;&gt;Lake Formation&lt;/h2&gt;&#xA;&lt;h2 id=&#34;quicksight&#34;&gt;QuickSight&lt;/h2&gt;&#xA;&lt;h2 id=&#34;opensearch&#34;&gt;OpenSearch&lt;/h2&gt;&#xA;&lt;h2 id=&#34;msk&#34;&gt;MSK&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-analysis&#34;&gt;Data Analysis&lt;/h1&gt;&#xA;&lt;h2 id=&#34;athena-1&#34;&gt;Athena&lt;/h2&gt;&#xA;&lt;p&gt;serverless服务&lt;/p&gt;&#xA;&lt;h2 id=&#34;quicksight-1&#34;&gt;Quicksight&lt;/h2&gt;&#xA;&lt;h2 id=&#34;aws-cloudsearch&#34;&gt;AWS CloudSearch&lt;/h2&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>AWS Database</title>
      <link>https://canuxcheng.com/post/aws_database/</link>
      <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws_database/</guid>
      <description>&lt;h1 id=&#34;aws-database&#34;&gt;AWS Database&lt;/h1&gt;&#xA;&lt;h2 id=&#34;rds&#34;&gt;RDS&lt;/h2&gt;&#xA;&lt;p&gt;Relational Database Service， 关系型数据库服务.&lt;/p&gt;&#xA;&lt;p&gt;支持的数据库引擎：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Amazon Aurora&lt;/li&gt;&#xA;&lt;li&gt;PostgreSQL&lt;/li&gt;&#xA;&lt;li&gt;MySQL&lt;/li&gt;&#xA;&lt;li&gt;MariaDB&lt;/li&gt;&#xA;&lt;li&gt;Oracle Database&lt;/li&gt;&#xA;&lt;li&gt;Microsoft SQL Server&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aurora-serverless&#34;&gt;Aurora Serverless&lt;/h2&gt;&#xA;&lt;h2 id=&#34;aurora&#34;&gt;Aurora&lt;/h2&gt;&#xA;&lt;p&gt;兼容mysql和postgresql.&lt;/p&gt;&#xA;&lt;h2 id=&#34;dynamodb&#34;&gt;DynamoDB&lt;/h2&gt;&#xA;&lt;p&gt;非关系数据库(NoSQL).&lt;/p&gt;&#xA;&lt;p&gt;DynamoDB是一项键值数据库服务. 无服务器，自动扩展。&lt;/p&gt;&#xA;&lt;p&gt;具有Key-Value数据库和Document数据库的功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;documentdb&#34;&gt;DocumentDB&lt;/h2&gt;&#xA;&lt;p&gt;兼容MongoDB.&lt;/p&gt;&#xA;&lt;h2 id=&#34;elasticcache&#34;&gt;ElasticCache&lt;/h2&gt;&#xA;&lt;p&gt;内存数据库(in-memory). 兼容redis和memcached.&lt;/p&gt;&#xA;&lt;h2 id=&#34;keyspaces&#34;&gt;Keyspaces&lt;/h2&gt;&#xA;&lt;p&gt;兼容cassandra的无服务器数据库。&lt;/p&gt;&#xA;&lt;h2 id=&#34;redshift&#34;&gt;Redshift&lt;/h2&gt;&#xA;&lt;p&gt;Amazon Redshift 是一项数据仓库服务，可用于进行大数据分析。&lt;/p&gt;&#xA;&lt;h2 id=&#34;neptune&#34;&gt;Neptune&lt;/h2&gt;&#xA;&lt;p&gt;图形数据库&lt;/p&gt;&#xA;&lt;h2 id=&#34;timesteam&#34;&gt;Timesteam&lt;/h2&gt;</description>
    </item>
    <item>
      <title>AWS Network</title>
      <link>https://canuxcheng.com/post/aws_network/</link>
      <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws_network/</guid>
      <description>&lt;h1 id=&#34;aws-network&#34;&gt;AWS Network&lt;/h1&gt;&#xA;&lt;h2 id=&#34;vpc&#34;&gt;VPC&lt;/h2&gt;&#xA;&lt;p&gt;Virtual Private Cloud.&lt;/p&gt;&#xA;&lt;p&gt;EC2的私有内部网络.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;subnets&lt;/li&gt;&#xA;&lt;li&gt;route tables&lt;/li&gt;&#xA;&lt;li&gt;internet gateways&lt;/li&gt;&#xA;&lt;li&gt;nat gateways&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ENI: Elastic network interfaces.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://canuxcheng.com/images/vpc.png&#34;&gt;pic&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;elb&#34;&gt;ELB&lt;/h2&gt;&#xA;&lt;p&gt;ELB: Elastic Load Balancing&lt;/p&gt;&#xA;&lt;p&gt;弹性负载均衡，可以和EC2,ECS和lambda集成.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/cn/elasticloadbalancing/features/&#34;&gt;https://aws.amazon.com/cn/elasticloadbalancing/features/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;支持四种负载均衡器：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Classic Load Balancer(默认)&lt;/li&gt;&#xA;&lt;li&gt;Gateway Load Balancer&lt;/li&gt;&#xA;&lt;li&gt;Application Load Balancer(ALB)&lt;/li&gt;&#xA;&lt;li&gt;Network Load Balancer(NLB)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/aws-load-balancer-controller.html&#34;&gt;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/aws-load-balancer-controller.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以使用aws默认自带的NLB controller.也可以通过安装aws-load-balancer-controller。推荐后者。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/aws-load-balancer-controller&#34;&gt;https://github.com/kubernetes-sigs/aws-load-balancer-controller&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;需要给vpc上的node的subnet打tag:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubernetes.io/role/elb: 1&#xA;kubernetes.io/role/internal-elb: 1&#xA;kubernetes.io/cluster/${cluster-name}: owned/shared&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;route-53&#34;&gt;Route 53&lt;/h2&gt;&#xA;&lt;p&gt;DNS服务.&lt;/p&gt;&#xA;&lt;p&gt;在route 53创建托管区(hosted zones)之后，可以在ACM申请证书。&lt;/p&gt;&#xA;&lt;p&gt;申请好了证书，需要在route 53创建记录.&lt;/p&gt;&#xA;&lt;p&gt;可以通过external-DNS 自动同步eks上的service和ingress到dns。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;aws route53 list-hosted-zones&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cloudfront&#34;&gt;CloudFront&lt;/h2&gt;&#xA;&lt;p&gt;CDN服务.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;direct-connect&#34;&gt;Direct Connect&lt;/h2&gt;&#xA;&lt;p&gt;提供数据中心和AWS直连。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Security</title>
      <link>https://canuxcheng.com/post/aws_security/</link>
      <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws_security/</guid>
      <description>&lt;h1 id=&#34;security&#34;&gt;Security&lt;/h1&gt;&#xA;&lt;p&gt;Acceptable Use Policy.&lt;/p&gt;&#xA;&lt;h2 id=&#34;iam&#34;&gt;IAM&lt;/h2&gt;&#xA;&lt;p&gt;IAM: Identity and Access Management.&lt;/p&gt;&#xA;&lt;p&gt;STS: Security Token Service.&lt;/p&gt;&#xA;&lt;p&gt;ACL: Access control list.&lt;/p&gt;&#xA;&lt;p&gt;SG: Security Group.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/cn/iam/&#34;&gt;https://aws.amazon.com/cn/iam/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$aws iam list-users&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;IAM的三种身份类型:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Users&lt;/li&gt;&#xA;&lt;li&gt;Groups&lt;/li&gt;&#xA;&lt;li&gt;Roles&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;IAM通过Policy(json)分配权限。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;sso&#34;&gt;SSO&lt;/h2&gt;&#xA;&lt;p&gt;sso登陆:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;aws configure sso&#xA;aws sso login --no-browser &#xA;aws sso logout&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;secrets-manager&#34;&gt;Secrets Manager&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;acm&#34;&gt;ACM&lt;/h2&gt;&#xA;&lt;p&gt;AWS Certificate Manager.&lt;/p&gt;&#xA;&lt;p&gt;在route 53创建托管区(hosted zones)之后，可以在ACM申请证书。&lt;/p&gt;&#xA;&lt;p&gt;申请好了证书，需要在route 53创建记录.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;aws acm list-certificates --region eu-west-1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;aws-load-balancer-controller可以自动关联ACM的证书和ingress.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;artifact&#34;&gt;Artifact&lt;/h2&gt;&#xA;&lt;p&gt;自助的合规报告。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;waf&#34;&gt;WAF&lt;/h2&gt;&#xA;&lt;h2 id=&#34;shield&#34;&gt;Shield&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;kms&#34;&gt;KMS&lt;/h2&gt;&#xA;&lt;p&gt;Key Management Service.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Storage</title>
      <link>https://canuxcheng.com/post/aws_storage/</link>
      <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/aws_storage/</guid>
      <description>&lt;h1 id=&#34;aws-storage&#34;&gt;AWS Storage&lt;/h1&gt;&#xA;&lt;h2 id=&#34;s3&#34;&gt;S3&lt;/h2&gt;&#xA;&lt;p&gt;Simple Storage Service.&lt;/p&gt;&#xA;&lt;p&gt;S3分类：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;S3标准&lt;/li&gt;&#xA;&lt;li&gt;S3标准-IA&lt;/li&gt;&#xA;&lt;li&gt;S3单区-IA&lt;/li&gt;&#xA;&lt;li&gt;S3智能分层&lt;/li&gt;&#xA;&lt;li&gt;S3 Glacier&lt;/li&gt;&#xA;&lt;li&gt;S3 Glacire Deep Archive&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;特点:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无限存储&lt;/li&gt;&#xA;&lt;li&gt;单个对象达到5Tb&lt;/li&gt;&#xA;&lt;li&gt;一次写入，多次读取&lt;/li&gt;&#xA;&lt;li&gt;99%持久性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;s3-glacier&#34;&gt;S3 Glacier&lt;/h2&gt;&#xA;&lt;p&gt;用于存放归档文件，按照访问量收费。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ebs&#34;&gt;EBS&lt;/h2&gt;&#xA;&lt;p&gt;Elastic Block Store.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/aws-ebs-csi-driver&#34;&gt;https://github.com/kubernetes-sigs/aws-ebs-csi-driver&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;EBS可以连接到EC2实例，可用区级资源，需要位于同一可用区中才能连接到EC2实例，卷不会自动扩展。&lt;/p&gt;&#xA;&lt;p&gt;EBS只能被单个EC2实例访问。&lt;/p&gt;&#xA;&lt;p&gt;特点:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大小高达16Tb&lt;/li&gt;&#xA;&lt;li&gt;EC2实例终止后仍然存在&lt;/li&gt;&#xA;&lt;li&gt;默认情况下为固态(SSD)&lt;/li&gt;&#xA;&lt;li&gt;提供IOPS SSD和HDD选项&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;efs&#34;&gt;EFS&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/aws-efs-csi-driver&#34;&gt;https://github.com/kubernetes-sigs/aws-efs-csi-driver&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Elastic File System 是linux的NFS服务.&lt;/p&gt;&#xA;&lt;p&gt;EFS是区域性服务，将数据存储在多个可用区中。可以被上千个EC2实例同时访问。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;完全托管的NFS文件系统&lt;/li&gt;&#xA;&lt;li&gt;为linux负载而设计&lt;/li&gt;&#xA;&lt;li&gt;支持PB级别数据&lt;/li&gt;&#xA;&lt;li&gt;可以跨多个区域存储数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;EFS提供两种存储类型(StorageClass): Standard, Infrequent access.&lt;/p&gt;&#xA;&lt;h2 id=&#34;fsx&#34;&gt;FSx&lt;/h2&gt;&#xA;&lt;p&gt;FSx是windows File Server服务.&lt;/p&gt;&#xA;&lt;h2 id=&#34;storage-gateway&#34;&gt;Storage Gateway&lt;/h2&gt;&#xA;&lt;p&gt;支持三种类型:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tape gateway&lt;/li&gt;&#xA;&lt;li&gt;Volume gateway&lt;/li&gt;&#xA;&lt;li&gt;File Gateway&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aws-backup&#34;&gt;AWS Backup&lt;/h2&gt;&#xA;&lt;h2 id=&#34;aws-edr&#34;&gt;AWS EDR&lt;/h2&gt;&#xA;&lt;p&gt;Elastic Disaster Recovery.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK</title>
      <link>https://canuxcheng.com/post/cloud_cdk/</link>
      <pubDate>Fri, 23 Apr 2021 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/cloud_cdk/</guid>
      <description>&lt;h1 id=&#34;cdk&#34;&gt;CDK&lt;/h1&gt;&#xA;&lt;p&gt;Cloud Development Kit&lt;/p&gt;&#xA;&lt;p&gt;SDK一般是和service交互的。&#xA;CDK用来和基础设施交互的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aws-cdk&#34;&gt;AWS CDK&lt;/h2&gt;&#xA;&lt;p&gt;The AWS Cloud Development Kit (AWS CDK) is an open-source software development framework to define cloud infrastructure in code and provision it through AWS CloudFormation.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aws/aws-cdk&#34;&gt;https://github.com/aws/aws-cdk&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;cdk8s&#34;&gt;CDK8S&lt;/h2&gt;&#xA;&lt;p&gt;cdk8s is an open-source software development framework for defining Kubernetes applications and reusable abstractions using familiar programming languages and rich object-oriented APIs. cdk8s apps synthesize into standard Kubernetes manifests which can be applied to any Kubernetes cluster.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TypeScript</title>
      <link>https://canuxcheng.com/post/js_ts/</link>
      <pubDate>Fri, 05 Mar 2021 09:36:32 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js_ts/</guid>
      <description>&lt;h1 id=&#34;typescript&#34;&gt;TypeScript&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript&#34;&gt;https://github.com/microsoft/TypeScript&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/zh/&#34;&gt;https://www.typescriptlang.org/zh/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/tsdoc&#34;&gt;https://github.com/microsoft/tsdoc&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;tsx&#34;&gt;TSX&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;*.tsx&amp;rdquo; 是js的扩展，允许使用xml语法。&lt;/p&gt;&#xA;&lt;p&gt;typescript支持interface。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;jsc&#34;&gt;jsc&lt;/h2&gt;&#xA;&lt;p&gt;将TS编译成JS, tsconfig.json是配置文件。&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>BitBake</title>
      <link>https://canuxcheng.com/post/linux_bitbake/</link>
      <pubDate>Sun, 12 Jul 2020 21:18:33 +0000</pubDate>
      <guid>https://canuxcheng.com/post/linux_bitbake/</guid>
      <description>&lt;h1 id=&#34;bitbake&#34;&gt;BitBake&lt;/h1&gt;&#xA;&lt;p&gt;bitbake是类似于make的构建工具，主要用于OpenEmbedded和yocto构建linux发行版.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openembedded/bitbake&#34;&gt;https://github.com/openembedded/bitbake&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;bitbake:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ bitbake python -c devshell/devpyshell&#xA;$ bitbake python -c clean/cleanall/cleanstate&#xA;$ bitbake python -c compile&#xA;$ bitbake python -c fetch/fetchall&#xA;&#xA;# 查找下载地址&#xA;$ bitbake -e python | grep ^SRC_URI&#xA;&#xA;# 根据文件查找包名&#xA;bitbake&amp;gt; oe-pkgdata-util find-path /usr/bin/python3&#xA;&#xA;# 包名查找recipe&#xA;bitbake&amp;gt; oe-pkgdata-util lookup-recipe python3-core&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;openembedded&#34;&gt;openembedded&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openembedded/openembedded-core&#34;&gt;https://github.com/openembedded/openembedded-core&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;yoctopoky&#34;&gt;yocto(poky)&lt;/h1&gt;&#xA;&lt;p&gt;poky是一个开源的最小构建示例，内置bitbake，可直接编译.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://git.yoctoproject.org/cgit/cgit.cgi/poky/log/&#34;&gt;http://git.yoctoproject.org/cgit/cgit.cgi/poky/log/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://git.yoctoproject.org/cgit/cgit.cgi/meta-virtualization/tree/recipes-containers&#34;&gt;http://git.yoctoproject.org/cgit/cgit.cgi/meta-virtualization/tree/recipes-containers&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/crazy-canux/poky&#34;&gt;https://github.com/crazy-canux/poky&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;toaster&#34;&gt;toaster&lt;/h1&gt;</description>
    </item>
    <item>
      <title>kernel</title>
      <link>https://canuxcheng.com/post/linux_kernel/</link>
      <pubDate>Wed, 27 May 2020 22:29:00 +0800</pubDate>
      <guid>https://canuxcheng.com/post/linux_kernel/</guid>
      <description>&lt;h1 id=&#34;kernel&#34;&gt;Kernel&lt;/h1&gt;&#xA;&lt;h1 id=&#34;command&#34;&gt;command&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;lsmod 查看已加载的模块    # /proc/modules&#xA;rmmod &amp;lt;name&amp;gt; 删除模块&#xA;&#xA;modprobe -c 查看已编译可加载的内核模块&#xA;modprobe &amp;lt;name&amp;gt; 加载模块 # /etc/modules&#xA;modprobe -r &amp;lt;name&amp;gt; 删除模块&#xA;&#xA;// modprobe 重启就没了&#xA;echo &amp;quot;ipmi_devintf&amp;quot; &amp;gt;&amp;gt; /etc/modules&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Linux Security</title>
      <link>https://canuxcheng.com/post/linux_security/</link>
      <pubDate>Sun, 24 May 2020 15:30:42 +0800</pubDate>
      <guid>https://canuxcheng.com/post/linux_security/</guid>
      <description>&lt;h1 id=&#34;selinux&#34;&gt;SeLinux&lt;/h1&gt;&#xA;&lt;p&gt;Security-Enhanced Linux&lt;/p&gt;&#xA;&lt;h1 id=&#34;seccomp&#34;&gt;SecComp&lt;/h1&gt;&#xA;&lt;p&gt;Secure computing mode (seccomp) is a Linux kernel feature.&lt;/p&gt;&#xA;&lt;h1 id=&#34;apparmor&#34;&gt;AppArmor&lt;/h1&gt;&#xA;&lt;p&gt;AppArmor (Application Armor) is a Linux security module that protects an operating system and its applications from security threats.&lt;/p&gt;</description>
    </item>
    <item>
      <title>K8S CNI</title>
      <link>https://canuxcheng.com/post/k8s_cni/</link>
      <pubDate>Thu, 26 Mar 2020 20:55:52 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_cni/</guid>
      <description>&lt;h1 id=&#34;network-add-ons&#34;&gt;Network add-ons&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/containernetworking&#34;&gt;https://github.com/containernetworking&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;flannel&lt;/li&gt;&#xA;&lt;li&gt;cilium&lt;/li&gt;&#xA;&lt;li&gt;calico&lt;/li&gt;&#xA;&lt;li&gt;vpc-cni (aws)&lt;/li&gt;&#xA;&lt;li&gt;kube-router&lt;/li&gt;&#xA;&lt;li&gt;weavenet&lt;/li&gt;&#xA;&lt;li&gt;antrea&lt;/li&gt;&#xA;&lt;li&gt;romana&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;cilium&#34;&gt;cilium&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cilium/cilium&#34;&gt;https://github.com/cilium/cilium&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;flannel&#34;&gt;Flannel&lt;/h2&gt;&#xA;&lt;p&gt;flannel是k8s最常用的网络插件.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/coreos/flannel&#34;&gt;https://github.com/coreos/flannel&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在所有node上部署cni-plugin:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/containernetworking/plugins/releases&#34;&gt;https://github.com/containernetworking/plugins/releases&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo mkdir -p /opt/cni/bin&#xA;// 下载并解压所有插件命令到该目录.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;network-addon(master上操作即可):&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;veryfy:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ kubectl get nodes&#xA;$ kubectl get pod --all-namespaces&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;删除插件:&lt;/p&gt;&#xA;&lt;p&gt;删除插件会影响已经部署的pod.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 删除flannel &#xA;$ kubectl delete -f X.yml  &#xA;$ sudo systemctl stop kubelet docker&#xA;&#xA;// 第二步，在node节点清理flannel网络留下的文件&#xA;ifconfig cni0 down&#xA;ip link delete cni0 &#xA;ifconfig flannel.1 down&#xA;ip link delete flannel.1 &#xA;rm -rf /var/lib/cni /etc/cni /run/flannel&#xA;$ sudo rm -rf /var/lib/kubelet /var/lib/etcd&#xA;&#xA;// 重启kubelet&#xA;$ sudo systemctl start kubelet docker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;修改配置:&lt;/p&gt;</description>
    </item>
    <item>
      <title>K8S CSI</title>
      <link>https://canuxcheng.com/post/k8s_csi/</link>
      <pubDate>Wed, 25 Mar 2020 20:55:52 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_csi/</guid>
      <description>&lt;h1 id=&#34;csi&#34;&gt;CSI&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/container-storage-interface/spec&#34;&gt;https://github.com/container-storage-interface/spec&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;rook&lt;/li&gt;&#xA;&lt;li&gt;cubefs&lt;/li&gt;&#xA;&lt;li&gt;longhorn&lt;/li&gt;&#xA;&lt;li&gt;ceph&lt;/li&gt;&#xA;&lt;li&gt;minio&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;卷volume&#34;&gt;卷Volume&lt;/h2&gt;&#xA;&lt;p&gt;和docker中的一样。&lt;/p&gt;&#xA;&lt;p&gt;volume支持的卷类型有: awsEBS, azureDisk, azureFile, gcePD, secret, configMap, emptyDir, hostPath, local, nfs等.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;apiVersion: v1&#xA;kind: Pod&#xA;metadata:&#xA;  name: test-ebs&#xA;spec:&#xA;  containers:&#xA;  - image: k8s.gcr.io/test-webserver&#xA;    name: test-container&#xA;    volumeMounts:&#xA;    - mountPath: /test-ebs&#xA;      name: test-volume&#xA;  volumes:&#xA;  - name: test-volume&#xA;    # 此 AWS EBS 卷必须已经存在&#xA;    awsElasticBlockStore:&#xA;      volumeID: &amp;quot;&amp;lt;volume-id&amp;gt;&amp;quot;&#xA;      fsType: ext4&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;AWS的EBS和EFS需要安装驱动:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/aws-ebs-csi-driver&#34;&gt;https://github.com/kubernetes-sigs/aws-ebs-csi-driver&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/kubernetes-sigs/aws-efs-csi-driver&#34;&gt;https://github.com/kubernetes-sigs/aws-efs-csi-driver&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;存储类storageclass&#34;&gt;存储类StorageClass&lt;/h2&gt;&#xA;&lt;p&gt;storageclass没有namespace.&lt;/p&gt;&#xA;&lt;p&gt;每个存储类包含provisioner, parameters和reclaimPolicy.&lt;/p&gt;&#xA;&lt;p&gt;内置provisioner的卷插件:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;awsEBS&lt;/li&gt;&#xA;&lt;li&gt;azureFile&lt;/li&gt;&#xA;&lt;li&gt;azureDisk&lt;/li&gt;&#xA;&lt;li&gt;gcePD&lt;/li&gt;&#xA;&lt;li&gt;openstack cinder&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;没有provisioner的卷类型可以使用外部插件或者自己开发.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/sig-storage-lib-external-provisioner&#34;&gt;https://github.com/kubernetes-sigs/sig-storage-lib-external-provisioner&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubectl</title>
      <link>https://canuxcheng.com/post/k8s_kubectl/</link>
      <pubDate>Fri, 10 Jan 2020 20:58:01 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_kubectl/</guid>
      <description>&lt;h1 id=&#34;kubectl&#34;&gt;kubectl&lt;/h1&gt;&#xA;&lt;p&gt;kubectl是kubernetes的管理工具.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/#kubectl&#34;&gt;https://kubernetes.io/docs/tasks/tools/#kubectl&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cloudnativelabs/kube-shell&#34;&gt;https://github.com/cloudnativelabs/kube-shell&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jonmosco/kube-ps1&#34;&gt;https://github.com/jonmosco/kube-ps1&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ahmetb/kubectx&#34;&gt;https://github.com/ahmetb/kubectx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在master上通过kubectl命令管理集群.&lt;/p&gt;&#xA;&lt;p&gt;kubectl 版本和集群版本之间的差异必须在一个小版本号内。 例如：v1.24 版本的客户端能与 v1.23、 v1.24 和 v1.25 版本的控制面通信。 用最新兼容版的 kubectl 有助于避免不可预见的问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl options # 查看所有命令可用选项&#xA;&#xA;--kubeconfig&#xA;kubectl --kubeconfig=$HOME/.kube.config (default)&#xA;&#xA;-n/--namespace&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;basic-command&#34;&gt;basic command&lt;/h2&gt;&#xA;&lt;p&gt;create:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 通过yaml或json文件创建资源&#xA;$ kubectl create -f FILENAME [options]&#xA;&#xA;options:&#xA;-f/--filename&#xA;&#xA;kubectl create secret tls kubernetes-dashboard-tls --key ca.key --cert ca.crt -n kubernetes-dashboard&#xA;&#xA;// 输出一个资源的yaml格式.&#xA;kubectl create deployment &amp;lt;name&amp;gt; --image=&amp;lt;img-name&amp;gt; --dry-run=client --output=yaml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;delete:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 删除资源&#xA;$ kubectl delete (-f FILENAME | -k DICT | TYPE [(NAME|-l label|--all)]) [optiions]&#xA;&#xA;options:&#xA;-f/--filename&#xA;--all  &#xA;--all-namespaces&#xA;--force&#xA;&#xA;$ kubectl delete pods --all&#xA;$ kubectl delete pod &amp;lt;name&amp;gt;&#xA;// 删除指定ns下所有资源.&#xA;$ kubectl delete all --all -n {namespace}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;删除带有finalizers字段的对象，对象实际被更新了，没有真的被删除。可以通过patch来删除。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CI/CD</title>
      <link>https://canuxcheng.com/post/k8s_cicd/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_cicd/</guid>
      <description>&lt;h1 id=&#34;continuous-integration--delivery&#34;&gt;Continuous Integration &amp;amp; Delivery&lt;/h1&gt;&#xA;&lt;h2 id=&#34;argo-cd&#34;&gt;argo-cd&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/argoproj/argo-cd&#34;&gt;https://github.com/argoproj/argo-cd&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;flux-cd&#34;&gt;flux-cd&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluxcd/flux&#34;&gt;https://github.com/fluxcd/flux&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contribution</title>
      <link>https://canuxcheng.com/post/k8s_oss/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_oss/</guid>
      <description>&lt;h1 id=&#34;kubernetes-contribution&#34;&gt;Kubernetes Contribution&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/guide/contributor-cheatsheet/README-zh.md&#34;&gt;https://github.com/kubernetes/community/blob/master/contributors/guide/contributor-cheatsheet/README-zh.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建google账号&#34;&gt;创建google账号&lt;/h2&gt;&#xA;&lt;p&gt;推荐申请一个google邮箱。&lt;/p&gt;&#xA;&lt;p&gt;在开发机配置git&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ git config --global user.email name@gmail.com   &#xA;$ git config user.email name@gmail.com            &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;签cla并阅读coc&#34;&gt;签CLA并阅读CoC&lt;/h2&gt;&#xA;&lt;p&gt;个人开发者需要签署CLA, 选择individual contributors并用github账号登陆，然后去邮箱授权；之后重新进入，再去邮箱签字。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://identity.linuxfoundation.org/projects/cncf&#34;&gt;https://identity.linuxfoundation.org/projects/cncf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;读一下CoC和CV&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cncf/foundation/blob/master/code-of-conduct-languages/zh.md&#34;&gt;https://github.com/cncf/foundation/blob/master/code-of-conduct-languages/zh.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/values.md&#34;&gt;https://github.com/kubernetes/community/blob/master/values.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置开发环境&#34;&gt;配置开发环境&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/devel/README.md#setting-up-your-dev-environment-coding-and-debugging&#34;&gt;https://github.com/kubernetes/community/blob/master/contributors/devel/README.md#setting-up-your-dev-environment-coding-and-debugging&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以在docker里面编译，也可以直接在操作系统上编译。&lt;/p&gt;&#xA;&lt;p&gt;在docker里面编译&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/ae9ca48f01ddb03731e7903cfe91ef3db9ce8990/build/README.md&#34;&gt;https://github.com/kubernetes/kubernetes/blob/ae9ca48f01ddb03731e7903cfe91ef3db9ce8990/build/README.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;build/run.sh make 只编译linux平台&#xA;build/run.sh make cross 编译所有平台&#xA;build/run.sh make kubectl KUBE_BUILD_PLATFORMS=darwin/amd64 编译指定平台的指定组件&#xA;&#xA;build/run.sh make test 单元测试&#xA;build/run.sh make test-integration 集成测试&#xA;build/run.sh make test-cmd  命令行测试&#xA;&#xA;build/copy-output.sh 将编译的binary从_output/dockerized/bin拷贝到本地&#xA;&#xA;build/make-clean.sh 清空_output&#xA;&#xA;build.shell.sh 交互模式进入编译的container&#xA;&#xA;build/release.sh 编译，测试，打包，kubernetes.tar.gz&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在操作系统上编译&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/devel/development.md#building-kubernetes-on-a-local-osshell-environment&#34;&gt;https://github.com/kubernetes/community/blob/master/contributors/devel/development.md#building-kubernetes-on-a-local-osshell-environment&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装依赖&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;sudo apt-get install build-essential&#xA;// apt: docker, rsync, jq, go, &#xA;// python: pyyaml,&#xA;&#xA;// 安装etcd用于集成测试&#xA;./hack/install-etcd.sh&#xA;export PATH=&amp;quot;$GOPATH/src/k8s.io/kubernetes/third_party/etcd:${PATH}&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;编译和测试&lt;/p&gt;</description>
    </item>
    <item>
      <title>K8S API</title>
      <link>https://canuxcheng.com/post/k8s_api/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_api/</guid>
      <description>&lt;h1 id=&#34;api&#34;&gt;API&lt;/h1&gt;&#xA;&lt;p&gt;api-server统一的操作入口.&lt;/p&gt;&#xA;&lt;p&gt;kubectl, UI, 等都是通过api-server操作资源.&lt;/p&gt;&#xA;&lt;p&gt;payload可以是json，也可以是yaml.&lt;/p&gt;&#xA;&lt;p&gt;yaml文件中#表示行注释。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;yaml&#34;&gt;yaml&lt;/h1&gt;&#xA;&lt;p&gt;部署k8s可以通过yaml文件来配置资源.&lt;/p&gt;&#xA;&lt;p&gt;资源对象组成部分:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;apiVersion: &#xA;kind: &#xA;metadata: 元数据&#xA;spec: 期望的状态&#xA;status: 观测到的状态&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看apiVersion:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl api-versions&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看Kind:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl api-resources&#xA;&#xA;# In a namespace&#xA;kubectl api-resources --namespaced=true&#xA;&#xA;# Not in a namespace&#xA;kubectl api-resources --namespaced=false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;metadata:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;metadata:&#xA;&#xA;  name:&#xA;  namespace:&#xA;&#xA;  labels/标签: 用户筛选资源，唯一的资源组合方法, 可以使用selector来查询.&#xA;&#xA;  annotations/注解: 存储资源的非标识性信息，扩展资源的spec/status.&#xA;&#xA;  ownerReference/关系: 方便反向查找创建资源的对象，方便进行级联删除。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;spec:&lt;/p&gt;&#xA;&lt;p&gt;status:&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;调度抢占驱逐&#34;&gt;调度，抢占，驱逐&lt;/h1&gt;&#xA;&lt;p&gt;taints: 污点，使节点排斥特定pod。应用于node。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;taints:&#xA;- effect: NoSchedule&#xA;  key: kubernetes.io/arch&#xA;  value: arm64&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;tolerations: 容忍度，使pod被吸引到特定节点。应用于pod。&#xA;这个只能让pod能部署到加了污点的node，pod也能部署到其它没有加污点的node。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Operator</title>
      <link>https://canuxcheng.com/post/k8s_operator/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_operator/</guid>
      <description>&lt;h1 id=&#34;operator&#34;&gt;Operator&lt;/h1&gt;&#xA;&lt;p&gt;TPR(Third Party Resource) 在k8s 1.7 被集成，并命名为CRD(Custom Resource Definition).&lt;/p&gt;&#xA;&lt;p&gt;通过CRD，K8S可以动态的添加和管理资源，controller跟踪这些资源。&lt;/p&gt;&#xA;&lt;p&gt;CRD+custom Controller = decalartive API(声明式API),一般分为通用性controller和operator.&lt;/p&gt;&#xA;&lt;p&gt;通用型controller一般用于平台需求，operator一般用于部署特定应用.&lt;/p&gt;&#xA;&lt;p&gt;用于开发operator的工具有kubebuilder和operator-sdk, 他们都是基于controller-runtime开发.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/operator-framework/awesome-operators&#34;&gt;https://github.com/operator-framework/awesome-operators&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://access.redhat.com/documentation/zh-cn/openshift_container_platform/4.2/html/operators/index&#34;&gt;https://access.redhat.com/documentation/zh-cn/openshift_container_platform/4.2/html/operators/index&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://operatorhub.io/&#34;&gt;https://operatorhub.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;开发示例:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/sample-controller&#34;&gt;https://github.com/kubernetes/sample-controller&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;operator的build三种模式:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;go&lt;/li&gt;&#xA;&lt;li&gt;ansible&lt;/li&gt;&#xA;&lt;li&gt;helm&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;operator的run三种模式:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在集群外部本地运行（开发测试).&lt;/li&gt;&#xA;&lt;li&gt;作为deployment在集群内部运行.&lt;/li&gt;&#xA;&lt;li&gt;通过OLM部署.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;operator-sdk&#34;&gt;operator-sdk&lt;/h1&gt;&#xA;&lt;p&gt;redhat的operator-sdk可以方便的开发opeartor.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/operator-framework/operator-sdk&#34;&gt;https://github.com/operator-framework/operator-sdk&lt;/a&gt;&#xA;&lt;a href=&#34;https://sdk.operatorframework.io/docs/installation/&#34;&gt;https://sdk.operatorframework.io/docs/installation/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;kubebuilder&#34;&gt;kubebuilder&lt;/h1&gt;&#xA;&lt;p&gt;sig维护的kubebuilder也能方便的开发operator.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kubebuilder&#34;&gt;https://github.com/kubernetes-sigs/kubebuilder&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Service Discovery</title>
      <link>https://canuxcheng.com/post/k8s_servicediscovery/</link>
      <pubDate>Fri, 10 Jan 2020 20:55:52 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_servicediscovery/</guid>
      <description>&lt;h1 id=&#34;coordination--service-discovery&#34;&gt;Coordination &amp;amp; Service Discovery&lt;/h1&gt;&#xA;&lt;p&gt;微服务的服务注册和服务发现.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;coredns&lt;/li&gt;&#xA;&lt;li&gt;etcd&lt;/li&gt;&#xA;&lt;li&gt;zookeeper&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;etcd&#34;&gt;Etcd&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/etcd-io/etcd&#34;&gt;https://github.com/etcd-io/etcd&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;类似的有consul和zoomkeeper.&lt;/p&gt;&#xA;&lt;h3 id=&#34;etcdctl&#34;&gt;etcdctl&lt;/h3&gt;&#xA;&lt;p&gt;使用证书访问:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ etcdctl \&#xA;--cacert=/etc/kubernetes/pki/etcd/ca.crt \&#xA;--cert=/etc/kubernetes/pki/etcd/server.crt  \&#xA;--key=/etc/kubernetes/pki/etcd/server.key \&#xA;--insecure-skip-tls-verify=true \&#xA;&amp;lt;command&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看所有key&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ etcdctl get / --prefix --keys-only&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;zookeeper&#34;&gt;zookeeper&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Compose</title>
      <link>https://canuxcheng.com/post/cncf_compose/</link>
      <pubDate>Sat, 04 Jan 2020 21:53:40 +0800</pubDate>
      <guid>https://canuxcheng.com/post/cncf_compose/</guid>
      <description>&lt;h1 id=&#34;docker-compose&#34;&gt;docker-compose&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker/compose&#34;&gt;https://github.com/docker/compose&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过一个yaml文件来管理容器中的服务，包括网络和存储。&lt;/p&gt;&#xA;&lt;p&gt;安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;https://docs.docker.com/compose/install/&#xA;$ sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose&#xA;$ sudo chmod +x /usr/local/bin/docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;docker-compose命令&#34;&gt;docker-compose命令&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker-compose [-f &amp;lt;arg&amp;gt;...] [options] [COMMAND] [ARGS...]&#xA;-f/--file&#xA;-p/--project-name # 默认目录名&#xA;-H/--host&#xA;&#xA;# 拉取compose文件中指定的镜像&#xA;$ docker-compose -f service.yml pull&#xA;&#xA;# 根据docker-compose.yml把stack打包成一个Distributed Application Bundles文件.&#xA;$ docker-compose bundle -o &amp;lt;project name&amp;gt;.dab&#xA;&#xA;$ docker-compose start [servoce...]&#xA;$ docker-compose stop [service...]&#xA;$ docker-compose restart [service...]&#xA;$ docker-compose up -d [service...]&#xA;$ docker-compose down -v&#xA;&#xA;$ docker-compose logs -f&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;docker-composeyml&#34;&gt;docker-compose.yml&lt;/h1&gt;&#xA;&lt;p&gt;compose中的变量：&lt;/p&gt;</description>
    </item>
    <item>
      <title>API Access Control</title>
      <link>https://canuxcheng.com/post/k8s_accesscontrol/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_accesscontrol/</guid>
      <description>&lt;h1 id=&#34;api-access-control&#34;&gt;API Access Control&lt;/h1&gt;&#xA;&lt;h2 id=&#34;admission-controllers&#34;&gt;Admission Controllers&lt;/h2&gt;&#xA;&lt;h3 id=&#34;mutatingadmissionwebhook&#34;&gt;MutatingAdmissionWebhook&lt;/h3&gt;&#xA;&lt;h3 id=&#34;validatingadmissionwebhook&#34;&gt;ValidatingAdmissionWebhook&lt;/h3&gt;&#xA;&lt;h3 id=&#34;validatingwebhookconfiguration&#34;&gt;ValidatingWebhookConfiguration&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;apiVersion: admissionregistration.k8s.io/v1&#xA;kind: ValidatingWebhookConfiguration&#xA;metadata:&#xA;  annotations:&#xA;    meta.helm.sh/release-name: ingress-nginx-internal&#xA;    meta.helm.sh/release-namespace: ingress-nginx&#xA;  labels:&#xA;    app.kubernetes.io/component: admission-webhook&#xA;    app.kubernetes.io/instance: ingress-nginx-internal&#xA;    app.kubernetes.io/managed-by: Helm&#xA;    app.kubernetes.io/name: ingress-nginx&#xA;    app.kubernetes.io/part-of: ingress-nginx&#xA;    app.kubernetes.io/version: 1.9.1&#xA;    helm.sh/chart: ingress-nginx-4.8.1&#xA;  name: ingress-nginx-internal-admission&#xA;webhooks:&#xA;- admissionReviewVersions:&#xA;  - v1&#xA;  clientConfig:&#xA;    caBundle: &#xA;    service:&#xA;      name: ingress-nginx-internal-controller-admission&#xA;      namespace: ingress-nginx&#xA;      path: /networking/v1/ingresses&#xA;      port: 443&#xA;  failurePolicy: Fail&#xA;  matchPolicy: Equivalent&#xA;  name: validate.nginx.ingress.kubernetes.io&#xA;  namespaceSelector: {}&#xA;  objectSelector: {}&#xA;  rules:&#xA;  - apiGroups:&#xA;    - networking.k8s.io&#xA;    apiVersions:&#xA;    - v1&#xA;    operations:&#xA;    - CREATE&#xA;    - UPDATE&#xA;    resources:&#xA;    - ingresses&#xA;    scope: &#39;*&#39;&#xA;  sideEffects: None&#xA;  timeoutSeconds: 10&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;mutatingwebhookconfiguration&#34;&gt;MutatingWebhookConfiguration&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;apiVersion: admissionregistration.k8s.io/v1&#xA;kind: MutatingWebhookConfiguration&#xA;metadata:&#xA;  annotations:&#xA;    meta.helm.sh/release-name: vault-secrets-webhook&#xA;    meta.helm.sh/release-namespace: vault-secrets-webhook&#xA;  labels:&#xA;    app.kubernetes.io/managed-by: Helm&#xA;  name: vault-secrets-webhook&#xA;webhooks:&#xA;- admissionReviewVersions:&#xA;  - v1beta1&#xA;  clientConfig:&#xA;    caBundle:&#xA;    service:&#xA;      name: vault-secrets-webhook&#xA;      namespace: vault-secrets-webhook&#xA;      path: /pods&#xA;      port: 443&#xA;  failurePolicy: Ignore&#xA;  matchPolicy: Equivalent&#xA;  name: pods.vault-secrets-webhook.admission.banzaicloud.com&#xA;  namespaceSelector:&#xA;    matchExpressions:&#xA;    - key: name&#xA;      operator: NotIn&#xA;      values:&#xA;      - kube-system&#xA;    - key: kubernetes.io/metadata.name&#xA;      operator: NotIn&#xA;      values:&#xA;      - kube-system&#xA;    - key: kubernetes.io/metadata.name&#xA;      operator: NotIn&#xA;      values:&#xA;      - vault-secrets-webhook&#xA;  objectSelector:&#xA;    matchExpressions:&#xA;    - key: security.banzaicloud.io/mutate&#xA;      operator: NotIn&#xA;      values:&#xA;      - skip&#xA;  reinvocationPolicy: Never&#xA;  rules:&#xA;  - apiGroups:&#xA;    - &#39;*&#39;&#xA;    apiVersions:&#xA;    - &#39;*&#39;&#xA;    operations:&#xA;    - CREATE&#xA;    resources:&#xA;    - pods&#xA;    scope: &#39;*&#39;&#xA;  sideEffects: NoneOnDryRun&#xA;  timeoutSeconds: 10&#xA;- admissionReviewVersions:&#xA;  - v1beta1&#xA;  clientConfig:&#xA;    caBundle:&#xA;    service:&#xA;      name: vault-secrets-webhook&#xA;      namespace: vault-secrets-webhook&#xA;      path: /secrets&#xA;      port: 443&#xA;  failurePolicy: Ignore&#xA;  matchPolicy: Equivalent&#xA;  name: secrets.vault-secrets-webhook.admission.banzaicloud.com&#xA;  namespaceSelector:&#xA;    matchExpressions:&#xA;    - key: name&#xA;      operator: NotIn&#xA;      values:&#xA;      - kube-system&#xA;    - key: kubernetes.io/metadata.name&#xA;      operator: NotIn&#xA;      values:&#xA;      - kube-system&#xA;    - key: kubernetes.io/metadata.name&#xA;      operator: NotIn&#xA;      values:&#xA;      - vault-secrets-webhook&#xA;  objectSelector:&#xA;    matchExpressions:&#xA;    - key: owner&#xA;      operator: NotIn&#xA;      values:&#xA;      - helm&#xA;    - key: security.banzaicloud.io/mutate&#xA;      operator: NotIn&#xA;      values:&#xA;      - skip&#xA;  reinvocationPolicy: Never&#xA;  rules:&#xA;  - apiGroups:&#xA;    - &#39;*&#39;&#xA;    apiVersions:&#xA;    - &#39;*&#39;&#xA;    operations:&#xA;    - CREATE&#xA;    - UPDATE&#xA;    resources:&#xA;    - secrets&#xA;    scope: &#39;*&#39;&#xA;  sideEffects: NoneOnDryRun&#xA;  timeoutSeconds: 10&#xA;- admissionReviewVersions:&#xA;  - v1beta1&#xA;  clientConfig:&#xA;    caBundle:&#xA;    service:&#xA;      name: vault-secrets-webhook&#xA;      namespace: vault-secrets-webhook&#xA;      path: /configmaps&#xA;      port: 443&#xA;  failurePolicy: Ignore&#xA;  matchPolicy: Equivalent&#xA;  name: configmaps.vault-secrets-webhook.admission.banzaicloud.com&#xA;  namespaceSelector:&#xA;    matchExpressions:&#xA;    - key: name&#xA;      operator: NotIn&#xA;      values:&#xA;      - kube-system&#xA;    - key: kubernetes.io/metadata.name&#xA;      operator: NotIn&#xA;      values:&#xA;      - kube-system&#xA;    - key: kubernetes.io/metadata.name&#xA;      operator: NotIn&#xA;      values:&#xA;      - vault-secrets-webhook&#xA;  objectSelector:&#xA;    matchExpressions:&#xA;    - key: owner&#xA;      operator: NotIn&#xA;      values:&#xA;      - helm&#xA;    - key: security.banzaicloud.io/mutate&#xA;      operator: NotIn&#xA;      values:&#xA;      - skip&#xA;  reinvocationPolicy: Never&#xA;  rules:&#xA;  - apiGroups:&#xA;    - &#39;*&#39;&#xA;    apiVersions:&#xA;    - &#39;*&#39;&#xA;    operations:&#xA;    - CREATE&#xA;    - UPDATE&#xA;    resources:&#xA;    - configmaps&#xA;    scope: &#39;*&#39;&#xA;  sideEffects: NoneOnDryRun&#xA;  timeoutSeconds: 10&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Automation &amp; Configuration</title>
      <link>https://canuxcheng.com/post/cncf_platform/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/cncf_platform/</guid>
      <description>&lt;h1 id=&#34;automation--configuration&#34;&gt;Automation &amp;amp; Configuration&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cloud Custodian&lt;/li&gt;&#xA;&lt;li&gt;kubeedge&lt;/li&gt;&#xA;&lt;li&gt;pulumi&lt;/li&gt;&#xA;&lt;li&gt;terraform&lt;/li&gt;&#xA;&lt;li&gt;opentofu&lt;/li&gt;&#xA;&lt;li&gt;kratix&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;platform orchestration.&lt;/p&gt;&#xA;&lt;h2 id=&#34;kratix&#34;&gt;kratix&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Dashboard</title>
      <link>https://canuxcheng.com/post/k8s_dashboard/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_dashboard/</guid>
      <description>&lt;h1 id=&#34;dashboard-add-ons&#34;&gt;dashboard add-ons&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;kubernetes-dashboard&lt;/li&gt;&#xA;&lt;li&gt;lens&lt;/li&gt;&#xA;&lt;li&gt;octant&lt;/li&gt;&#xA;&lt;li&gt;weave scope&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;kubernetes-dashboard&#34;&gt;kubernetes-dashboard&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/dashboard&#34;&gt;https://github.com/kubernetes/dashboard&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 部署dashboard&#xA;$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml&#xA;&#xA;// check&#xA;$ kubectl -n kubernetes-dashboard get pods --watch&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;1&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 删除已安装的dashboard&#xA;$ kubectl delete ns kubernetes-dashboard&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;dashboard-arguments&#34;&gt;dashboard arguments&lt;/h3&gt;&#xA;&lt;p&gt;使用basic auth:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;--enable-skip-login&#xA;--enable-insecure-login&#xA;--system-banner=&amp;quot;Welcome to Kubernetes&amp;quot;&#xA;--authentication-mode=&amp;quot;basic&amp;quot; // 默认是 token 登陆.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;access-control&#34;&gt;access control&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;kubeconfig&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;authorization header&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;token&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;basic&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;username/password login&lt;/p&gt;&#xA;&lt;h3 id=&#34;access-dashboard&#34;&gt;access dashboard&lt;/h3&gt;&#xA;&lt;p&gt;本机访问&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ kubectl proxy&#xA;#&amp;gt; http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;远程访问&lt;/p&gt;&#xA;&lt;p&gt;port-forward:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ kubectl port-forward -n kubernetes-dashboard service/kubernetes-dashboard 8080:443 --address 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;nodePort:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Key Management</title>
      <link>https://canuxcheng.com/post/k8s_km/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_km/</guid>
      <description>&lt;h1 id=&#34;key-management&#34;&gt;Key Management&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;spiffe&lt;/li&gt;&#xA;&lt;li&gt;spire&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Microservivce</title>
      <link>https://canuxcheng.com/post/k8s_microservice/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_microservice/</guid>
      <description>&lt;h1 id=&#34;microservivce&#34;&gt;Microservivce&lt;/h1&gt;&#xA;&lt;p&gt;微服务是一种架构。&lt;/p&gt;&#xA;&lt;p&gt;常见的架构:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Monolithic application 单体应用.&lt;/li&gt;&#xA;&lt;li&gt;SOA(service-oriented architecture) 面向服务的体系结构.&lt;/li&gt;&#xA;&lt;li&gt;MicroServices 微服务.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;微服务架构的服务治理包括:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;service registry 服务注册&lt;/li&gt;&#xA;&lt;li&gt;service discovery 服务发现&lt;/li&gt;&#xA;&lt;li&gt;observability 可观测性(metrics,logging,trace)&lt;/li&gt;&#xA;&lt;li&gt;流量管理&lt;/li&gt;&#xA;&lt;li&gt;安全&lt;/li&gt;&#xA;&lt;li&gt;控制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;微服务应用可以通过容器化(docker, k8s)部署，也可以通过serverless方式部署.&lt;/p&gt;&#xA;&lt;p&gt;不同的语言有不同的微服务框架.&#xA;java的dubbo, sprint boot.&#xA;golang的go-kit,  go-zero, kratos.&#xA;python的zappa, nameko.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;dapr&#34;&gt;Dapr&lt;/h2&gt;&#xA;&lt;p&gt;Dapr is a portable, event-driven, runtime for building distributed applications across cloud and edge.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scheduling &amp; Orchestration</title>
      <link>https://canuxcheng.com/post/cncf_orchestration/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/cncf_orchestration/</guid>
      <description>&lt;h1 id=&#34;scheduling--orchestration&#34;&gt;Scheduling &amp;amp; Orchestration&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;docker swarm.&lt;/li&gt;&#xA;&lt;li&gt;KEDA&lt;/li&gt;&#xA;&lt;li&gt;Crossplane&lt;/li&gt;&#xA;&lt;li&gt;Knative&lt;/li&gt;&#xA;&lt;li&gt;Kubeflow&lt;/li&gt;&#xA;&lt;li&gt;Volcano&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;crossplane&#34;&gt;Crossplane&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Serverless</title>
      <link>https://canuxcheng.com/post/k8s_serverless/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_serverless/</guid>
      <description>&lt;h1 id=&#34;serverless&#34;&gt;Serverless&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;knative&#34;&gt;Knative&lt;/h2&gt;&#xA;&lt;p&gt;Knative is a developer-focused serverless application layer which is a great complement to the existing Kubernetes application constructs. Knative consists of three components: an HTTP-triggered autoscaling container runtime called “Knative Serving”, a CloudEvents-over-HTTP asynchronous routing layer called “Knative Eventing”, and a developer-focused function framework which leverages the Serving and Eventing components, called &amp;ldquo;Knative Functions&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Service Mesh</title>
      <link>https://canuxcheng.com/post/k8s_servicemesh/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_servicemesh/</guid>
      <description>&lt;h1 id=&#34;service-mesh&#34;&gt;Service Mesh&lt;/h1&gt;&#xA;&lt;p&gt;servivce mesh是cncf基于sidecar推出的下一代面向云原生的微服务架构，是微服务基础设施, 用于处理微服务通信、治理、控制、可观测、安全等问题，具备业务无侵入、多语言、热升级等诸多特性.&lt;/p&gt;&#xA;&lt;p&gt;sidecar: 边车模式，就是把业务无关的功能，日志记录、监控、流量控制、服务注册、服务发现、服务限流、服务熔断、鉴权、访问控制和服务调用可视化等独立出来。&lt;/p&gt;&#xA;&lt;p&gt;特点:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;应用程序通信的中间层&lt;/li&gt;&#xA;&lt;li&gt;轻量级网络代理&lt;/li&gt;&#xA;&lt;li&gt;应用程序无感知&lt;/li&gt;&#xA;&lt;li&gt;解耦应用程序的重试、超时、监控、追踪和服务发现.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Service Mesh是建立在物理或者虚拟网络层之上的，基于策略的微服务的流量控制，与一般的网络协议不同的是它有以下几个特点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开发者驱动&lt;/li&gt;&#xA;&lt;li&gt;可配置策略&lt;/li&gt;&#xA;&lt;li&gt;服务优先的网络配置而不是协议&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;istio&#34;&gt;Istio&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;linkerd&#34;&gt;Linkerd&lt;/h2&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Service Proxy</title>
      <link>https://canuxcheng.com/post/k8s_proxy/</link>
      <pubDate>Sat, 04 Jan 2020 20:03:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_proxy/</guid>
      <description>&lt;h1 id=&#34;service-proxy&#34;&gt;Service Proxy&lt;/h1&gt;&#xA;&lt;p&gt;ingress =&amp;gt; gateway api&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;envoy&lt;/li&gt;&#xA;&lt;li&gt;contour&lt;/li&gt;&#xA;&lt;li&gt;traefik proxy&lt;/li&gt;&#xA;&lt;li&gt;haproxy&lt;/li&gt;&#xA;&lt;li&gt;metaLB&lt;/li&gt;&#xA;&lt;li&gt;nginx&lt;/li&gt;&#xA;&lt;li&gt;openelb&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;ingress-controller&#34;&gt;ingress controller&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ingress-nginx(nginx)&lt;/li&gt;&#xA;&lt;li&gt;aws-load-balancer-controller(alb)&lt;/li&gt;&#xA;&lt;li&gt;ingress-gce&lt;/li&gt;&#xA;&lt;li&gt;Traefik&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The kubernetes.io/ingress.class annotation is deprecated from kubernetes v1.22+.通过IngressClasses来选择ingress controller。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ingressClassName: nginx&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;ingress 语法&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;apiVersion: networking.k8s.io/v1&#xA;kind: Ingress&#xA;metadata:&#xA;  name: minimal-ingress&#xA;  annotations:&#xA;    nginx.ingress.kubernetes.io/rewrite-target: /&#xA;spec:&#xA;  ingressClassName: nginx-example&#xA;  defaultBackend:&#xA;    resource:&#xA;      apiGroup: k8s.example.com&#xA;      kind: StorageBucket&#xA;      name: static-assets&#xA;  rules:&#xA;  - http:&#xA;      paths:&#xA;      - path: /testpath&#xA;        pathType: Prefix&#xA;        backend:&#xA;          service:&#xA;            name: test&#xA;            port:&#xA;              number: 80&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;ImplementationSpecific：对于这种路径类型，匹配方法取决于 IngressClass。 具体实现可以将其作为单独的 pathType 处理或者与 Prefix 或 Exact 类型作相同处理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubeadm</title>
      <link>https://canuxcheng.com/post/k8s_kubeadm/</link>
      <pubDate>Mon, 30 Dec 2019 21:47:17 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_kubeadm/</guid>
      <description>&lt;h1 id=&#34;kubeadm&#34;&gt;kubeadm&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubeadm&#34;&gt;https://github.com/kubernetes/kubeadm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;kubeadm是k8s自带的部署集群的工具.&lt;/p&gt;&#xA;&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;&#xA;&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&#34;&gt;https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装runtime&#34;&gt;安装runtime&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/&#34;&gt;https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;默认的cgroup驱动时cgroupfs,如果系统是systemd，就会有两个cgroup driver，会出问题.&lt;/p&gt;&#xA;&lt;p&gt;如果修改cgroup driver需要同时修改CRI和kubelet.&lt;/p&gt;&#xA;&lt;p&gt;修改containerd的cgroup driver:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/containerd/config.toml&#xA;#disabled_plugins = [&amp;quot;cri&amp;quot;]&#xA;[plugins.&amp;quot;io.containerd.grpc.v1.cri&amp;quot;.containerd.runtimes.runc.options]&#xA;  SystemdCgroup = true&#xA;&#xA;$ sudo systemctl restart containerd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;修改kubelet的cgroup driver(kubeadm-config.yaml):&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# kubeadm-config.yaml&#xA;kind: ClusterConfiguration&#xA;apiVersion: kubeadm.k8s.io/v1beta3&#xA;kubernetesVersion: v1.21.0    // kubelet --version&#xA;---&#xA;apiVersion: kubelet.config.k8s.io/v1beta1&#xA;kind: KubeletConfiguration&#xA;cgroupDriver: systemd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;安装kubeadm-kubelet-kubectl&#34;&gt;安装kubeadm, kubelet, kubectl&lt;/h2&gt;&#xA;&lt;p&gt;在每台机器上安装 kubeadm, kubelet, kubectl:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get update&#xA;$ sudo apt-get install -y apt-transport-https ca-certificates curl&#xA;$ sudo curl -fsSL https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add - &#xA;$ echo &amp;quot;deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&amp;quot; | sudo tee /etc/apt/sources.list.d/kubernetes.list&#xA;$ sudo apt-get update&#xA;$ sudo apt-get --yes --allow-unauthenticated install kubeadm kubelet kubectl&#xA;$ sudo apt-mark hold kubelet kubeadm kubectl&#xA;$ sudo systemctl enable kubelet&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;kubeadm-cli&#34;&gt;Kubeadm CLI&lt;/h1&gt;&#xA;&lt;p&gt;init:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Minikube</title>
      <link>https://canuxcheng.com/post/k8s_minikube/</link>
      <pubDate>Mon, 30 Dec 2019 21:47:17 +0800</pubDate>
      <guid>https://canuxcheng.com/post/k8s_minikube/</guid>
      <description>&lt;h1 id=&#34;minikube&#34;&gt;minikube&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/zh/docs/setup/learning-environment/minikube/&#34;&gt;https://kubernetes.io/zh/docs/setup/learning-environment/minikube/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;minikube 能快速创建k8s的开发集群，支持在虚拟机上创建，也支持裸机创建.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 在裸机上创建：&#xA;sudo minikube start --vm-driver=none&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Image</title>
      <link>https://canuxcheng.com/post/cncf_image/</link>
      <pubDate>Tue, 03 Dec 2019 21:50:47 +0800</pubDate>
      <guid>https://canuxcheng.com/post/cncf_image/</guid>
      <description>&lt;h1 id=&#34;image&#34;&gt;image&lt;/h1&gt;&#xA;&lt;p&gt;容器镜像&lt;/p&gt;&#xA;&lt;p&gt;docker image driver: aufs, btrfs, devicemapper, overlay.&lt;/p&gt;&#xA;&lt;h2 id=&#34;multi-platform-images&#34;&gt;multi-platform images&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/build/building/multi-platform/&#34;&gt;https://docs.docker.com/build/building/multi-platform/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;qemu&#34;&gt;qemu&lt;/h3&gt;&#xA;&lt;p&gt;使用qume:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 安装bitfmt&#xA;docker run --privileged --rm tonistiigi/binfmt --install all&#xA;&#xA;// 查看支持的平台&#xA;ls -l /proc/sys/fs/binfmt_misc/qemu-*&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;multiple-native-nodes&#34;&gt;multiple native nodes&lt;/h3&gt;&#xA;&lt;p&gt;安装&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// linux&#xA;sudo apt install docker-buildx-plugin&#xA;&#xA;// mac&#xA;brew install docker-buildx&#xA;mkdir -p ~/.docker/cli-plugins&#xA;ln -sfn $(which docker-buildx) ~/.docker/cli-plugins/docker-buildx&#xA;docker buildx install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看版本&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker buildx version&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;管理builder instance&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker buildx create&#xA;--append 添加node到builder实例。&#xA;--leave 从builder实例删除node&#xA;--driver Driver to use(&amp;quot;docker&amp;quot;, &amp;quot;docker-container&amp;quot;, &amp;quot;kubernetes&amp;quot;)&#xA;--name&#xA;--use&#xA;--node&#xA;--platform &#xA;--bootstrap 启动实例（以容器的形式启动）&#xA;&#xA;// 以本地是amd64为例，创建一个实例.&#xA;docker buildx create --use --bootstrap --platform linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/arm/v7,linux/arm/v6 --name canux-builder&#xA;&#xA;// 如果没有qumu，可以把不同平台的远程机器加到builder实例.&#xA;docker buildx create \&#xA;--name local_remote_builder \&#xA;--append --node &amp;lt;my-arm-server&amp;gt; \&#xA;--platform linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6 \&#xA;ssh://user@&amp;lt;my-arm-server&amp;gt; &#xA;&#xA;docker buildx rm&#xA;&#xA;docker buildx stop&#xA;&#xA;docker buildx inspect&#xA;&#xA;docker buildx use&#xA;&#xA;// 查看当前可用的builders&#xA;docker buildx ls&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;构建多平台镜像&lt;/p&gt;</description>
    </item>
    <item>
      <title>Helm</title>
      <link>https://canuxcheng.com/post/k8s_helm/</link>
      <pubDate>Thu, 05 Sep 2019 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/k8s_helm/</guid>
      <description>&lt;h1 id=&#34;helm&#34;&gt;Helm&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/helm/helm&#34;&gt;https://github.com/helm/helm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;helm2有两个组件:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;helm: 客户端&lt;/li&gt;&#xA;&lt;li&gt;tiller: 服务端(helm3被移除)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;概念:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;chart: helm包，包含运行一个应用所需的镜像，依赖和资源.&lt;/li&gt;&#xA;&lt;li&gt;repository: 用于发布和存储chart的仓库.&lt;/li&gt;&#xA;&lt;li&gt;release: 在k8s集群上运行的一个chart实例.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;repository有哪些:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;charts: OSS, public, 已经被artifacthub取代, &lt;a href=&#34;https://github.com/helm/charts&#34;&gt;https://github.com/helm/charts&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;artifacthub: OSS, public,  &lt;a href=&#34;https://artifacthub.io/&#34;&gt;https://artifacthub.io/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;chartmuseum: OSS, private, self-host, &lt;a href=&#34;https://github.com/helm/chartmuseum&#34;&gt;https://github.com/helm/chartmuseum&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;harbor: OSS, private, self-host.&lt;/li&gt;&#xA;&lt;li&gt;artifactory(jfrog): enterprise, private, self-host.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;&#xA;&lt;p&gt;helm和kubectl一样，访问指定配置的k8s集群。&lt;/p&gt;&#xA;&lt;p&gt;helm2需要安装tiller并且执行helm init初始化,helm不需要tiller.&lt;/p&gt;&#xA;&lt;p&gt;本地二进制安装helm3+:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -&#xA;sudo apt-get install apt-transport-https --yes&#xA;echo &amp;quot;deb https://baltocdn.com/helm/stable/debian/ all main&amp;quot; | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list&#xA;sudo apt-get update&#xA;sudo apt-get install helm&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;命令&#34;&gt;命令&lt;/h2&gt;&#xA;&lt;h3 id=&#34;repo管理&#34;&gt;repo管理&lt;/h3&gt;&#xA;&lt;p&gt;查看有哪些repo,默认没有repo&lt;/p&gt;</description>
    </item>
    <item>
      <title>K8S CRI</title>
      <link>https://canuxcheng.com/post/k8s_cri/</link>
      <pubDate>Wed, 05 Jun 2019 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/k8s_cri/</guid>
      <description>&lt;h1 id=&#34;cri&#34;&gt;CRI&lt;/h1&gt;&#xA;&lt;p&gt;CRI: Container Runtime Intarface&lt;/p&gt;&#xA;&lt;p&gt;定义了k8s和container runtime进行交互的接口.&lt;/p&gt;&#xA;&lt;p&gt;是k8s与container交互的标准.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/&#34;&gt;https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;containerd&lt;/li&gt;&#xA;&lt;li&gt;cri-o&lt;/li&gt;&#xA;&lt;li&gt;rkt&lt;/li&gt;&#xA;&lt;li&gt;kata&lt;/li&gt;&#xA;&lt;li&gt;rancher&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;docker&#34;&gt;docker&lt;/h2&gt;&#xA;&lt;p&gt;k8s_1.20 开始警告不再支持docker.&lt;/p&gt;&#xA;&lt;p&gt;k8s_1.23 开始移除dockershim.&lt;/p&gt;&#xA;&lt;p&gt;/var/run/dockerhsim.sock&lt;/p&gt;&#xA;&lt;h2 id=&#34;containerd&#34;&gt;containerd&lt;/h2&gt;&#xA;&lt;p&gt;/run/container/containerd.sock&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/containerd/containerd&#34;&gt;https://github.com/containerd/containerd&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装配置:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd&#34;&gt;https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;cri-o&#34;&gt;CRI-O&lt;/h2&gt;&#xA;&lt;p&gt;redhat.&lt;/p&gt;&#xA;&lt;p&gt;/var/run/crio/crio.sock&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cri-o/cri-o&#34;&gt;https://github.com/cri-o/cri-o&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;kata&#34;&gt;kata&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kata-containers/runtime&#34;&gt;https://github.com/kata-containers/runtime&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;rkt&#34;&gt;rkt&lt;/h2&gt;&#xA;&lt;p&gt;redhat(coreos)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rkt/rkt&#34;&gt;https://github.com/rkt/rkt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Virtualbox</title>
      <link>https://canuxcheng.com/post/virtualbox/</link>
      <pubDate>Mon, 03 Jun 2019 22:53:23 +0800</pubDate>
      <guid>https://canuxcheng.com/post/virtualbox/</guid>
      <description>&lt;h1 id=&#34;virtualbox&#34;&gt;Virtualbox&lt;/h1&gt;&#xA;&lt;p&gt;虚拟化工具virtualbox.&lt;/p&gt;&#xA;&lt;h1 id=&#34;vboxmanage&#34;&gt;vboxmanage&lt;/h1&gt;&#xA;&lt;p&gt;vm&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 导入ova&#xA;$ vboxmanage import win7.ova &#xA;&#xA;// 添加host网络&#xA;$ vboxmanage modifyvm &amp;quot;win764&amp;quot; --nic1 hostonly --hostonlyadapter1 vboxnet0&#xA;// 添加bridge网络&#xA;$ vboxmanage modifyvm &amp;quot;Win732&amp;quot; --nic2 bridged --bridgeadapter2 docker_gwbridge&#xA;// 重命名vm&#xA;$ vboxmanage modifyvm &amp;lt;vm&amp;gt; --name &amp;lt;new-name&amp;gt; &#xA;// 修改参数&#xA;$ vboxmanage modifyvm &amp;lt;vm&amp;gt; --memory 4096 --cpus 4 --hwvirtex on --ioapic on&#xA;&#xA;// 启动虚拟机&#xA;$ vboxmanage startvm &amp;quot;Win732&amp;quot;&#xA;$ vboxmanage startvm &amp;lt;vm&amp;gt; --type headless &#xA;$ VBoxHeadless --startvm &amp;lt;uuid|name&amp;gt; --vrde on&#xA;&#xA;// 控制虚拟机&#xA;$ vboxmanage controlvm &amp;lt;vm&amp;gt; pause/resume/reset/poweroff/savestate&#xA;&#xA;// 查看所有/运行虚拟机&#xA;$ vboxmanage list vms/runningvms &#xA;&#xA;// 删除vm&#xA;$ vboxmanage unregistervm &amp;lt;vm&amp;gt; --delete&#xA;&#xA;// linux上执行命令&#xA;$ vboxmanage guestcontrol {} --username {} --password {} run --exe /bin/bash -- -l -c &#39;pwd&#39;&#xA;&#xA;// windows上执行命令&#xA;$ vboxmanage guestcontrol {} --username &#39;Administrator&#39; run --exe &#39;C:\\Program Files\\Oracle\\VirtualBox Guest Additions\\uninst.exe&#39; -- uninst.exe /S&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;media&lt;/p&gt;</description>
    </item>
    <item>
      <title>Package</title>
      <link>https://canuxcheng.com/post/go_package/</link>
      <pubDate>Tue, 23 Apr 2019 21:42:07 +0800</pubDate>
      <guid>https://canuxcheng.com/post/go_package/</guid>
      <description></description>
    </item>
    <item>
      <title>Command</title>
      <link>https://canuxcheng.com/post/network_command/</link>
      <pubDate>Sun, 31 Mar 2019 21:51:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/network_command/</guid>
      <description>&lt;h1 id=&#34;network-command&#34;&gt;network command&lt;/h1&gt;&#xA;&lt;p&gt;network related command&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;net-tools&#34;&gt;net-tools&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ecki/net-tools&#34;&gt;https://github.com/ecki/net-tools&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install net-tools&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;ifconfig&#34;&gt;ifconfig&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;ifconfig # 查看up的interface&#xA;ifconfig -a  # 查看所有的interface&#xA;ifconfig &amp;lt;bridge&amp;gt;/&amp;lt;interface&amp;gt; up/down&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;netstat&#34;&gt;netstat&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;netstat&#xA;-a, --all, --listening # 显示所有socket, 默认只显示connected&#xA;-l, --listening  # 显示listening&#xA;-n, --numeric&#xA;-p, --programs # 显示pid或程序名称&#xA;# socket选项:&#xA;-t, --tcp&#xA;-u, --udp&#xA;-w, --raw&#xA;-x, --unix&#xA;--ax25&#xA;--ipx&#xA;--netrom&#xA;&#xA;# 常用&#xA;netstat -anp    # 查看哪些端口是打开的．&#xA;sudo netstat -anp | grep port # 查看端口是否被使用&#xA;sudo netstat -tulnp # 查看tcp&amp;amp;udp端口是否被监听&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;arp&#34;&gt;arp&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;arp # 用于确定IP地址的网卡物理地址&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;rarp&#34;&gt;rarp&lt;/h3&gt;&#xA;&lt;h3 id=&#34;hostname&#34;&gt;hostname&lt;/h3&gt;&#xA;&lt;h3 id=&#34;domainname&#34;&gt;domainname&lt;/h3&gt;&#xA;&lt;h3 id=&#34;dnsdomainname&#34;&gt;dnsdomainname&lt;/h3&gt;&#xA;&lt;h3 id=&#34;route&#34;&gt;route&lt;/h3&gt;&#xA;&lt;p&gt;Flags:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Command</title>
      <link>https://canuxcheng.com/post/storage_command/</link>
      <pubDate>Sun, 31 Mar 2019 21:51:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/storage_command/</guid>
      <description>&lt;h1 id=&#34;sysstat&#34;&gt;sysstat:&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# &amp;lt;https://github.com/sysstat/sysstat&amp;gt;&#xA;$ sudo apt-get install sysstat&#xA;# 包括 iostat/mpstat/pidstat/tapestat/cifsiostat&#xA;&#xA;iostat -d -x -k 1 10&#xA;&#xA;pidstat -d -p pid&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;iotop&#34;&gt;iotop&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 查看进程的diskio&#xA;$ sudo apt-get install iotop&#xA;$ sudo iotop&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;df&#34;&gt;df&lt;/h1&gt;&#xA;&lt;p&gt;df计算文件系统磁盘空间使用:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;df&#xA;$ df -h&#xA;&#xA;# 查看目录信息(读写哪个设备)&#xA;$ df /path/folder&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;dd&#34;&gt;dd&lt;/h1&gt;&#xA;&lt;p&gt;dd转化并拷贝文件:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;dd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;fsck&#34;&gt;fsck&lt;/h1&gt;&#xA;&lt;p&gt;fsck检查并修复文件系统:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;fsck&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;fdisk&#34;&gt;fdisk&lt;/h1&gt;&#xA;&lt;p&gt;支持msdos，支持2T以下的磁盘.&lt;/p&gt;&#xA;&lt;p&gt;fdisk管理磁盘分区表:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;fdisk&#xA;fdisk -l&#xA;&#xA;fdisk /dev/sda # 可以创建新的磁盘分区&#xA;&amp;gt; n ...    创建新的分区&#xA;&amp;gt; t (8e表示linux LVM), 修改分区类型&#xA;&amp;gt; w 保存修改&#xA;partprobe /dev/sda # 在不重启的情况下保存分区&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;parted&#34;&gt;parted&lt;/h1&gt;&#xA;&lt;p&gt;支持gpt分区表，支持2T以上的大磁盘.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Init</title>
      <link>https://canuxcheng.com/post/linux_init/</link>
      <pubDate>Sun, 03 Feb 2019 14:04:05 +0000</pubDate>
      <guid>https://canuxcheng.com/post/linux_init/</guid>
      <description>&lt;h1 id=&#34;linux-init&#34;&gt;Linux Init&lt;/h1&gt;&#xA;&lt;p&gt;linux系统启动的第一个进程,pid=1的进程.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ ls -l /sbin/init&#xA;$ sudo readlink /sbin/init&#xA;/sbin/init -&amp;gt; upstart&#xA;/sbin/init -&amp;gt; /lib/systemd/systemd&#xA;&#xA;/etc/init.d&#xA;The directory containing System V init scripts.&#xA;通过service命令操作&#xA;&#xA;/etc/init&#xA;The directory containing upstart jobs.&#xA;通过initctl命令操作&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;systemd&#34;&gt;systemd&lt;/h1&gt;&#xA;&lt;p&gt;sytemd是upstart的替代版本．通过查看/sbin/init指向systemd还是upstart.&lt;/p&gt;&#xA;&lt;p&gt;service文件位置:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/etc/systemd/system/***.service&#xA;/lib/systemd/system/*.service&#xA;/usr/lib/systemd/system/*.service&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;service文件编写:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.freedesktop.org/software/systemd/man/systemd.unit.html#&#34;&gt;https://www.freedesktop.org/software/systemd/man/systemd.unit.html#&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;[Unit]&#xA;Description=details&#xA;After=containerd.service # 之前启动&#xA;Before= # 之后运行&#xA;Bindsto= #&#xA;Wants=containerd.service # 弱依赖&#xA;Requires= # 强依赖&#xA;StartLimitInterval=10s&#xA;StartLimitBurst=5&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.freedesktop.org/software/systemd/man/systemd.service.html#&#34;&gt;https://www.freedesktop.org/software/systemd/man/systemd.service.html#&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;[Service]&#xA;Type=simple/notify/dbus/forking/idle/oneshot&#xA;ExecStartPre=&#xA;ExecStart=&#xA;ExecStartPost=&#xA;ExecStop=&#xA;ExecStopPost=&#xA;ExecReload=&#xA;KillMode=node/mixed/process/control-group&#xA;Restart=no/on-success/on-failure/on-abnormal/on-abort/on-watchdog/always # always总是开机启动，即使systemctl enable.&#xA;RestartSec=3s # 重启之前等待的时间.&#xA;TimeoutSec=  # TimeoutStartSec+TimeoutStopSec&#xA;LimitNOFILE=49152 # 限制单个service的fd&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;systemctl命令:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nginx</title>
      <link>https://canuxcheng.com/post/nginx/</link>
      <pubDate>Thu, 27 Sep 2018 03:25:26 +0000</pubDate>
      <guid>https://canuxcheng.com/post/nginx/</guid>
      <description>&lt;h1 id=&#34;nginx&#34;&gt;Nginx&lt;/h1&gt;&#xA;&lt;p&gt;安装&lt;/p&gt;&#xA;&lt;p&gt;配置&lt;/p&gt;&#xA;&lt;p&gt;命令：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;nginx -s stop/quit/reload/reopen&#xA;nginx -V 详细信息&#xA;nginx -v 版本号&#xA;nginx -t 检查配置文件&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>AST</title>
      <link>https://canuxcheng.com/post/sec_ast/</link>
      <pubDate>Sat, 28 Jul 2018 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_ast/</guid>
      <description>&lt;h1 id=&#34;ast&#34;&gt;AST&lt;/h1&gt;&#xA;&lt;p&gt;AST: Application Security Testing, 静态应用程序安全测试, 对应用程序源代码执行直接的白盒分析.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;sast&#34;&gt;SAST&lt;/h2&gt;&#xA;&lt;p&gt;SAST: Static Application Security Testing&lt;/p&gt;&#xA;&lt;p&gt;Tools: SonarQube, Trivy, Coverity.&lt;/p&gt;&#xA;&lt;p&gt;gitlab SAST report.&#xA;gitlab secret detection report.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aquasecurity/trivy&#34;&gt;https://github.com/aquasecurity/trivy&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://scan.coverity.com/&#34;&gt;https://scan.coverity.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;dast&#34;&gt;DAST&lt;/h2&gt;&#xA;&lt;p&gt;DAST: Dynamic Application Security Testing，动态应用程序安全测试, 对应用程序进行黑盒分析.&lt;/p&gt;&#xA;&lt;p&gt;Tools:&lt;/p&gt;&#xA;&lt;p&gt;ZAP Scan(OWASP ZAP)&lt;/p&gt;&#xA;&lt;p&gt;synopsys WhiteHat Sentinel.&lt;/p&gt;&#xA;&lt;p&gt;gitlab DAST report.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;iast&#34;&gt;IAST&lt;/h2&gt;&#xA;&lt;p&gt;IAST: Interactive Application Security Testing，交互式应用程序安全测试, 结合了SAST和DAST的优点.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;sca&#34;&gt;SCA&lt;/h2&gt;&#xA;&lt;p&gt;SCA: Software Composition Analysis.&lt;/p&gt;&#xA;&lt;p&gt;SBOM (software Bill of Materials),开源组件安全扫描&lt;/p&gt;&#xA;&lt;p&gt;Tools： BlackDuck, Jfrog Xray.&lt;/p&gt;&#xA;&lt;p&gt;gitlab dependency scanning report.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CA</title>
      <link>https://canuxcheng.com/post/sec_ca/</link>
      <pubDate>Sat, 28 Jul 2018 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_ca/</guid>
      <description>&lt;h1 id=&#34;ca&#34;&gt;CA&lt;/h1&gt;&#xA;&lt;p&gt;SSL: secure sockets layer&lt;/p&gt;&#xA;&lt;p&gt;TLS: transport layer security&lt;/p&gt;&#xA;&lt;p&gt;CA: Certificate Authority.&lt;/p&gt;&#xA;&lt;p&gt;SNI: server name indication&lt;/p&gt;&#xA;&lt;p&gt;证书类型&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;x509: 只有公钥没有私钥匙&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;编码方式&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pem: base64编码&lt;/li&gt;&#xA;&lt;li&gt;der: 二进制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;证书文件:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;crt: 证书文件（可以是pem或der编码）&lt;/li&gt;&#xA;&lt;li&gt;cer: 证书文件（可以是pem或der编码）&lt;/li&gt;&#xA;&lt;li&gt;csr: 申请签名的文件&lt;/li&gt;&#xA;&lt;li&gt;key: 私钥文件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;创建自签名证书&#34;&gt;创建自签名证书&lt;/h1&gt;&#xA;&lt;p&gt;创建x509证书:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ openssl genrsa -out server.key 2048   // 创建key&#xA;$ openssl req -new -key server.key -sha256 -out server.csr // 创建csr&#xA;$ openssl x509 -req -days 365 -in server.csr -signkey server.key -sha256 -out server.crt // 创建证书&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看证书信息:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Capture</title>
      <link>https://canuxcheng.com/post/sec_capture/</link>
      <pubDate>Sat, 28 Jul 2018 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_capture/</guid>
      <description>&lt;h1 id=&#34;packet-capture&#34;&gt;Packet Capture&lt;/h1&gt;&#xA;&lt;p&gt;网络抓包&lt;/p&gt;&#xA;&lt;h1 id=&#34;fiddler&#34;&gt;Fiddler&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.telerik.com/fiddler&#34;&gt;http://www.telerik.com/fiddler&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;wireshark&#34;&gt;Wireshark&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;https://www.wireshark.org/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Csrf</title>
      <link>https://canuxcheng.com/post/sec_csrf/</link>
      <pubDate>Sat, 28 Jul 2018 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_csrf/</guid>
      <description>&lt;h1 id=&#34;csrf&#34;&gt;CSRF&lt;/h1&gt;&#xA;&lt;p&gt;Cross-site request forgery, 跨站请求伪造．&lt;/p&gt;&#xA;&lt;p&gt;发生条件：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;登陆受信任网站A, 并在本地生成cookie&lt;/li&gt;&#xA;&lt;li&gt;在不退出A的情况下，访问危险网站B&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;预防方法:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正确使用get,post和cookie&lt;/li&gt;&#xA;&lt;li&gt;在非get请求中增加伪随机数&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>HA</title>
      <link>https://canuxcheng.com/post/ha/</link>
      <pubDate>Sat, 28 Jul 2018 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/ha/</guid>
      <description>&lt;h1 id=&#34;haproxy&#34;&gt;HAProxy&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.haproxy.com/&#34;&gt;https://www.haproxy.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install haproxy&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;配置:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/haproxy/haproxy.cfg&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;global:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;    log /dev/log    local0&#xA;    log /dev/log    local1 notice&#xA;    chroot /var/lib/haproxy&#xA;    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners&#xA;    stats timeout 30s&#xA;    user haproxy&#xA;    group haproxy&#xA;    daemon&#xA;&#xA;    # Default SSL material locations&#xA;    ca-base /etc/ssl/certs&#xA;    crt-base /etc/ssl/private&#xA;&#xA;    # Default ciphers to use on SSL-enabled listening sockets.&#xA;    # For more information, see ciphers(1SSL). This list is from:&#xA;    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/&#xA;    # An alternative list with additional directives can be obtained from&#xA;    #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy&#xA;    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS&#xA;    ssl-default-bind-options no-sslv3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;defaults:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sql Injection</title>
      <link>https://canuxcheng.com/post/sec_sqlinjection/</link>
      <pubDate>Sat, 28 Jul 2018 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_sqlinjection/</guid>
      <description>&lt;h1 id=&#34;sql-injection&#34;&gt;SQL Injection&lt;/h1&gt;&#xA;&lt;p&gt;什么是sql injection:从数据库获取敏感信息,或者利用数据库的特性执行添加用户,导出文件等一系列恶意操作,甚至有可能获取数据库乃至系统用户最高权限。&lt;/p&gt;&#xA;&lt;p&gt;原因:造成SQL注入的原因是因为程序没有有效过滤用户的输入.&lt;/p&gt;&#xA;&lt;p&gt;预防：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;严格限制数据库的操作权限&lt;/li&gt;&#xA;&lt;li&gt;检查输入的数据格式是否符合要求&lt;/li&gt;&#xA;&lt;li&gt;对进入数据库的特殊字符进行转义&lt;/li&gt;&#xA;&lt;li&gt;数据库查询语句使用数据库提供的参数化查询接口&lt;/li&gt;&#xA;&lt;li&gt;在发布之前使用专业的sql注入检测工具进行检测&lt;/li&gt;&#xA;&lt;li&gt;避免网站打印sql错误信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;通过表单注入：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;username =&amp;gt; myuser&#39; or &#39;foo&#39; = &#39;foo&#39; --&#xA;SELECT * FROM user WHERE username=&#39;myuser&#39; or &#39;foo&#39; = &#39;foo&#39; --&#39;&#39; AND password=&#39;xxx&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;mssql的sql语句可以执行dos命令:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;exec xp_cmdshell &#39;net user username 2546 /add&#39; # 新建系统用户&#xA;exec xp_cmdshell &#39;net localgroup administrator username /add&#39; # 授权&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Xss</title>
      <link>https://canuxcheng.com/post/sec_xss/</link>
      <pubDate>Sat, 28 Jul 2018 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_xss/</guid>
      <description>&lt;h1 id=&#34;xss&#34;&gt;XSS&lt;/h1&gt;&#xA;&lt;p&gt;XSS: Cross Site Scripting, 跨站脚本攻击&lt;/p&gt;&#xA;&lt;p&gt;XSS攻击涉及到攻击者，客户端，和web应用三者.&lt;/p&gt;&#xA;&lt;p&gt;XSS原理:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Web应用未对用户提交请求的数据做充分的检查过滤,允许用户在提交的数据中掺入HTML代码(最主要的是“&amp;gt;”、“&amp;lt;”),并将未经转义的恶意代码输出到第三方用户的浏览器解释执行,是导致XSS漏洞的产生原因。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;XSS目前主要手段和目的:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;盗用cookie,获取敏感信息&lt;/li&gt;&#xA;&lt;li&gt;利用植入flash，通过crossdomain权限设置获取更高权限．&lt;/li&gt;&#xA;&lt;li&gt;利用iframe, frame, XMLHttpRequests等方式以用户身份执行一些管理操作．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;XSS预防:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;过滤特殊字符&lt;/li&gt;&#xA;&lt;li&gt;使用http头指定类型&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Cfssl</title>
      <link>https://canuxcheng.com/post/sec_cfssl/</link>
      <pubDate>Sat, 28 Jul 2018 16:08:54 +0800</pubDate>
      <guid>https://canuxcheng.com/post/sec_cfssl/</guid>
      <description>&lt;h1 id=&#34;cfssl&#34;&gt;cfssl&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cloudflare/cfssl&#34;&gt;https://github.com/cloudflare/cfssl&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gin</title>
      <link>https://canuxcheng.com/post/gin/</link>
      <pubDate>Fri, 20 Jul 2018 23:14:07 +0800</pubDate>
      <guid>https://canuxcheng.com/post/gin/</guid>
      <description>&lt;h1 id=&#34;gin&#34;&gt;Gin&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;https://github.com/gin-gonic/gin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;install&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ go get -u github.com/gin-gonic/gin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;import&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/gin-gonic/gin&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Restful</title>
      <link>https://canuxcheng.com/post/rest/</link>
      <pubDate>Sat, 07 Jul 2018 16:43:15 +0000</pubDate>
      <guid>https://canuxcheng.com/post/rest/</guid>
      <description>&lt;h1 id=&#34;rest&#34;&gt;REST&lt;/h1&gt;&#xA;&lt;p&gt;REST: REpresentational State Transfer．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;restclient&#34;&gt;restclient&lt;/h1&gt;&#xA;&lt;p&gt;一个是firefox的插件．&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chao/RESTClient&#34;&gt;https://github.com/chao/RESTClient&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;另一个是java开发的application.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wiztools/rest-client&#34;&gt;https://github.com/wiztools/rest-client&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;postman&#34;&gt;postman&lt;/h1&gt;&#xA;&lt;p&gt;postman是一个application,同时也可以从chrome启动.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/postmanlabs&#34;&gt;https://github.com/postmanlabs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;soupui&#34;&gt;soupui&lt;/h1&gt;&#xA;&lt;p&gt;一个用于SOAP和REST的application.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SmartBear/soapui&#34;&gt;https://github.com/SmartBear/soapui&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Webhook</title>
      <link>https://canuxcheng.com/post/webhook/</link>
      <pubDate>Sat, 07 Jul 2018 16:43:15 +0000</pubDate>
      <guid>https://canuxcheng.com/post/webhook/</guid>
      <description>&lt;h1 id=&#34;webhook&#34;&gt;WebHook&lt;/h1&gt;&#xA;&lt;p&gt;用于server和server之间通讯．&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebService</title>
      <link>https://canuxcheng.com/post/webservice/</link>
      <pubDate>Sat, 07 Jul 2018 16:43:15 +0000</pubDate>
      <guid>https://canuxcheng.com/post/webservice/</guid>
      <description>&lt;h1 id=&#34;webservice&#34;&gt;webservice&lt;/h1&gt;&#xA;&lt;p&gt;webservice用于server和browser之间通讯．&lt;/p&gt;&#xA;&lt;p&gt;webservice是基于http的，无状态的．&lt;/p&gt;&#xA;&lt;p&gt;webservice一般分为soap webservice和http webservice.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;soap&#34;&gt;SOAP&lt;/h1&gt;&#xA;&lt;p&gt;Simple Object Access Protocol, 简单对象访问协议，是一个基于XML的协议．&lt;/p&gt;&#xA;&lt;p&gt;简单来说SOAP的思想就是通过http + XML来在server和browser之间交换信息．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;soupui&#34;&gt;soupui&lt;/h1&gt;&#xA;&lt;p&gt;一个用于SOAP和REST的application.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SmartBear/soapui&#34;&gt;https://github.com/SmartBear/soapui&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ELK</title>
      <link>https://canuxcheng.com/post/logging_elk/</link>
      <pubDate>Fri, 08 Jun 2018 09:46:47 +0000</pubDate>
      <guid>https://canuxcheng.com/post/logging_elk/</guid>
      <description>&lt;h1 id=&#34;elk&#34;&gt;ELK&lt;/h1&gt;&#xA;&lt;p&gt;kibana: 数据可视化&lt;/p&gt;&#xA;&lt;p&gt;elasticsearch: 搜索，分析，存储数据&lt;/p&gt;&#xA;&lt;p&gt;x-pack: 具有监控和报警功能的工具包.&lt;/p&gt;&#xA;&lt;p&gt;logstash: 动态数据收集管道，支持可扩展的插件．&lt;/p&gt;&#xA;&lt;p&gt;beats(agent): 轻量型数据采集平台，从边缘机器向logstash/elasticsearch发送数据．&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Grok</title>
      <link>https://canuxcheng.com/post/logging_grok/</link>
      <pubDate>Fri, 08 Jun 2018 09:46:47 +0000</pubDate>
      <guid>https://canuxcheng.com/post/logging_grok/</guid>
      <description>&lt;h1 id=&#34;grok&#34;&gt;grok&lt;/h1&gt;&#xA;&lt;p&gt;logstash和telegraf都是用grok来解析log&lt;/p&gt;&#xA;&lt;p&gt;在线检测&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://grokdebug.herokuapp.com/&#34;&gt;http://grokdebug.herokuapp.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;grok的正则表达式&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kkos/oniguruma/blob/master/doc/RE&#34;&gt;https://github.com/kkos/oniguruma/blob/master/doc/RE&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;可用的pattern(logstash &amp;amp; telegraf-logparser/tail)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns&#34;&gt;https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/influxdata/telegraf/blob/master/plugins/inputs/logparser/grok/patterns/influx-patterns&#34;&gt;https://github.com/influxdata/telegraf/blob/master/plugins/inputs/logparser/grok/patterns/influx-patterns&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;elastic-stack&#34;&gt;Elastic stack&lt;/h1&gt;&#xA;&lt;p&gt;beats/filebeats: 通过filebeats agent获取log．&lt;/p&gt;&#xA;&lt;p&gt;logstash: 使用filebeats解析log并写入stash(elasticsearch).&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tick-stack&#34;&gt;TICK stack&lt;/h1&gt;&#xA;&lt;p&gt;telegraf(agent): 通过logparser/tail插件解析log并写入influxdb.&lt;/p&gt;&#xA;&lt;p&gt;pattern:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 通过已经定义的变量来定义filter&#xA;patterns = [&#39;&#39;&#39;${&amp;lt;capture_syntax&amp;gt;[:&amp;lt;semantic_name&amp;gt;][:&amp;lt;modifier&amp;gt;]}&#39;&#39;&#39;]&#xA;patterns = [&#39;&#39;&#39;%{TIMESTAMP_ISO8601:asctime:string} \[%{DATA:name:string}\] %{LOGLEVEL:levelname:string}: %{GREEDYDATA:message:string}&#39;&#39;&#39;]&#xA;&#xA;capture_syntax是已经定义好的pattern.&#xA;semantic_name是field/tag的名字, 默认都是string类型的field&#xA;modifier 是string/int/float/tag/drop/ts-&amp;quot;CUSTOM&amp;quot;/...类型&#xA;&#xA;timestamp有特殊的modifier:&#xA;timestamp 有特殊的modifier：&#xA;Timestamp modifiers:ts (This will auto-learn the timestamp format)&#xA;ts-ansic (&amp;quot;Mon Jan _2 15:04:05 2006&amp;quot;)&#xA;ts-unix (&amp;quot;Mon Jan _2 15:04:05 MST 2006&amp;quot;)&#xA;ts-ruby (&amp;quot;Mon Jan 02 15:04:05 -0700 2006&amp;quot;)&#xA;ts-rfc822 (&amp;quot;02 Jan 06 15:04 MST&amp;quot;)&#xA;ts-rfc822z (&amp;quot;02 Jan 06 15:04 -0700&amp;quot;)&#xA;ts-rfc850 (&amp;quot;Monday, 02-Jan-06 15:04:05 MST&amp;quot;)&#xA;ts-rfc1123 (&amp;quot;Mon, 02 Jan 2006 15:04:05 MST&amp;quot;)&#xA;ts-rfc1123z (&amp;quot;Mon, 02 Jan 2006 15:04:05 -0700&amp;quot;)&#xA;ts-rfc3339 (&amp;quot;2006-01-02T15:04:05Z07:00&amp;quot;)&#xA;ts-rfc3339nano (&amp;quot;2006-01-02T15:04:05.999999999Z07:00&amp;quot;)&#xA;ts-httpd (&amp;quot;02/Jan/2006:15:04:05 -0700&amp;quot;)&#xA;ts-epoch (seconds since unix epoch, may contain decimal)&#xA;ts-epochnano (nanoseconds since unix epoch)&#xA;ts-syslog (&amp;quot;Jan 02 15:04:05&amp;quot;, parsed time is set to the current year)&#xA;ts-&amp;quot;CUSTOM&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;custom_patterns:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Logging</title>
      <link>https://canuxcheng.com/post/logging/</link>
      <pubDate>Fri, 08 Jun 2018 09:46:47 +0000</pubDate>
      <guid>https://canuxcheng.com/post/logging/</guid>
      <description>&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;&#xA;&lt;p&gt;日志采集，存储，可视化.&lt;/p&gt;&#xA;&lt;p&gt;主要有Elastic stack, splunk, loki.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Loki</title>
      <link>https://canuxcheng.com/post/logging_loki/</link>
      <pubDate>Fri, 08 Jun 2018 09:46:47 +0000</pubDate>
      <guid>https://canuxcheng.com/post/logging_loki/</guid>
      <description>&lt;h1 id=&#34;elk&#34;&gt;ELK&lt;/h1&gt;&#xA;&lt;p&gt;kibana: 数据可视化&lt;/p&gt;&#xA;&lt;p&gt;elasticsearch: 搜索，分析，存储数据&lt;/p&gt;&#xA;&lt;p&gt;x-pack: 具有监控和报警功能的工具包.&lt;/p&gt;&#xA;&lt;p&gt;logstash: 动态数据收集管道，支持可扩展的插件．&lt;/p&gt;&#xA;&lt;p&gt;beats(agent): 轻量型数据采集平台，从边缘机器向logstash/elasticsearch发送数据．&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Dns</title>
      <link>https://canuxcheng.com/post/dns/</link>
      <pubDate>Thu, 03 May 2018 14:46:19 +0000</pubDate>
      <guid>https://canuxcheng.com/post/dns/</guid>
      <description>&lt;h1 id=&#34;dns&#34;&gt;DNS&lt;/h1&gt;&#xA;&lt;p&gt;Domain Name System: 域名系统&lt;/p&gt;</description>
    </item>
    <item>
      <title>Container</title>
      <link>https://canuxcheng.com/post/cncf_container/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/cncf_container/</guid>
      <description>&lt;h1 id=&#34;container&#34;&gt;Container&lt;/h1&gt;&#xA;&lt;p&gt;OCI: Open Container Initiative.&lt;/p&gt;&#xA;&lt;p&gt;CRI: Container Runtime Interface.&lt;/p&gt;&#xA;&lt;p&gt;CNI: Container Network Interface.&lt;/p&gt;&#xA;&lt;p&gt;CSI: Container Storage Interface.&lt;/p&gt;&#xA;&lt;h1 id=&#34;oci&#34;&gt;OCI&lt;/h1&gt;&#xA;&lt;p&gt;Open Container Initiative，也就是常说的OCI，是由多家公司共同成立的项目，并由linux基金会进行管理，致力于container runtime的标准的制定和runc的开发等工作.&lt;/p&gt;&#xA;&lt;p&gt;是container的标准.&lt;/p&gt;&#xA;&lt;p&gt;目前主要有两个标准文档：容器运行时标准 （runtime spec）和 容器镜像标准（image spec）&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.opencontainers.org/&#34;&gt;https://www.opencontainers.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;runc&#34;&gt;runc&lt;/h2&gt;&#xA;&lt;p&gt;docker(libcontainer)&lt;/p&gt;&#xA;&lt;p&gt;runc支持OCI.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;https://github.com/opencontainers/runc&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;rkt&#34;&gt;rkt&lt;/h2&gt;&#xA;&lt;p&gt;redhat(coreos)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rkt/rkt&#34;&gt;https://github.com/rkt/rkt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tools&#34;&gt;tools&lt;/h1&gt;&#xA;&lt;h2 id=&#34;dumb-init&#34;&gt;dumb-init&lt;/h2&gt;&#xA;&lt;p&gt;管理pid=1的进程的子进程:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Yelp/dumb-init&#34;&gt;https://github.com/Yelp/dumb-init&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;baseimage-docker&#34;&gt;baseimage-docker&lt;/h2&gt;&#xA;&lt;p&gt;处理container中运行多个进程的问题:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/phusion/baseimage-docker&#34;&gt;https://github.com/phusion/baseimage-docker&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;watchtower&#34;&gt;watchtower&lt;/h2&gt;&#xA;&lt;p&gt;根据registry中的更新自动更新 container:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/containrrr/watchtower/&#34;&gt;https://github.com/containrrr/watchtower/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;hadolint&#34;&gt;hadolint&lt;/h2&gt;&#xA;&lt;p&gt;dockerfile 语法检查:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint&#34;&gt;https://github.com/hadolint/hadolint&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;gosu&#34;&gt;gosu&lt;/h2&gt;&#xA;&lt;p&gt;权限管理&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tianon/gosu&#34;&gt;https://github.com/tianon/gosu&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;swarm-cronjob&#34;&gt;swarm-cronjob&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/crazy-max/swarm-cronjob&#34;&gt;https://github.com/crazy-max/swarm-cronjob&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;misc&#34;&gt;misc&lt;/h1&gt;&#xA;&lt;p&gt;get host ip(docker/docker_gwbridge) from container:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ip route | awk &#39;/default/ { print $3 }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://canuxcheng.com/post/cncf_docker/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/cncf_docker/</guid>
      <description>&lt;h1 id=&#34;docker&#34;&gt;Docker&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://store.docker.com/&#34;&gt;https://store.docker.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/&#34;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker&#34;&gt;https://github.com/docker&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/moby/moby&#34;&gt;https://github.com/moby/moby&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Docker是一个容器引擎, 分为社区版CE, 和企业版EE, Docker不是虚拟机, 也不依赖虚拟化技术．&lt;/p&gt;&#xA;&lt;p&gt;docker-cli -&amp;gt; dockerd -&amp;gt; containerd -&amp;gt; shim -&amp;gt; runc&lt;/p&gt;&#xA;&lt;p&gt;containerd是容器运行时管理引擎.&lt;/p&gt;&#xA;&lt;p&gt;shim用于管理容器生命周期.&lt;/p&gt;&#xA;&lt;p&gt;Docker包括三个基本概念:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;仓库repository,集中存放镜像文件的场所,docker hub/store是最大的公开仓库．&lt;/li&gt;&#xA;&lt;li&gt;镜像image, 镜像是一个文件系统.&lt;/li&gt;&#xA;&lt;li&gt;容器container, 容器是镜像的运行的实例．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;修改docker存储路径:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ service docker stop&#xA;$ mv /var/lib/docker /opt/ssd/docker&#xA;$ ln -s /opt/ssd/docker /var/lib/docker&#xA;$ service docker start&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Install:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;windows:&#xA;&amp;lt;https://docs.docker.com/docker-for-windows/install/&amp;gt;&#xA;&#xA;linux:&#xA;&amp;lt;https://docs.docker.com/engine/install/ubuntu/&amp;gt;&#xA;&#xA;mac:&#xA;&amp;lt;https://github.com/abiosoft/colima/blob/main/docs/FAQ.md#docker&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;config&#34;&gt;config&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file&#34;&gt;https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;docker配置文件:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/etc/docker/daemon.json&#xA;/lib/systemd/system/docker.service&#xA;&#xA;{&#xA;    // debug&#xA;    &amp;quot;debug&amp;quot;: true,&#xA;    &#xA;    &amp;quot;data-root&amp;quot;： &amp;quot;/var/lib/docker&amp;quot;,&#xA;    &#xA;    &amp;quot;features&amp;quot;: {&#xA;        &amp;quot;buildkit&amp;quot;: true&#xA;    },&#xA;&#xA;    //容器访问外网:&#xA;    ip-forward=true 会设置 net.ipv4.ip_forward=1, 才能访问外网&#xA;    // 容器之间访问:&#xA;    icc=true, &#xA;    iptables=true  会修改iptables的forward策略为accept,&#xA;&#xA;    // 修改默认docker0&#xA;    &amp;quot;bridge&amp;quot;:&#xA;    &amp;quot;bip&amp;quot;: &amp;quot;10.0.0.1/16&amp;quot;  // subnet + gateway&#xA;    &amp;quot;fixed-cidr&amp;quot;: &amp;quot;10.41.0.0/24&amp;quot; // iprange&#xA;    &amp;quot;fixed-cidr-v6&amp;quot;: &amp;quot;&amp;quot;,&#xA;    &amp;quot;mtu&amp;quot;: 1500&#xA;    &amp;quot;default-gateway&amp;quot;:&#xA;&#x9;&amp;quot;default-gateway-v6&amp;quot;: &amp;quot;&amp;quot;,&#xA;&#xA;    // 修改默认dns&#xA;    &amp;quot;dns&amp;quot; : [&#xA;        &amp;quot;114.114.114.114&amp;quot;,&#xA;        &amp;quot;8.8.8.8&amp;quot;&#xA;    ]&#xA;    &amp;quot;dns-opts&amp;quot;: [],&#xA;    &amp;quot;dns-search&amp;quot;: [],&#xA;&#xA;    // ipv6&#xA;    &amp;quot;ipv6&amp;quot;: true&#xA;&#xA;    // private registry&#xA;  &#x9;&amp;quot;insecure-registries&amp;quot;: [],&#xA;&#xA;    // 修改registry&#xA;    &amp;quot;registry-mirrors&amp;quot;: [&#xA;        &amp;quot;https://registry.docker-cn.com&amp;quot;,&#xA;        &amp;quot;https://z4yd270h.mirror.aliyuncs.com&amp;quot;,&#xA;        &amp;quot;http://f1361db2.m.daocloud.io&amp;quot;,&#xA;        &amp;quot;https://docker.mirrors.ustc.edu.cn&amp;quot;&#xA;    ]&#xA;&#xA;    &amp;quot;hosts&amp;quot;: [],&#xA;    &amp;quot;log-level&amp;quot;: &amp;quot;&amp;quot;,&#xA;    &amp;quot;tls&amp;quot;: true,&#xA;    &amp;quot;tlsverify&amp;quot;: true,&#xA;    &amp;quot;tlscacert&amp;quot;: &amp;quot;&amp;quot;,&#xA;    &amp;quot;tlscert&amp;quot;: &amp;quot;&amp;quot;,&#xA;    &amp;quot;tlskey&amp;quot;: &amp;quot;&amp;quot;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;proxy for pull image from google(gcr):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes</title>
      <link>https://canuxcheng.com/post/kubernetes/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/kubernetes/</guid>
      <description>&lt;h1 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes&#34;&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubeadm&#34;&gt;https://github.com/kubernetes/kubeadm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kops&#34;&gt;https://github.com/kubernetes/kops&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kubespray&#34;&gt;https://github.com/kubernetes-sigs/kubespray&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;kubernetes简称k8s, 是开源的容器编排工具。&lt;/p&gt;&#xA;&lt;p&gt;安装单机版k8s:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;minikube&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;安装k8s集群:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;kubeadm (k8s内置的，类似于docker swarm mode, 没有HA)&lt;/li&gt;&#xA;&lt;li&gt;kops (目前主要支持aws等云平台, 国内不友好)&lt;/li&gt;&#xA;&lt;li&gt;kubespray (通过ansible部署, 国内不友好)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;k8s发行版：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;openshift-okd(redhat)&lt;/li&gt;&#xA;&lt;li&gt;rancher&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;k8s集群组成&#34;&gt;k8s集群组成&lt;/h1&gt;&#xA;&lt;h2 id=&#34;master&#34;&gt;master&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;aip-server, 提供资源操作唯一入口&lt;/li&gt;&#xA;&lt;li&gt;scheduler, 负责资源调度&lt;/li&gt;&#xA;&lt;li&gt;controller-manager, 负责维护集群状态&lt;/li&gt;&#xA;&lt;li&gt;etcd(可以部署单独集群), 保存整个集群的状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;node&#34;&gt;node&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;kubelet, 负责维护容器生命周期, 还包括CNI CVI&lt;/li&gt;&#xA;&lt;li&gt;kube-proxy, 为service提供cluster内部的服务发现和负载均衡&lt;/li&gt;&#xA;&lt;li&gt;CRI(containerd), 创建pod&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;addons&#34;&gt;addons&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;coredns&lt;/li&gt;&#xA;&lt;li&gt;flannel/cilium/calico&lt;/li&gt;&#xA;&lt;li&gt;dashboard, web-gui&lt;/li&gt;&#xA;&lt;li&gt;metrics-server, 取代heapster，用于cpu/memory监控&lt;/li&gt;&#xA;&lt;li&gt;ingress-nginx, 为服务提供外网入口&lt;/li&gt;&#xA;&lt;li&gt;federation, 提供跨可用区的集群&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;&#xA;&lt;p&gt;k8s包含的重要概念:&lt;/p&gt;&#xA;&lt;p&gt;-: nodes, 运行pod的物理机或虚拟机.&#xA;-: namespace, 对资源和对象的抽象集合．pods/deployments/services都属于某个ns.&#xA;-: pods,一组紧密关联的容器集合，共享pid,ipc,network,uts,namespace.&lt;/p&gt;&#xA;&lt;p&gt;k8s业务类型:&lt;/p&gt;&#xA;&lt;p&gt;-: long-running 长期伺服型 -&amp;gt; RC, RS, Deployment&#xA;-: batch 批处理型-&amp;gt; Job&#xA;-: node-daemon 节点后台支撑型-&amp;gt; DaemonSet&#xA;-: stateful application 有状态应用型-&amp;gt; StatefulSet&lt;/p&gt;</description>
    </item>
    <item>
      <title>Namespace</title>
      <link>https://canuxcheng.com/post/cncf_ns/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/cncf_ns/</guid>
      <description>&lt;h1 id=&#34;ns&#34;&gt;NS&lt;/h1&gt;&#xA;&lt;p&gt;namespace 是 Linux 内核用来隔离内核资源的方式&lt;/p&gt;&#xA;&lt;p&gt;Linux namespace资源：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Mount: 挂载点&lt;/li&gt;&#xA;&lt;li&gt;Network: 网络设备/协议栈/端口&lt;/li&gt;&#xA;&lt;li&gt;IPC: 进程间通信&lt;/li&gt;&#xA;&lt;li&gt;USR: 用户和用户组&lt;/li&gt;&#xA;&lt;li&gt;PID: 进程&lt;/li&gt;&#xA;&lt;li&gt;UTS: 主机名和域名&lt;/li&gt;&#xA;&lt;li&gt;Cgroup: 控制组&lt;/li&gt;&#xA;&lt;li&gt;Time&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;cgroup&#34;&gt;Cgroup&lt;/h1&gt;&#xA;&lt;p&gt;Cgroup: Control Groups.是linux下用于对一个或一组进程资源控制和监控的机制.可以管理cpu, memory,diskIO 等资源.不同资源的具体管理工作由相应的cgrouup子系统来实现.&lt;/p&gt;&#xA;&lt;p&gt;cgroup在不同的系统资源管理子系统中以层级树(Hierarchy)的方式来组织管理, 每个cgroup可以包含其它子cgroup.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ls -l /sys/fs/cgroup&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;cgroup子系统:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cpu&lt;/li&gt;&#xA;&lt;li&gt;cpuacct&lt;/li&gt;&#xA;&lt;li&gt;cpuset&lt;/li&gt;&#xA;&lt;li&gt;memory&lt;/li&gt;&#xA;&lt;li&gt;blkio&lt;/li&gt;&#xA;&lt;li&gt;devices&lt;/li&gt;&#xA;&lt;li&gt;freezer&lt;/li&gt;&#xA;&lt;li&gt;ns&lt;/li&gt;&#xA;&lt;li&gt;pid&lt;/li&gt;&#xA;&lt;li&gt;net_cls&lt;/li&gt;&#xA;&lt;li&gt;net_prio&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;lsns&#34;&gt;lsns&lt;/h1&gt;&#xA;&lt;p&gt;查看系统的namespace&lt;/p&gt;&#xA;&lt;p&gt;ns类型: mnt, net, ipc, user, pid, uts, cgroup&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$lsns -l&#xA;$lsns -t net&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;unshare&#34;&gt;unshare&lt;/h1&gt;&#xA;&lt;p&gt;使用非共享的NS运行程序&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 创建unshare 的 ns类型.&#xA;$unshare -f -m/-n/-i/-U/-p/-u/-C ... &#xA;&#xA;// 在net类型的namespace执行sleep命令&#xA;$unshare -fn sleep 10&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;nsenter&#34;&gt;nsenter&lt;/h1&gt;&#xA;&lt;p&gt;ns enter: Namespace enter.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Registry</title>
      <link>https://canuxcheng.com/post/cncf_registry/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/cncf_registry/</guid>
      <description>&lt;h1 id=&#34;container-registry&#34;&gt;Container Registry&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Docker Hub Registry&lt;/li&gt;&#xA;&lt;li&gt;Google Container Registry (gcr.io)&lt;/li&gt;&#xA;&lt;li&gt;RedHat Quay Registry (quay.io)&lt;/li&gt;&#xA;&lt;li&gt;GitHub Docker Packages (docker.pkg.github.com)(Deprecated)&lt;/li&gt;&#xA;&lt;li&gt;GitHub Container Registry (ghcr.io)&lt;/li&gt;&#xA;&lt;li&gt;Kubernetes Registry(registry.k8s.io =&amp;gt; k8s.gcr.io)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;harbor&#34;&gt;Harbor&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/goharbor/harbor&#34;&gt;https://github.com/goharbor/harbor&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Habor是由VMWare中国团队开源的容器镜像仓库, 用于存储和分发docker镜像的registry服务器.&lt;/p&gt;&#xA;&lt;p&gt;安装步骤:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;下载并解压安装包, &lt;a href=&#34;https://github.com/goharbor/harbor/releases&#34;&gt;https://github.com/goharbor/harbor/releases&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;配置harbor.cfg;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;修改配置:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;vim harbor.yml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;运行安装程序:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;./install.sh --with-notary --with-clair --with-chartmuseum&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;修改web的port:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vim /data/harbor/docker-compose.yml&#xA;proxy:&#xA;  ports:&#xA;    - 8080:80 # 默认http是80&#xA;    - 4433:443 # 默认https是443&#xA;$ vim /data/harbor/harbor.yml&#xA;hostname = ip&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;管理harbor:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# cd /data/harbor&#xA;# docker-compose down -v 　停止并删除container&#xA;&#xA;&amp;gt; 更新配置&#xA;# ./prepare --with-notary --with-clair --with-chartmuseum&#xA;&#xA;&amp;gt; 启动&#xA;# docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;docker使用harbor&#34;&gt;docker使用harbor&lt;/h2&gt;&#xA;&lt;p&gt;Deploy a plain HTTP registry:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swarm</title>
      <link>https://canuxcheng.com/post/swarm/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/swarm/</guid>
      <description>&lt;h1 id=&#34;swarm&#34;&gt;Swarm&lt;/h1&gt;&#xA;&lt;p&gt;docker swarm 是 docker内置的容器编排工具。&lt;/p&gt;&#xA;&lt;p&gt;从docker1.12开始swarm内置于docker engine.&lt;/p&gt;&#xA;&lt;p&gt;swarm mode具有内置kv存储，服务发现，负载均衡，路由网格，动态伸缩，滚动更新，安全传输等功能。&lt;/p&gt;&#xA;&lt;p&gt;swarm: 老版本的swarm, 需要kv store, 可以作为独立的container运行, 已废弃, 已经被docker swarm mode 代替.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker/swarm&#34;&gt;https://github.com/docker/swarm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;swarmkit:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker/swarmkit&#34;&gt;https://github.com/docker/swarmkit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;swarm命令&#34;&gt;swarm命令&lt;/h1&gt;&#xA;&lt;p&gt;创建集群&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker swarm init&#xA;--advertise-addr &amp;lt;ip&amp;gt; 多网卡情况下指定manager的ip&#xA;&#xA;docker swarm join --token &amp;lt;token&amp;gt; &amp;lt;host:port&amp;gt;&#xA;&#xA;# 查看token&#xA;docker swarm join-token manager   获取添加manager命令&#xA;docker swarm join-token worker   获取添加worker命令&#xA;docker swarm join-token -q worker&#xA;&#xA;docker swarm leave -f/--force&#xA;&#xA;docker swarm update&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;管理节点&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker node ls&#xA;docker node ls --format &amp;quot;{{.Hostname}}&amp;quot;&#xA;​&#xA;docker node rm&#xA;​&#xA;docker node inspect&#xA;​&#xA;# 查看node上运行的tasks/container&#xA;docker node ps -f/--filter NODE&#xA;​&#xA;# 添加label, node.labels.role=api&#xA;docker node update --label-add role=api node1&#xA;# 删除label&#xA;docker node update --label-rm role node1&#xA;​&#xA;# 活跃节点&#xA;docker node update --availability active node1&#xA;# 指定该节点满载,不再分派任务,关闭已有任务并重新分派.&#xA;docker node update --availability drain node1&#xA;# 已有任务继续运行,不分配新任务.&#xA;docker node update --availability pause node1&#xA;&#xA;# 查看所有node和label&#xA;docker node ls -q | xargs docker node inspect -f &#39;{{ .ID }} [{{ .Description.Hostname }}]: {{ .Spec.Labels }}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;service&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swarm CNI</title>
      <link>https://canuxcheng.com/post/swarm_cni/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/swarm_cni/</guid>
      <description>&lt;h1 id=&#34;cni&#34;&gt;CNI&lt;/h1&gt;&#xA;&lt;p&gt;CNI: Container Network Intarface&lt;/p&gt;&#xA;&lt;h2 id=&#34;单台host上的container通信&#34;&gt;单台host上的container通信&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;none&lt;/li&gt;&#xA;&lt;li&gt;host&lt;/li&gt;&#xA;&lt;li&gt;bridge&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;多台host之间的container通信&#34;&gt;多台host之间的container通信&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;overlay&lt;/li&gt;&#xA;&lt;li&gt;macvlan&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;提供overlaymacvlan的网络服务&#34;&gt;提供overlay/macvlan的网络服务&lt;/h3&gt;&#xA;&lt;p&gt;vxlan encapsulated:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;canal&lt;/li&gt;&#xA;&lt;li&gt;flannel&lt;/li&gt;&#xA;&lt;li&gt;weave&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;bgp unencapsulated:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;calico&lt;/li&gt;&#xA;&lt;li&gt;romana&lt;/li&gt;&#xA;&lt;li&gt;cilium&lt;/li&gt;&#xA;&lt;li&gt;kube-router&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;docker网络管理&#34;&gt;Docker网络管理&lt;/h1&gt;&#xA;&lt;p&gt;查看:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ docker network ls # 查看所有网络&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;默认支持的三种模式:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 默认启动的容器都是桥接(docker0)，重启后容器的ip就变了。&#xA;docker run --network bridge  ...&#xA;docker run --network host ... # 容器和主机使用相同的ip&#xA;docker run --network none ... # 容器不会分配局域网的ip&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker network create -d &amp;lt;driver&amp;gt; ... [name]&#xA;-d/--driver # 默认是bridge, 可选overlay/macvlan&#xA;--subnet  # CIDR格式&#xA;--gateway&#xA;--ip-range&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;使用:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swarm CSI</title>
      <link>https://canuxcheng.com/post/swarm_csi/</link>
      <pubDate>Thu, 05 Apr 2018 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/swarm_csi/</guid>
      <description>&lt;h1 id=&#34;csi&#34;&gt;CSI&lt;/h1&gt;&#xA;&lt;p&gt;CSI: Container Storage Interface&lt;/p&gt;&#xA;&lt;p&gt;CSI提供容器的数据持久化服务.&lt;/p&gt;&#xA;&lt;p&gt;容器管理数据的两种方式：&lt;/p&gt;&#xA;&lt;p&gt;数据卷(Volumes)&lt;/p&gt;&#xA;&lt;p&gt;挂载主机目录(bind mounts)&lt;/p&gt;&#xA;&lt;p&gt;临时文件系统(tmpfs)&lt;/p&gt;&#xA;&lt;h2 id=&#34;数据存储原理&#34;&gt;数据存储原理&lt;/h2&gt;&#xA;&lt;p&gt;如果container上目录不存在，docker会自动创建&lt;/p&gt;&#xA;&lt;p&gt;如果container目录存在且有内容，会被host上的目录覆盖掉，但不会被删除.&lt;/p&gt;&#xA;&lt;h2 id=&#34;volumes&#34;&gt;Volumes&lt;/h2&gt;&#xA;&lt;p&gt;如果host上目录不存在，docker会自动创建&lt;/p&gt;&#xA;&lt;p&gt;volumes是被设计用来持久化数据的，它的生命周期独立于容器.数据卷通过docker volume命令管理的，位于/var/lib/docker/volumes/下面.&lt;/p&gt;&#xA;&lt;p&gt;Docker不会在容器被删除后自动删除 数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 数据卷。&lt;/p&gt;&#xA;&lt;p&gt;创建:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ docker volume create &amp;lt;volume-name&amp;gt;&#xA;$ docker volume rm &amp;lt;volume-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;使用：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ docker run -v/--volume myvolume:/var/lib/app ...&#xA;$ docker run --mount source=myvolume,target=/var/lib/app ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;bind-mount&#34;&gt;Bind mount&lt;/h2&gt;&#xA;&lt;p&gt;如果host上目录不存在会报错，需要提前创建.&lt;/p&gt;&#xA;&lt;p&gt;bind mount就是直接将host路径挂在到docker．&lt;/p&gt;&#xA;&lt;p&gt;source和target都是文件，即可挂载单个文件.&lt;/p&gt;&#xA;&lt;p&gt;使用:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ docker run -v/--volume /opt/app:/var/lib/app:ro ...&#xA;$ docker run --mount type=bind,source=/opt/app,target=/var/lib/app,readonly ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;tmpfs&#34;&gt;tmpfs&lt;/h2&gt;&#xA;&lt;p&gt;tmpfs是临时文件系统，也叫内存文件系统，就是将数据存在内存上。&lt;/p&gt;&#xA;&lt;p&gt;tmpfs只能用于linux, 多个容器也不能共享，容器停止数据就销毁。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monitoring</title>
      <link>https://canuxcheng.com/post/storage_monitoring/</link>
      <pubDate>Thu, 05 Apr 2018 21:47:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/storage_monitoring/</guid>
      <description>&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;&#xA;&lt;h2 id=&#34;diskio&#34;&gt;diskio&lt;/h2&gt;&#xA;&lt;p&gt;IOPS: Input/Output Per Second. 每秒输入输出量，也叫TPS.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;SELECT non_negative_derivative(mean(reads),1s) as &amp;quot;read&amp;quot; FROM &amp;quot;diskio&amp;quot;&#xA;SELECT non_negative_derivative(mean(writes),1s) as &amp;quot;write&amp;quot; FROM &amp;quot;diskio&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;throughput:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;SELECT non_negative_derivative(mean(read_bytes),1s) as &amp;quot;read&amp;quot; FROM &amp;quot;diskio&amp;quot;&#xA;SELECT non_negative_derivative(mean(write_bytes),1s) as &amp;quot;write&amp;quot; FROM &amp;quot;diskio&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Utilization:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;SELECT non_negative_derivative(last(&amp;quot;io_time&amp;quot;),1ms)&#xA;FROM &amp;quot;diskio&amp;quot;&#xA;WHERE &amp;quot;name&amp;quot; =~ /^(v|s|)d(a|b|c|d)$/&#xA;GROUP BY &amp;quot;host&amp;quot;,&amp;quot;name&amp;quot;,time(_interval)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Queue length:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;SELECT non_negative_derivative(last(&amp;quot;weighted_io_time&amp;quot;,1ms))&#xA;FROM &amp;quot;diskio&amp;quot;&#xA;WHERE &amp;quot;name&amp;quot; =~ /^(v|s|)d(a|b|c|d)$/&#xA;GROUP BY &amp;quot;host&amp;quot;,&amp;quot;name&amp;quot;,time(_interval)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Storage</title>
      <link>https://canuxcheng.com/post/storage/</link>
      <pubDate>Thu, 05 Apr 2018 21:47:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/storage/</guid>
      <description>&lt;h1 id=&#34;storage&#34;&gt;Storage&lt;/h1&gt;&#xA;&lt;h1 id=&#34;raid&#34;&gt;RAID&lt;/h1&gt;&#xA;&lt;p&gt;RAID: redundant array of independent disks, 独立磁盘冗余数组．&lt;/p&gt;&#xA;&lt;h1 id=&#34;存储方式&#34;&gt;存储方式&lt;/h1&gt;&#xA;&lt;p&gt;DAS: direct attached storage, 直连式存储，通过SCSI或FC连接服务器．&lt;/p&gt;&#xA;&lt;p&gt;NAS: network attached storage，网络接入存储，通过IP(NFS/CIFS/..).&lt;/p&gt;&#xA;&lt;p&gt;SAN: storage area network, 存储区域网络，有IP或FC两种方式．&lt;/p&gt;&#xA;&lt;h1 id=&#34;存储接口&#34;&gt;存储接口&lt;/h1&gt;&#xA;&lt;p&gt;SCSI&lt;/p&gt;&#xA;&lt;p&gt;iSCSI&lt;/p&gt;&#xA;&lt;p&gt;SAS&lt;/p&gt;&#xA;&lt;p&gt;SATA&lt;/p&gt;&#xA;&lt;p&gt;FC&lt;/p&gt;&#xA;&lt;p&gt;FCoE&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Websocket</title>
      <link>https://canuxcheng.com/post/websocket/</link>
      <pubDate>Tue, 03 Apr 2018 14:46:19 +0000</pubDate>
      <guid>https://canuxcheng.com/post/websocket/</guid>
      <description>&lt;h1 id=&#34;websocket&#34;&gt;WebSocket&lt;/h1&gt;&#xA;&lt;p&gt;websocket用于server和browser之间通讯．&lt;/p&gt;&#xA;&lt;p&gt;websocket采用特殊报头，使得浏览器和服务器只需要做一个握手的动作．&lt;/p&gt;&#xA;&lt;p&gt;通讯数据以\x00开头，以\xFF结尾．&lt;/p&gt;&#xA;&lt;p&gt;url:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ws://&#xA;wss://&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;一个客户端只建立一个tcp连接&lt;/p&gt;&#xA;&lt;p&gt;服务端可以推送/push数据到web客户端&lt;/p&gt;&#xA;&lt;p&gt;有更加亲量级的头，减少数据传送．&lt;/p&gt;</description>
    </item>
    <item>
      <title>JS BOM</title>
      <link>https://canuxcheng.com/post/js_bom/</link>
      <pubDate>Thu, 15 Mar 2018 09:36:32 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js_bom/</guid>
      <description>&lt;h1 id=&#34;bom&#34;&gt;BOM&lt;/h1&gt;&#xA;&lt;p&gt;Browser Object Model&lt;/p&gt;&#xA;&lt;p&gt;介绍浏览器对象，不过缺乏规范.&lt;/p&gt;&#xA;&lt;h1 id=&#34;window&#34;&gt;window&lt;/h1&gt;&#xA;&lt;p&gt;window对象是最顶层对象，有6大属性,属性本身也是对象.&lt;/p&gt;&#xA;&lt;p&gt;window对象的document属性也是对象，document对象有5大属性.&lt;/p&gt;&#xA;&lt;p&gt;引用当前窗口时，可以省略window对象.&lt;/p&gt;&#xA;&lt;p&gt;eg:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;window.document&#xA;document&#xA;&#xA;window.alert()&#xA;alert()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;对象集合:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;frames[]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;attribution:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;document # DOM的Document对象&#xA;history # History对象&#xA;location # Location对象&#xA;Navigator # Navigator对象&#xA;Screen # Screen对象&#xA;window # 等价于self&#xA;&#xA;closed&#xA;defaultStatus&#xA;status&#xA;innerheight&#xA;innerwidth&#xA;outerheight&#xA;outerwidth&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;method:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;alert() // 弹出警告框&#xA;confirm() // 和alert差不多，带确定和取消按钮，确定返回true&#xA;prompt() // 输入提示框,返回输入内容&#xA;find() // 查找&#xA;&#xA;// 子窗口的opener属性反过来引用打开她的那个窗口(父窗口)&#xA;subwin = open() // 打开一个新窗口, _parent在当前窗口打开, 返回子窗口的window对象.&#xA;subwin.opener // 表示window&#xA;&#xA;moveTo()&#xA;moveBy()&#xA;resizeTo()&#xA;resizeBy()&#xA;&#xA;setTimeout()&#xA;clearTimeout()&#xA;&#xA;setInterval()&#xA;clearInterval()&#xA;&#xA;close()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;location&#34;&gt;location&lt;/h1&gt;&#xA;&lt;p&gt;attribution:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Brazil</title>
      <link>https://canuxcheng.com/post/travel_brazil/</link>
      <pubDate>Thu, 08 Mar 2018 16:41:50 +0000</pubDate>
      <guid>https://canuxcheng.com/post/travel_brazil/</guid>
      <description>&lt;h1 id=&#34;巴西之旅&#34;&gt;巴西之旅&lt;/h1&gt;&#xA;&lt;p&gt;看照片：&lt;/p&gt;&#xA;&lt;h1 id=&#34;库里提巴&#34;&gt;库里提巴&lt;/h1&gt;&#xA;&lt;p&gt;库里提巴（Curitiba）&lt;/p&gt;</description>
    </item>
    <item>
      <title>AlertManager</title>
      <link>https://canuxcheng.com/post/metrics_alertmanager/</link>
      <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics_alertmanager/</guid>
      <description>&lt;h1 id=&#34;alert-manager&#34;&gt;alert-manager&lt;/h1&gt;&#xA;&lt;p&gt;在Prometheus中支持基于PromQL创建告警规则, prometheus通过push触发alertmanager.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/alertmanager&#34;&gt;https://github.com/prometheus/alertmanager&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exporter</title>
      <link>https://canuxcheng.com/post/metrics_exporter/</link>
      <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics_exporter/</guid>
      <description>&lt;h1 id=&#34;exporter&#34;&gt;exporter&lt;/h1&gt;&#xA;&lt;p&gt;广义上讲所有可以向Prometheus提供监控样本数据的程序都可以被称为一个Exporter。而Exporter的一个实例称为target，如下所示，Prometheus通过轮询的方式定期从这些target中获取样本数据:&lt;/p&gt;&#xA;&lt;p&gt;prometheus通过pull从exporter拉取数据.&lt;/p&gt;&#xA;&lt;p&gt;直接采集:cAdvisor, kubernetes, etcd, gokit等直接内置了用于向prometheus暴露监控数据的端点.&lt;/p&gt;&#xA;&lt;p&gt;间接采集: 通过promethesu的client api编写exporter，例如mysql-exporter, consul-exporter.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;host&#34;&gt;host&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/node_exporter&#34;&gt;https://github.com/prometheus/node_exporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;k8s&#34;&gt;k8s&lt;/h1&gt;&#xA;&lt;p&gt;k8s metrics api包括 resource metrics api 和 customer metrics api.&lt;/p&gt;&#xA;&lt;p&gt;cadvisor, metrics-server, kube-state-metrics 等实现了 核心api.&lt;/p&gt;&#xA;&lt;p&gt;一些adapter实现了自定义api.&lt;/p&gt;&#xA;&lt;p&gt;k8s-prometheus-adapter实现了metrics-server的核心api，同时实现了自定义api.&lt;/p&gt;&#xA;&lt;h2 id=&#34;metrics-server&#34;&gt;metrics-server &lt;/h2&gt;&#xA;&lt;p&gt;提供了整个集群的资源监控数据&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/metrics-server&#34;&gt;https://github.com/kubernetes-sigs/metrics-server&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;cadvisor&#34;&gt;cAdvisor&lt;/h2&gt;&#xA;&lt;p&gt;负责单节点内部的容器和节点资源使用统计，会自动收集本机容器 CPU、内存、网络和文件系统的资源占用情况&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/cadvisor&#34;&gt;https://github.com/google/cadvisor&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;kube-state-metrics&#34;&gt;kube-state-metrics &lt;/h2&gt;&#xA;&lt;p&gt;提供了 Kubernetes 资源对象（如 DaemonSet、Deployments 等）的度量。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kube-state-metrics&#34;&gt;https://github.com/kubernetes/kube-state-metrics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;adapter&#34;&gt;adapter&lt;/h2&gt;&#xA;&lt;p&gt;同时支持核心api和自定义api.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DirectXMan12/k8s-prometheus-adapter&#34;&gt;https://github.com/DirectXMan12/k8s-prometheus-adapter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;blackbox&#34;&gt;blackbox&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/blackbox_exporter&#34;&gt;https://github.com/prometheus/blackbox_exporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;wmi&#34;&gt;wmi&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/martinlindhe/wmi_exporter&#34;&gt;https://github.com/martinlindhe/wmi_exporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;snmp&#34;&gt;snmp&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/snmp_exporter&#34;&gt;https://github.com/prometheus/snmp_exporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;mysql&#34;&gt;mysql&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/mysqld_exporter&#34;&gt;https://github.com/prometheus/mysqld_exporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;rabbitmq&#34;&gt;rabbitmq&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deadtrickster/prometheus_rabbitmq_exporter&#34;&gt;https://github.com/deadtrickster/prometheus_rabbitmq_exporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;mongo&#34;&gt;mongo&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/percona/mongodb_exporter&#34;&gt;https://github.com/percona/mongodb_exporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;redis&#34;&gt;redis&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oliver006/redis_exporter&#34;&gt;https://github.com/oliver006/redis_exporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;haproxy&#34;&gt;haproxy&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/haproxy_exporter&#34;&gt;https://github.com/prometheus/haproxy_exporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;consul&#34;&gt;consul&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/consul_exporter&#34;&gt;https://github.com/prometheus/consul_exporter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;pushgateway&#34;&gt;pushgateway&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/pushgateway&#34;&gt;https://github.com/prometheus/pushgateway&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Influxdb</title>
      <link>https://canuxcheng.com/post/metrics_influxdb/</link>
      <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics_influxdb/</guid>
      <description>&lt;h1 id=&#34;influxdb&#34;&gt;Influxdb&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/influxdata/influxdb&#34;&gt;https://github.com/influxdata/influxdb&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Scalable datastore for metrics, events, and real-time analytics.&lt;/p&gt;&#xA;&lt;p&gt;支持从opentsdb, graphite, collectd等获取数据&lt;/p&gt;&#xA;&lt;p&gt;默认数据库_internal 用于存储内部运行数据&lt;/p&gt;&#xA;&lt;p&gt;安装配置参考官方文档&lt;/p&gt;&#xA;&lt;p&gt;log&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo journalctl -u influxdb.service&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;config:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 开通kapacitor的subscription功能&#xA;[[subscriber]]&#xA;enable = true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;&#xA;&lt;p&gt;influxdb每条记录是一个point.&lt;/p&gt;&#xA;&lt;p&gt;points包括下面部分：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;measurement: a measurement, like cpu_load, 相当于表名&#xA;tags: zero or more tag, key=value, eg: host=ip&#xA;fields: zero or more field, key=value, eg: value=0.18&#xA;time: a timestamp&#xA;&#xA;&amp;lt;measurement&amp;gt;[,&amp;lt;tag-key&amp;gt;=&amp;lt;tag-value&amp;gt;...] &amp;lt;field-key&amp;gt;=&amp;lt;field-value&amp;gt;[,&amp;lt;field2-key&amp;gt;=&amp;lt;field2-value&amp;gt;...] [unix-nano-timestamp]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;series: 在一个database中,相同的retention policy, measurement, tag set的数据集，叫一个序列．&lt;/p&gt;&#xA;&lt;p&gt;RP: retention policy, autogen是默认的存储策略, 用于设置数据保留时间.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kapacitor</title>
      <link>https://canuxcheng.com/post/metrics_kapacitor/</link>
      <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics_kapacitor/</guid>
      <description>&lt;h1 id=&#34;kapacitor&#34;&gt;Kapacitor&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/influxdata/Kapacitor&#34;&gt;https://github.com/influxdata/Kapacitor&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Open source framework for processing, monitoring, and alerting on time series data&lt;/p&gt;&#xA;&lt;p&gt;可以通过chrongraf创建tickscript/task, 然后通过api/cli导入到kapacitor.&lt;/p&gt;&#xA;&lt;p&gt;配置:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;hostname = &amp;quot;kapcitor-service&amp;quot;&#xA;&#xA;# 如果从influxdb读取数据需要配置该选项．&#xA;[[influxdb]]&#xA;enabled = true&#xA;&#xA;# 如果从该路径加载tickscript&#xA;[[load]]&#xA;enabled = true&#xA;dir=&amp;quot;/etc/kapacitor/load&amp;quot;&#xA;# tasks, 放到/etc/kapacitor/load/tasks/*.tick,重启kapacitor会自动加载task,并默认enable.&#xA;## 要求，ID和tick文件同名，tickscript开头需要指定dbrp, tickscript里面需要指定batch/stream.&#xA;# templates...&#xA;# handlers...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ kapacitor help&#xA;&#xA;# 创建template(也就是变量可以单独赋值的tickscript)&#xA;$ kapacitor define-template &amp;lt;name&amp;gt; -tick /path/template.tick&#xA;$ kapacitor show-template &amp;lt;name&amp;gt;&#xA;&#xA;# 创建/更新 task, 创建的默认是disable状态.&#xA;# 从tickscript创建task&#xA;$ kapacitor define &amp;lt;name&amp;gt; -tick task.tick -type [stream|batch] -dbrp [database.retentionPolicy]&#xA;# 从template创建task(如果yaml/json中没有指定template需要用-template指定)&#xA;$ kapacitor define &amp;lt;name&amp;gt; -file task.yaml&#xA;$ kapacitor define &amp;lt;name&amp;gt; -file task.json&#xA;&#xA;# 删除task&#xA;$ kapacitor delete [task id/name]&#xA;&#xA;$ kapacitor list tasks/templates&#xA;$ kapacitor reload [task id/name] # 相当于disable &amp;amp; enable.&#xA;$ kapacitor enable [task id/name]&#xA;$ kapaciror disable [task id/name]&#xA;$ kapacitor show [id/name]&#xA;$ kapacitor watch [task id/name]&#xA;&#xA;$ kapacitor list topics&#xA;$ kapacitor delete topics [topic id]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;http-api&#34;&gt;Http API&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;port = 9092&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;configuration&#34;&gt;configuration&lt;/h2&gt;&#xA;&lt;p&gt;获取所有可以overwrite的参数&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prometheus</title>
      <link>https://canuxcheng.com/post/metrics_prometheus/</link>
      <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics_prometheus/</guid>
      <description>&lt;h1 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h1&gt;&#xA;&lt;p&gt;Prometheus Server是Prometheus组件中的核心部分，负责实现对监控数据的获取，存储以及查询&lt;/p&gt;&#xA;&lt;p&gt;swarm部署:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vegasbrianc/prometheus&#34;&gt;https://github.com/vegasbrianc/prometheus&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;k8s部署:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/coreos/kube-prometheus&#34;&gt;https://github.com/coreos/kube-prometheus&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/coreos/prometheus-operator&#34;&gt;https://github.com/coreos/prometheus-operator&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/prometheus-operator&#34;&gt;https://github.com/helm/charts/tree/master/stable/prometheus-operator&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;高可用:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/thanos-io/thanos&#34;&gt;https://github.com/thanos-io/thanos&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;prometheus grafana dashboard:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-monitoring/kubernetes-mixin&#34;&gt;https://github.com/kubernetes-monitoring/kubernetes-mixin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/kubernetes-app&#34;&gt;https://github.com/grafana/kubernetes-app&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;promql&#34;&gt;PromQL&lt;/h1&gt;&#xA;&lt;p&gt;metrics类型:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;counter计数器&lt;/li&gt;&#xA;&lt;li&gt;gauge仪表盘&lt;/li&gt;&#xA;&lt;li&gt;histogram直方图&lt;/li&gt;&#xA;&lt;li&gt;summary摘要&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Telegraf</title>
      <link>https://canuxcheng.com/post/metrics_telegraf/</link>
      <pubDate>Thu, 18 Jan 2018 19:23:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics_telegraf/</guid>
      <description>&lt;h1 id=&#34;telegraf&#34;&gt;Telegraf&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/influxdata/telegraf&#34;&gt;https://github.com/influxdata/telegraf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The plugin-driven server agent for collecting &amp;amp; reporting metrics.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;configuartion&#34;&gt;Configuartion&lt;/h1&gt;&#xA;&lt;p&gt;agent configuration:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;interval    所有inputs的默认运行间隔&#xA;round_interval&#xA;collection_jitter&#xA;precision    ns/us/ms/s&#xA;flush_interval&#xA;flush_jitter&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;input configuration:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;interval&#xA;name_override # 默认measurements是插件名,修改默认measurements.&#xA;name_prefix&#xA;name_suffix&#xA;tags&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;go-api&#34;&gt;Go API&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/influxdata/telegraf#Input&#34;&gt;https://godoc.org/github.com/influxdata/telegraf#Input&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;测试插件：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 需要配置文件&#xA;$ telegraf --input-filter &amp;lt;plugin-name&amp;gt; --test&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;build&#34;&gt;Build&lt;/h1&gt;&#xA;&lt;p&gt;安装依赖：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install ruby-dev&#xA;sudo gem install fpm&#xA;sudo apt-get install rpm&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;编译telegraf:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;make telegraf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;生成配置文件：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;./telegraf config &amp;gt; ./etc/telegraf.conf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;构建deb:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contribution</title>
      <link>https://canuxcheng.com/post/go_oss/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/go_oss/</guid>
      <description>&lt;h1 id=&#34;golang-contribution&#34;&gt;Golang Contribution&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://go.dev/doc/contribute&#34;&gt;https://go.dev/doc/contribute&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建google账号&#34;&gt;创建google账号&lt;/h2&gt;&#xA;&lt;p&gt;推荐申请一个google邮箱。&lt;/p&gt;&#xA;&lt;p&gt;在开发机配置git&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ git config --global user.email name@example.com   &#xA;$ git config user.email name@example.com            &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;签cla&#34;&gt;签CLA&lt;/h2&gt;&#xA;&lt;p&gt;个人开发者需要签署CLA。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cla.developers.google.com/about/google-individual&#34;&gt;https://cla.developers.google.com/about/google-individual&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置git认证&#34;&gt;配置git认证&lt;/h2&gt;&#xA;&lt;p&gt;点击“Generate Password”， 用google邮箱登陆，根据提示配置git。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://go.googlesource.com/&#34;&gt;https://go.googlesource.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建gerrit账号&#34;&gt;创建gerrit账号&lt;/h2&gt;&#xA;&lt;p&gt;用google邮箱登陆即可。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://go-review.googlesource.com/dashboard/self&#34;&gt;https://go-review.googlesource.com/dashboard/self&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装git-codereview&#34;&gt;安装git-codereview&lt;/h2&gt;&#xA;&lt;p&gt;windows:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ go get golang.org/x/review/git-codereview@latest&#xA;$ git --exec-path&#xA;&#xA;&amp;gt; copy git-codereview.exe from GOBIN to Git\mingw64\libexec\git-core&#xA;&#xA;$ git codereview help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;linux/mac:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ go install golang.org/x/review/git-codereview@latest&#xA;$ git codereview help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;选取修改的cl&#34;&gt;选取修改的CL&lt;/h2&gt;&#xA;&lt;p&gt;从github选取一个还没有人提交CL(change log/list)的Issue进行修改。&lt;/p&gt;&#xA;&lt;p&gt;issue三种类型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;NeedsInvestigation&lt;/li&gt;&#xA;&lt;li&gt;NeedsDecision&lt;/li&gt;&#xA;&lt;li&gt;NeedsFix    选这个里面还没有CL的做&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/issues?q=is%3Aissue+is%3Aopen+label%3ANeedsFix+NOT+%22golang.org%2Fcl%22&#34;&gt;https://github.com/golang/go/issues?q=is%3Aissue+is%3Aopen+label%3ANeedsFix+NOT+%22golang.org%2Fcl%22&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;提交patch&#34;&gt;提交patch&lt;/h2&gt;&#xA;&lt;p&gt;支持github或者gerrit提交patch。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debug</title>
      <link>https://canuxcheng.com/post/go_debug/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/go_debug/</guid>
      <description>&lt;h1 id=&#34;gdb&#34;&gt;gdb&lt;/h1&gt;&#xA;&lt;h1 id=&#34;delve&#34;&gt;delve&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;https://github.com/derekparker/delve&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;debug&#34;&gt;debug&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Devops</title>
      <link>https://canuxcheng.com/post/go_devops/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/go_devops/</guid>
      <description>&lt;h1 id=&#34;go&#34;&gt;Go&lt;/h1&gt;&#xA;&lt;p&gt;go有三种安装方式：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;源码安装&lt;/li&gt;&#xA;&lt;li&gt;标准包安装&lt;/li&gt;&#xA;&lt;li&gt;第三方工具安装&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;GOROOT:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT 就是go的安装目录&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;windows标准包安装go:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;msi指定安装路径，自动添加%GOROOT%/bin到环境变量&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;linux标准包安装go:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;下载.tar.gz包解压到/usr/local/go&#xA;GOROOT=/usr/local/go&#xA;export PATH=$PATH:/usr/local/go/bin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;验证安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ go --help&#xA;$ go version&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;第三方工具gvm安装go:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://github.com/moovweb/gvm&#34;&gt;http://github.com/moovweb/gvm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ gvm install go1.9.2&#xA;$ gvm use go1.9.2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;gopath&#34;&gt;GOPATH&lt;/h1&gt;&#xA;&lt;p&gt;gopath用来存放go源码，go的可运行文件，以及相应的编译之后的包文件．&lt;/p&gt;&#xA;&lt;p&gt;GOPATH 从go1.1到1.7都需要设置，而且不能是go的安装目录, go1.8开始有默认值:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;GOPATH=$USERPROFILE%go&#xA;GOPATH=$HOME/go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;gopath结构：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;src    存放源码&#xA;pkg    编译后的库文件&#xA;bin    编译后生成的可执行文件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;gopath有多个值时用冒号分开即可.&lt;/p&gt;&#xA;&lt;h1 id=&#34;gobin&#34;&gt;GOBIN&lt;/h1&gt;&#xA;&lt;p&gt;默认值&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;GOBIN=$HOME/go/bin&#xA;export PATH=$PATH:$HOME/go/bin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;go get 和 go install 安装的二进制到GOBIN。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;go命令&#34;&gt;go命令&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ go help [command]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;get&lt;/p&gt;</description>
    </item>
    <item>
      <title>Document</title>
      <link>https://canuxcheng.com/post/go_document/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/go_document/</guid>
      <description>&lt;h1 id=&#34;document&#34;&gt;Document&lt;/h1&gt;&#xA;&lt;p&gt;go文档相关&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/&#34;&gt;https://godoc.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;go文档的两种方式:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;go doc&lt;/li&gt;&#xA;&lt;li&gt;godoc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;go-doc&#34;&gt;go doc&lt;/h1&gt;&#xA;&lt;p&gt;直接在命令行查看文档&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ go doc [package/symbol]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;godoc&#34;&gt;godoc&lt;/h1&gt;&#xA;&lt;p&gt;go自带的文档命令行接口,在浏览器查看文档&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;godoc package [name ...]&#xA;godoc -http=:6060&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;通过github的项目文档在:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;https://godoc.org&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;godev&#34;&gt;go.dev&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev&#34;&gt;https://pkg.go.dev&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go</title>
      <link>https://canuxcheng.com/post/go/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/go/</guid>
      <description>&lt;h1 id=&#34;go概述&#34;&gt;Go概述&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;https://golang.org/ref/spec&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;go语言表达能力强，简洁，清晰，高效．&lt;/p&gt;&#xA;&lt;p&gt;go是一个快速的，静态的，强类型的，编译型语言．&lt;/p&gt;&#xA;&lt;p&gt;go具有高并发和垃圾回收功能.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;go基本语法&#34;&gt;Go基本语法&lt;/h1&gt;&#xA;&lt;p&gt;go源程序叫*.go&lt;/p&gt;&#xA;&lt;p&gt;go大小写敏感&lt;/p&gt;&#xA;&lt;p&gt;go程序都是由包组成，程序的入口是main包中的main函数，每个程序有且只有一个．&lt;/p&gt;&#xA;&lt;p&gt;go中只有首字母大写的名称才能从包中导出．&lt;/p&gt;&#xA;&lt;p&gt;go的类型在变量名后面．&lt;/p&gt;&#xA;&lt;p&gt;go函数外的每个语句都必须以关键字开始.&lt;/p&gt;&#xA;&lt;p&gt;go标识符(函数名／变量名／常量名／类型名／语句标号／包名)以字母或下划线开头，后面还可以包含数字,不能用关键字.&lt;/p&gt;&#xA;&lt;p&gt;go使用大括号{}表示一个代码块.&lt;/p&gt;&#xA;&lt;p&gt;go使用分号;表示一个语句结束, 一般一行写多个语句才需要显示添加分号．&lt;/p&gt;&#xA;&lt;p&gt;go的包名一般是小写的单个单词(文件所在的最后一层目录名).&lt;/p&gt;&#xA;&lt;p&gt;go一般使用驼峰命名法.&lt;/p&gt;&#xA;&lt;p&gt;go没有逗号操作符.&lt;/p&gt;&#xA;&lt;p&gt;go中++/&amp;ndash;是语句不是表达式．&lt;/p&gt;&#xA;&lt;p&gt;go中大写字母开头的变量或函数是公有的，小写字母开头的是包私有的.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;go注释&#34;&gt;Go注释&lt;/h1&gt;&#xA;&lt;p&gt;单行注释：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// comment&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;多行注释：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/* comment */&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;go关键字&#34;&gt;Go关键字&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;var const &#xA;break continue for if else switch case default goto fallthrough&#xA;func return defer&#xA;package import&#xA;range type struct map&#xA;interface&#xA;select go chan&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;go运算符和优先级&#34;&gt;Go运算符和优先级&lt;/h1&gt;&#xA;&lt;p&gt;go中的运算都是从左到右结合．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;^    #&#xA;!    # 逻辑非&#xA;&#xA;*&#xA;/    # 结果取整数&#xA;%&#xA;&amp;lt;&amp;lt;   # 位运算，左移&#xA;&amp;gt;&amp;gt;   # 位运算，右移&#xA;&amp;amp;    # 位运算，　按位与&#xA;&amp;amp;^   #&#xA;&#xA;+&#xA;-&#xA;|    # 位运算,按位或&#xA;^    # 位运算,按位异或&#xA;&#xA;==&#xA;!=&#xA;&amp;lt;&#xA;&amp;lt;=&#xA;&amp;gt;&#xA;&amp;gt;=&#xA;&#xA;&amp;lt;- # chan运算符&#xA;&#xA;&amp;amp;&amp;amp;   # 逻辑与&#xA;||   # 逻辑或&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;go数据类型&#34;&gt;Go数据类型&lt;/h1&gt;&#xA;&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;&#xA;&lt;p&gt;定义/申明变量:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go_Concurrency</title>
      <link>https://canuxcheng.com/post/go_concurrency/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/go_concurrency/</guid>
      <description>&lt;h1 id=&#34;并发concurrency&#34;&gt;并发/concurrency&lt;/h1&gt;&#xA;&lt;p&gt;CSP: communicating sequential processes, 通信顺序进程。&lt;/p&gt;&#xA;&lt;p&gt;go的并发同步模型来自CSP泛型。CSP是一种消息传递模型，用于在goroutine之间同步和传递数据的类型是channel.&lt;/p&gt;&#xA;&lt;p&gt;concurrency:并发,同时管理很多事情，可以执行到一半就暂停去做其他事情.有同时执行的能力，但不一定要同时执行.并发属于代码。&lt;/p&gt;&#xA;&lt;p&gt;所以如果是单个cpu，每次只能运行一个goroutine,如果是多cpu,就是并行,每个cpu都可以跑goroutine.&lt;/p&gt;&#xA;&lt;p&gt;parallelism: 并行,让不同的代码在不同的物理处理器上同时执行. 并行属于运行中的程序。并行是时间或者上下文的概念。&lt;/p&gt;&#xA;&lt;p&gt;process: 进程, 是系统资源和调度的基本单位，包括内存，句柄，线程等。&lt;/p&gt;&#xA;&lt;p&gt;thread: 线程,是cpu调度和分配的基本单位,每个进程至少包含一个线程，初始线程就是主线程，每个线程绑定到一个逻辑cpu上运行。&lt;/p&gt;&#xA;&lt;p&gt;co-routine: 协程，大量线程会消耗内存和cpu调度，将线程分为内核态线程和用户态线程，每个用户态线程绑定到内核态线程，但是cpu不知道用户态线程的存在，我们把用户态线程叫协程。&lt;/p&gt;&#xA;&lt;p&gt;goroutine: go语言的协程，是并行的，通过channel来通信.&lt;/p&gt;&#xA;&lt;p&gt;GMP: goroutine的实现模型。&lt;/p&gt;&#xA;&lt;p&gt;G: goroutine。&lt;/p&gt;&#xA;&lt;p&gt;M: thread，代表一个内核态线程，golang默认10000个，SetMaxThreads可以设置，P创建M，一个P可以创建多个M如果之前的阻塞了。&lt;/p&gt;&#xA;&lt;p&gt;P: processor, 包含了可运行的协程队列，由GOMAXPROCS确定个数，然后创建对应个数的P。&lt;/p&gt;&#xA;&lt;p&gt;不要通过共享内存通信，通过通信来共享内存。&lt;/p&gt;&#xA;&lt;h2 id=&#34;goroutines&#34;&gt;goroutines&lt;/h2&gt;&#xA;&lt;p&gt;go关键字会启动一个新的goroutine并执行.&lt;/p&gt;&#xA;&lt;p&gt;每个goroutine会绑定到一个逻辑处理器上运行，每个逻辑处理器会绑定到单个操作系统线程。&lt;/p&gt;&#xA;&lt;p&gt;当goroutine阻塞，就会把goroutine和线程从逻辑处理器上分离，然后创建一个新的线程绑定到该逻辑处理器，并继续运行队列中的其它goroutine.&lt;/p&gt;&#xA;&lt;p&gt;当阻塞的goroutine恢复，会再次进入队列，和该goroutine绑定的线程也会保存下来.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;go FuncName(...)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;主进程main结束了，goroutine也结束．&lt;/p&gt;&#xA;&lt;h2 id=&#34;竟态&#34;&gt;竟态&lt;/h2&gt;&#xA;&lt;p&gt;race condition: 竞争状态，多个goroutine同时操作同一资源.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 检测竞争状态&#xA;$ go build -race&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;所以要解决goroutine间的消息传递和同步的问题.&lt;/p&gt;&#xA;&lt;p&gt;通过通信共享内存，而不是通过共享内存而通信,说明解决并发问题优先使用chan，而不是sync包。&lt;/p&gt;&#xA;&lt;p&gt;channel还是mutex,选择的依据是他们的能力/特性.&lt;/p&gt;&#xA;&lt;p&gt;channel的能力是让数据流动起来，擅长的是数据流动的场景:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传递数据的所有权，即把某个数据发送给其他协程&lt;/li&gt;&#xA;&lt;li&gt;分发任务，每个任务都是一个数据&lt;/li&gt;&#xA;&lt;li&gt;交流异步结果，结果是一个数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;sync的能力是数据不动，某段时间只给一个协程访问数据的权限擅长数据位置固定的场景:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存&lt;/li&gt;&#xA;&lt;li&gt;状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;channel&#34;&gt;channel&lt;/h2&gt;&#xA;&lt;p&gt;goroutine通过channel来传递消息.&lt;/p&gt;&#xA;&lt;p&gt;channels是引用类型,chan是线程安全的，并且不会有数据冲突。&lt;/p&gt;&#xA;&lt;p&gt;channel可以共享内置类型，命名类型，结构类型，引用类型的值或指针.&lt;/p&gt;&#xA;&lt;p&gt;chan通过make来创建，通过close来关闭．&lt;/p&gt;&#xA;&lt;p&gt;chan是先进先出的.&lt;/p&gt;&#xA;&lt;p&gt;如果chan指定了容量(有缓存), 就是异步，非阻塞模式．&lt;/p&gt;&#xA;&lt;p&gt;默认是无缓存的，同步的,　阻塞模式.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_builtin</title>
      <link>https://canuxcheng.com/post/gsl_builtin/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_builtin/</guid>
      <description>&lt;h1 id=&#34;builtin&#34;&gt;builtin&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/builtin/&#34;&gt;https://golang.org/pkg/builtin/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;go的builtin package.&lt;/p&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;true&#xA;false&#xA;iota&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;&#xA;&lt;p&gt;pointer, slice, map, channel, func, interface的零值：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 分配并初始化各种类型的对象, 返回一个指针．&#xA;new(Type) *Type&#xA;&#xA;# 分配并初始化一个Slice/Map/Channel的对象,返回相同类型的对象.&#xA;make(t Type, size ...IntegerType) Type&#xA;&#xA;# 返回容量，　Array/ArrayPointer/Slice/Channel&#xA;cap(v Type) int&#xA;&#xA;# 返回长度，　String/Array/ArrayPointer/Slice/Map/Channel&#xA;len(v Type) int&#xA;&#xA;print(args ...Type)&#xA;&#xA;println(args ...Type)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;complex:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 把两个浮点数构造成一个复数&#xA;complex(r, i FloatType) ComplexType&#xA;&#xA;# 返回复数c的实部&#xA;real(c ComplexType) FloatType&#xA;&#xA;# 返回复数c的虚部&#xA;imag(c ComplexType) FloatType&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;slice:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 向切片末尾追加元素，返回新的切片．切片长度增加.&#xA;# 如果长度超过底层数组长度，就创建了一个新的底层数组. 否则底层数组不变．&#xA;# 在元素不超过1000的情况下，自动创建的底层数组容量翻倍.&#xA;append(slice []Type, elems ...Type) []Type&#xA;&#xA;# 复制一个切片, 返回复制的元素的个数&#xA;copy(dst, src []Type) int&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;map:&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_concurrency</title>
      <link>https://canuxcheng.com/post/gsl_concurrency/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_concurrency/</guid>
      <description>&lt;h1 id=&#34;sync&#34;&gt;sync&lt;/h1&gt;&#xA;&lt;p&gt;sync用于goroutine同步.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import &amp;quot;sync&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;h2 id=&#34;locker&#34;&gt;Locker&lt;/h2&gt;&#xA;&lt;p&gt;一个可以加锁和解锁的接口&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Locker interface {&#xA;    Lock()&#xA;    Unlock()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;pool&#34;&gt;Pool&lt;/h2&gt;&#xA;&lt;p&gt;Pool是一个可以分别存取的临时对象的集合。&lt;/p&gt;&#xA;&lt;h2 id=&#34;once&#34;&gt;Once&lt;/h2&gt;&#xA;&lt;p&gt;只执行一次动作的对象(单例模式)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Once struct {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;method:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 只有第一次调用才执行&#xA;func (o *Once) Do(f func())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;mutex&#34;&gt;Mutex&lt;/h2&gt;&#xA;&lt;p&gt;互斥锁,锁和线程无关，可以由不同的线程加锁和解锁.&lt;/p&gt;&#xA;&lt;p&gt;Mutex的初始值为未锁的状态，并且Mutex通常作为结构体的匿名成员存在。&lt;/p&gt;&#xA;&lt;p&gt;同一时刻只能有一个线程进入临界区.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Mutex struct {}&#xA;&#xA;Mutex&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;method:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 加锁，如果已经加锁，阻塞至m解锁．&#xA;func (m *Mutex) Lock()&#xA;&#xA;// 解锁，如果没有加锁，导致panic&#xA;func (m *Mutex) Unlock()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;rwmutex&#34;&gt;RWMutex&lt;/h2&gt;&#xA;&lt;p&gt;读写互斥锁,可以由不同的线程加锁和解锁.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type RWMutex struct {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;method:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 锁定为写入状态，禁止其它线程读写，一次只能有一个线程持有。&#xA;func (rw *RWMutex) Lock()&#xA;&#xA;// 解除写入锁定，如果没有加锁，导致panic&#xA;func (rw *RWMutex) Unlock()&#xA;&#xA;// 锁定为读取状态，禁止其他线程写入，多个线程可以同时持有读锁。&#xA;func (rw *RWMutex) RLock()&#xA;&#xA;// 解除读取锁，如果没有加锁，导致panic.&#xA;func (rw *RWMutex) RUnlock()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cond&#34;&gt;Cond&lt;/h2&gt;&#xA;&lt;p&gt;条件变量.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_cryptographic</title>
      <link>https://canuxcheng.com/post/gsl_cryptographic/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_cryptographic/</guid>
      <description>&lt;h1 id=&#34;crypto&#34;&gt;crypto&lt;/h1&gt;&#xA;&lt;p&gt;收集了常用的密码常量&lt;/p&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;RegisterHash(h Hash, f func() hash.Hash)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;publickey&#34;&gt;PublicKey&lt;/h2&gt;&#xA;&lt;p&gt;interface:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type PublicKey interface{}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;privatekey&#34;&gt;PrivateKey&lt;/h2&gt;&#xA;&lt;p&gt;interface:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type PrivateKey interface{}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;hash&#34;&gt;Hash&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Hash uint&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;method:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func (h Hash) Avaliable() bool&#xA;func (h Hash) Size() int&#xA;func (h Hash) New() hash.Hash&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cryptocipher&#34;&gt;crypto/cipher&lt;/h1&gt;&#xA;&lt;p&gt;用于包装底层块加密算法的实现.&lt;/p&gt;&#xA;&lt;h2 id=&#34;block&#34;&gt;Block&lt;/h2&gt;&#xA;&lt;p&gt;代表一个使用特定密钥的底层　加／解密器．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Block interface {&#xA;    BlockSize() int&#xA;    Encrypt(dst, src []byte)&#xA;    Decrypt(dst, src []byte)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;blockmode&#34;&gt;BlockMode&lt;/h2&gt;&#xA;&lt;p&gt;代表一个工作在块模式(CBC, ECB等)的加／解密器&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type BlockMode interface {&#xA;    BlockSize() int&#xA;    CryptBlocks(dst, src []byte)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;function:&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_data</title>
      <link>https://canuxcheng.com/post/gsl_data/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_data/</guid>
      <description>&lt;h1 id=&#34;time&#34;&gt;time&lt;/h1&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;&#xA;&lt;p&gt;const:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const (&#xA;    ANSIC       = &amp;quot;Mon Jan _2 15:04:05 2006&amp;quot;&#xA;    Unixdate    = &amp;quot;Mon Jan _2 15:04:05 MST 2006&amp;quot;&#xA;    RFC3339     = &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot;&#xA;    ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 阻塞go程d代表的时间段&#xA;func Sleep(d Duration)&#xA;&#xA;func After(d Duration) &amp;lt;- chan Time&#xA;&#xA;func Tick(d Duration) &amp;lt;- chan Time&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;time-1&#34;&gt;Time&lt;/h2&gt;&#xA;&lt;p&gt;代表一个纳秒精度的时间点.&lt;/p&gt;&#xA;&lt;p&gt;零值是January 1, year 1, 00:00:00.000000000 UTC.&lt;/p&gt;&#xA;&lt;p&gt;struct:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type  Time struct {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 格式化一个时间, eg:　2009-11-10 15:00:00 -0800 PST&#xA;func date(year int, month Month, day, hour, min, sec, nsec int, loc *Location) Time&#xA;&#xA;// 返回当前本地时间, eg: 2018-03-18 12:16:55.842029 +0800 CST m=+0.001962301&#xA;func Now() Time&#xA;&#xA;func Parse(layout, value s tring) (Time, error)&#xA;&#xA;func ParseInLocation(layout, value string, loc *Location) (Time, error)&#xA;&#xA;func Unix(sec int64, nsec int64) Time&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;methods:&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_database</title>
      <link>https://canuxcheng.com/post/gsl_database/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_database/</guid>
      <description>&lt;h1 id=&#34;databasesql&#34;&gt;database/sql&lt;/h1&gt;&#xA;&lt;p&gt;使用该包，必须提供一个数据库驱动&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/SQLDrivers&#34;&gt;https://github.com/golang/go/wiki/SQLDrivers&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;mssql driver:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/denisenkom/go-mssqldb&#34;&gt;https://github.com/denisenkom/go-mssqldb&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;mysql driver:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34;&gt;https://github.com/go-sql-driver/mysql&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;postgresql driver:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lib/pq&#34;&gt;https://github.com/lib/pq&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jackc/pgx&#34;&gt;https://github.com/jackc/pgx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;// QueryRow 没有返回row时，调用返回值的Scan方法会返回该变量&#xA;var ErrNoRows = errors.New(&amp;quot;sql: no rows in result set&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 注册并命名一个数据库，在Open中使用该命名启用该驱动&#xA;// 如果注册同一名称两次或者driver参数为nil, 会导致panic.&#xA;Register(name string, driver driver.Driver)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;db&#34;&gt;DB&lt;/h2&gt;&#xA;&lt;p&gt;DB是一个数据库句柄，代表一个具有零到多个底层连接的连接池．&lt;/p&gt;&#xA;&lt;p&gt;可以安全的被多个go程同时使用．&lt;/p&gt;&#xA;&lt;p&gt;struct:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type DB struct {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 验证数据库驱动和参数,并不创建和数据库的连接．&#xA;// driverName: mssql, mysql, postgres&#xA;// mssql dataSourceName: &amp;quot;server=%s;port=%d;database=%s;user id=%s;password=%s&amp;quot;&#xA;// mysql dataSourceName: &amp;quot;user:password@tcp(server:port)/database&amp;quot;&#xA;Open(driverName, dataSourceName string) (*DB, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;methods:&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_file</title>
      <link>https://canuxcheng.com/post/gsl_file/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_file/</guid>
      <description>&lt;h1 id=&#34;path&#34;&gt;path&lt;/h1&gt;&#xA;&lt;h2 id=&#34;function&#34;&gt;function&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;func IsAbs(path string) bool&#xA;func Join(elem ...string) string&#xA;func Split(path string) (dir, file string)&#xA;func Join(elem ...string) string&#xA;func Dir(path string) string&#xA;func Base(path string) string&#xA;func Ext(path string) string &#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;pathfilepath&#34;&gt;path/filepath&lt;/h1&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;Constants&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;const (&#xA;    Separator = os.PathSeparator&#xA;    ListSeparator = os.PathListSeparator&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;variable&#34;&gt;Variable&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;var ErrBadPattern = errors.New(&amp;quot;Syntax error in pattern&amp;quot;)&#xA;&#xA;var SkipDir = errors.New(&amp;quot;skip this diractory&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;function-1&#34;&gt;function&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;func IsAbs(path string) bool&#xA;func Abs(path string) (string, error)&#xA;&#xA;// 返回 targpath 相对于 basepath 的 路径 （相当于返回 targpath - basepath), 实际就是文件名.&#xA;func Rel(basepath, targpath string) (string, error)&#xA;&#xA;func Split(path string) (dir, file string)&#xA;func Join(elem ...string) string&#xA;func Dir(path string) string&#xA;func Base(path string) string&#xA;func Ext(path string) string) // 包括小数点&#xA;func Walk(root string, walkFn WalkFunc) error&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;walkfunc&#34;&gt;WalkFunc&lt;/h2&gt;&#xA;&lt;p&gt;调用Walk时会对每个目录和文件调用该函数.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_golang</title>
      <link>https://canuxcheng.com/post/gsl_golang/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_golang/</guid>
      <description>&lt;h1 id=&#34;runtime&#34;&gt;runtime&lt;/h1&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 指定编译器&#xA;const Compiler = &amp;quot;gc&amp;quot;/&amp;quot;gccgo&amp;quot;&#xA;&#xA;// 处理器架构: 386/amd64/arm&#xA;const GOARCH string = theGoarch&#xA;&#xA;// 操作系统: linux/freebsd/darwin/win&#xA;const GOOS string = theGoos&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;var MemProfileRate int = 512 * 1024&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;func GOROOT() string&#xA;func Version() string&#xA;&#xA;// 返回本地机器的逻辑cpu个数&#xA;func NumCPU() int&#xA;&#xA;//更改调度器可以使用的逻辑cpu数量, 默认只用一个cpu.&#xA;func GOMAXPROCS(n int) int&#xA;&#xA;// 使当前goroutine让出绑定的cpu,其它goroutine可以继续执行.&#xA;// 当前goroutine放回队列等待继续执行.&#xA;func Gosched()&#xA;&#xA;// 终止当前goroutine,终止前执行所有defer.&#xA;func Goexit()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;runtimedebug&#34;&gt;runtime/debug&lt;/h1&gt;&#xA;&lt;h2 id=&#34;function&#34;&gt;function&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 设置最大线程数，默认1000.&#xA;func SetMaxThreads(threads int) int&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;runtimecgo&#34;&gt;runtime/cgo&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;runtimepprof&#34;&gt;runtime/pprof&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;runtimerace&#34;&gt;runtime/race&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;runtimetrace&#34;&gt;runtime/trace&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;go&#34;&gt;go&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;expvar&#34;&gt;expvar&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;context&#34;&gt;context&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;unsafe&#34;&gt;unsafe&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;errors&#34;&gt;errors&lt;/h1&gt;&#xA;&lt;h2 id=&#34;function-1&#34;&gt;function&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 使用字符串创建一个错误, 返回一个error&#xA;func New(text string) error&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>GSL_math</title>
      <link>https://canuxcheng.com/post/gsl_math/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_math/</guid>
      <description>&lt;h1 id=&#34;math&#34;&gt;math&lt;/h1&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;mathbig&#34;&gt;math/big&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;mathcmplx&#34;&gt;math/cmplx&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;mathrand&#34;&gt;math/rand&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sort&#34;&gt;sort&lt;/h1&gt;&#xA;&lt;h2 id=&#34;functions-1&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;func Ints(a []int)&#xA;func IntAreSorted(a []int) bool&#xA;func SearchInts(a []int, x int) int&#xA;&#xA;func Float64s(a []float64)&#xA;func Float64sArerSorted(a []float64) bool&#xA;func SearchFloat64s(a []float64, x float64) int&#xA;&#xA;func Strings(a []string)&#xA;func StringsAreSorted(a []string) bool&#xA;func SearchStrings(a []string, x string) int&#xA;&#xA;func Sort(data Interface)&#xA;func Stable(data Interface)&#xA;func IsSorted(data Interface) bool&#xA;func Reverse(data Interface) Interface&#xA;// 二分查找&#xA;func Search(n int, f func(int) bool) int&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;interface&#34;&gt;Interface&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Interface interface {&#xA;    Len() int&#xA;    Less(i, j int) bool&#xA;    Swap(i, j int)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;initslice&#34;&gt;InitSlice&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;type InitSlice []int&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;float64slice&#34;&gt;Float64Slice&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Float64Slice []float64&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;stringslice&#34;&gt;StringSlice&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;type StringSlice []string&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>GSL_multimedia</title>
      <link>https://canuxcheng.com/post/gsl_multimedia/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_multimedia/</guid>
      <description>&lt;h1 id=&#34;image&#34;&gt;image&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;mime&#34;&gt;mime&lt;/h1&gt;</description>
    </item>
    <item>
      <title>GSL_network</title>
      <link>https://canuxcheng.com/post/gsl_network/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_network/</guid>
      <description>&lt;h1 id=&#34;net&#34;&gt;net&lt;/h1&gt;&#xA;&lt;p&gt;网络IO接口，包括TCP/IP, UDP, SOCKET, DNS&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import &amp;quot;net&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;const (&#xA;    IPv4len = 4&#xA;    IPv6len = 16&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;h2 id=&#34;addr&#34;&gt;Addr&lt;/h2&gt;&#xA;&lt;p&gt;代表一个网络终端地址．&lt;/p&gt;&#xA;&lt;p&gt;TCPAddr, UDPAddr, IPAddr, UnixAddr 都实现了该接口&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Addr interface {&#xA;    Network() string&#xA;    String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;tcpaddr&#34;&gt;TCPAddr&lt;/h2&gt;&#xA;&lt;p&gt;function:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func ResolveTCPAddr(net, addr string) (*TCPAddr, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;udpaddr&#34;&gt;UDPAddr&lt;/h2&gt;&#xA;&lt;p&gt;function:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func ResolveUDPAddr(net, addr string) (*UDPAddr, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;ipaddr&#34;&gt;IPAddr&lt;/h2&gt;&#xA;&lt;p&gt;function:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func ResolveIPAddr(net, addr string) (*IPAddr, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;unixaddr&#34;&gt;UnixAddr&lt;/h2&gt;&#xA;&lt;p&gt;function:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func ResolveUnixAddr(net, addr string) (*UnixAddr, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;conn&#34;&gt;Conn&lt;/h2&gt;&#xA;&lt;p&gt;该接口代表通用的面向流的网络连接．&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_oop</title>
      <link>https://canuxcheng.com/post/gsl_oop/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_oop/</guid>
      <description>&lt;h1 id=&#34;reflect&#34;&gt;reflect&lt;/h1&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;&#xA;&lt;p&gt;const:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const (&#xA;    SelectSend&#xA;    SelectRecv&#xA;    SelectDefault&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 将src拷贝到dst, 直到src被耗尽或dst被装满.&#xA;func Copy(dst, src Value) int&#xA;&#xA;// 判断两个值是否深度一致&#xA;func DeepEqual(a1, a2 interface{}) bool&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;kind&#34;&gt;Kind&lt;/h2&gt;&#xA;&lt;p&gt;表示Type类型值表示的具体分类.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Kind uint&#xA;&#xA;const (&#xA;    Invalid Kind = iota&#xA;    Bool&#xA;    Int&#xA;    ...&#xA;    Uint&#xA;    ...&#xA;    Float...&#xA;    Complex...&#xA;    Array&#xA;    Chan&#xA;    Func&#xA;    Interface&#xA;    Map&#xA;    Ptr&#xA;    Slice&#xA;    String&#xA;    Struct&#xA;    UnsafePointer&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;method:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func (k Kind) String() string&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;stringheader&#34;&gt;StringHeader&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sliceheader&#34;&gt;SliceHeader&lt;/h2&gt;&#xA;&lt;h2 id=&#34;structfield&#34;&gt;StructField&lt;/h2&gt;&#xA;&lt;h2 id=&#34;structtag&#34;&gt;StructTag&lt;/h2&gt;&#xA;&lt;h2 id=&#34;chandir&#34;&gt;ChanDir&lt;/h2&gt;&#xA;&lt;h2 id=&#34;selectdir&#34;&gt;SelectDir&lt;/h2&gt;&#xA;&lt;h2 id=&#34;selectcase&#34;&gt;SelectCase&lt;/h2&gt;&#xA;&lt;h2 id=&#34;method&#34;&gt;Method&lt;/h2&gt;&#xA;&lt;h2 id=&#34;type&#34;&gt;Type&lt;/h2&gt;&#xA;&lt;p&gt;用来表示一个go类型.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_string</title>
      <link>https://canuxcheng.com/post/gsl_string/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_string/</guid>
      <description>&lt;h1 id=&#34;strings&#34;&gt;strings&lt;/h1&gt;&#xA;&lt;p&gt;实现了用于操作字符的函数.&lt;/p&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;func EqualFold(s, t string) bool&#xA;&#xA;func HasPrefix(s, prefix string) bool&#xA;func HasSuffix(s, suffix string) bool&#xA;&#xA;func Count(s, sep string) int&#xA;&#xA;func Contains(s, substr string) bool&#xA;...&#xA;&#xA;func Index(s, sep string) int&#xA;...&#xA;&#xA;func LastIndex(s, sep string) int&#xA;...&#xA;&#xA;func title(s string) string&#xA;&#xA;func ToLower(s string) string&#xA;...&#xA;&#xA;// 返回count个string&#xA;func Repeat(s string, count int) string&#xA;&#xA;func Replace(s, old, new string, n int) string&#xA;&#xA;func Map(mapping func(rune) rune, s string) string&#xA;&#xA;func Trim(s string, cutset string) string&#xA;...&#xA;&#xA;// 返回将字符串按照空白分割的多个字符串&#xA;func Fields(s string) []string&#xA;// 按照f作为分隔符来分割字符串，返回切片&#xA;func FieldsFunc(s string, f func(rune) bool) []string&#xA;&#xA;func Split(s, sep string) []string&#xA;...&#xA;&#xA;// 将一系列字符串连接为一个字符串，之间用sep来分割.&#xA;func Join(a []string, sep string) string&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;reader&#34;&gt;Reader&lt;/h2&gt;&#xA;&lt;h2 id=&#34;replacer&#34;&gt;Replacer&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;bytes&#34;&gt;bytes&lt;/h1&gt;&#xA;&lt;p&gt;实现了操作[]bytes的常用函数.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_system</title>
      <link>https://canuxcheng.com/post/gsl_system/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_system/</guid>
      <description>&lt;h1 id=&#34;os&#34;&gt;os&lt;/h1&gt;&#xA;&lt;p&gt;提供了操作系统的不依赖平台的接口&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import &amp;quot;os&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# flag 参数&#xA;const (&#xA;    O_RDONLY int = syscall.O_RDONLY&#xA;    O_WRONLY int = syscall.O_WRONLY&#xA;    O_RDWR int = syscall.O_RDWR&#xA;    O_CREATE int = syscall.O_CREATE # 不存在就创建&#xA;    O_APPEND int = syscall.O_APPEND # 追加写入&#xA;    O_TRUNC int = syscall.O_TRUNC # 打开时清空文件&#xA;    O_EXCL int = syscall.O_EXCL&#xA;    O_SYNC int = syscall.O_SYNC&#xA;)&#xA;&#xA;const (&#xA;    SEEK_SET int = 0&#xA;    SEEK_CUR int = 1&#xA;    SEEK_END int = 2&#xA;)&#xA;&#xA;const (&#xA;    // 操作系统指定的路径分隔符&#xA;    PathSeperator = &#39;/&#39;&#xA;    // 操作系统指定的表分隔符&#xA;    PathListSeparator = &#39;:&#39;&#xA;)&#xA;&#xA;// 操作系统空设备的名字&#xA;const DevNull = &amp;quot;/dev/null&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;var (&#xA;    ErrInvalid = errors.New(&amp;quot;invalid argument&amp;quot;)&#xA;    ...&#xA;)&#xA;&#xA;// 指向标准输入／输出／错误的文件描述符&#xA;var (&#xA;    Stdin = NewFile(uintptr(syscall.Stdin), &amp;quot;/dev/stdin&amp;quot;)&#xA;    Stdout = NewFile(uintptr(syscall.Stdout), &amp;quot;/dev/stdout&amp;quot;)&#xA;    Stderr = NewFile(uintptr(syscall.Stderr), &amp;quot;/dev/stderr&amp;quot;)&#xA;)&#xA;&#xA;// 保存了命令行参数，第一个是程序名&#xA;var Args []string&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 返回内核提供的主机名&#xA;func Hostname() (name string, err error)&#xA;&#xA;// 当前程序以给出的状态码马上退出，defer不会执行&#xA;func Exit(code int)&#xA;&#xA;// 返回key=value格式的环境变量的字符串的切片拷贝&#xA;func Environ() []string&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;文件相关的操作&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSL_test</title>
      <link>https://canuxcheng.com/post/gsl_test/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/gsl_test/</guid>
      <description>&lt;h1 id=&#34;testing&#34;&gt;testing&lt;/h1&gt;&#xA;&lt;p&gt;go的测试由go test命令和testing包组成．&lt;/p&gt;&#xA;&lt;p&gt;测试程序命名：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;XXX.go # 测试文件和源码放在一个包中&#xA;XXX_test.go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;测试程序结构：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import &amp;quot;testing&amp;quot;&#xA;&#xA;# 单元测试&#xA;# go test 会自动执行&#xA;func TestXXX(t *testing.T) {}&#xA;&#xA;# 性能测试&#xA;# go test XXX_test.go -test.bench=&amp;quot;.*&amp;quot;  压力测试需要指定才能执行&#xA;func BenchmarkXXX(b *testing.B) {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;constants&#34;&gt;constants&lt;/h2&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;&#xA;&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;&#xA;&lt;h2 id=&#34;t&#34;&gt;T&lt;/h2&gt;&#xA;&lt;p&gt;管理测试状态并支持格式化测试的日志．&lt;/p&gt;&#xA;&lt;p&gt;struct:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type T struct {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;methods:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 将当前测试标识为失败，但继续执行该文件剩下的测试&#xA;func (c *T) Fail()&#xA;&#xA;// 将当前测试标识为失败，并停止执行该测试, 继续执行下一个测试文件.&#xA;func (c *T) FailNow()&#xA;&#xA;// 用于报告测试函数是否失败&#xA;func (c *T) Failed() bool&#xA;&#xA;func (c *T) Log(args ...interface{})&#xA;func (c *T) Logf(format string, args ...interface{})&#xA;&#xA;# 相当于Log/Logf之后调用Fail.(当前case失败)&#xA;func (c *T) Error(args ...interface{})&#xA;func (c *T) Errorf(format string, args ...interface{})&#xA;&#xA;# 相当于Log/Logf之后调用FailNow.(当前测试文件失败)&#xA;func (c *T) Fatal(args ...interface{})&#xA;func (c *T) Fatalf(format string, args ...interface{})&#xA;&#xA;func (c *T) Skip(args ...interface{})&#xA;func (c *T) SkipNow()&#xA;func (c *T) Skipf(format string, args ...interface{})&#xA;func (c *T) Skipped() bool&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;b&#34;&gt;B&lt;/h2&gt;&#xA;&lt;p&gt;管理基准测试的计时行为，并指示应该迭代的运行测试多少次.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OOP</title>
      <link>https://canuxcheng.com/post/go_oop/</link>
      <pubDate>Mon, 01 Jan 2018 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/go_oop/</guid>
      <description>&lt;h1 id=&#34;go面向对象&#34;&gt;Go面向对象&lt;/h1&gt;&#xA;&lt;p&gt;golang通过方法和接口实现面向对象.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;方法method&#34;&gt;方法/method&lt;/h1&gt;&#xA;&lt;p&gt;go中没有类，但是可以为结构体定义方法．&lt;/p&gt;&#xA;&lt;p&gt;方法就是一类带有特殊的　接收者参数　的函数．&lt;/p&gt;&#xA;&lt;p&gt;只能为同一包内定义的类型的接收者申明方法，不能为其它包内定义的类型的接收者申明方法．&lt;/p&gt;&#xA;&lt;p&gt;除了结构体还可以为非结构体申明方法，但是不能为内建类型申明方法．&lt;/p&gt;&#xA;&lt;p&gt;方法有两种接收者,值接收者和指针接收者.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Vertex struct {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;值接收者:&lt;/p&gt;&#xA;&lt;p&gt;值接收者操作的是值的副本.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func (v Vertex) MethodName() rType {&#xA;    ...&#xA;}&#xA;&#xA;var v Vertex&#xA;v.MethodName() // 操作值的副本&#xA;&#xA;# 使用指针接收者来调用值接收者的方法，编译器会自动做类型转换&#xA;vp := new(Vertex)&#xA;vp.MethodName() // 指针被解引用为值,(*vp).MethodName(),操作的是指针指向的值的副本.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;指针接收者：&lt;/p&gt;&#xA;&lt;p&gt;指针接收者，调用方法的时候操作的是该指针指向的值.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 指针接收者的方法可以修改接收者指向的值&#xA;func (v *Vertex) MethodName() rType {&#xA;    ...&#xA;}&#xA;&#xA;vp := new(Vertex)&#xA;vp.MethodName() // 操作实际的值&#xA;&#xA;# 使用值接收者来调用指针接收者的方法，编译器会自动做类型转换.&#xA;var v Vertex&#xA;v.MethodName() // (&amp;amp;v).MethodName() , 操作的是实际的值&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;接口interface&#34;&gt;接口/Interface&lt;/h1&gt;&#xA;&lt;p&gt;接口是引用类型.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rabbitmq</title>
      <link>https://canuxcheng.com/post/rabbitmq/</link>
      <pubDate>Mon, 25 Sep 2017 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/rabbitmq/</guid>
      <description>&lt;h1 id=&#34;amqp&#34;&gt;AMQP&lt;/h1&gt;&#xA;&lt;p&gt;AMQP: Advanced Message Queuing Protocol,高级消息队列协议&lt;/p&gt;&#xA;&lt;p&gt;常用的开源AMQP框架：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rabbitmq&#34;&gt;https://github.com/rabbitmq&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/kafka&#34;&gt;https://github.com/apache/kafka&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/activemq&#34;&gt;https://github.com/apache/activemq&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;mqtt&#34;&gt;MQTT&lt;/h1&gt;&#xA;&lt;p&gt;MQTT: Message Queuing Telemetry Transport,消息队列遥测传输协议&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;rabbitmq&#34;&gt;Rabbitmq&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rabbitmq&#34;&gt;https://github.com/rabbitmq&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;RabbitMQ是一个erlang开发的符合AMQP和MQTT的开源项目．&lt;/p&gt;&#xA;&lt;p&gt;rabbitmq-server也叫broker server&lt;/p&gt;&#xA;&lt;p&gt;rabbitmq的三个组件：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;exchange,　交换器，发送消息的实体&lt;/li&gt;&#xA;&lt;li&gt;binding, 绑定器，连接交换器和队列，并且封装消息的路由信息&lt;/li&gt;&#xA;&lt;li&gt;queue,　队列，接受消息的实体&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;workflow:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;producer(publish-message) =&amp;gt;&#xA;&#xA;rabbitmq-server =&amp;gt; exchange -&amp;gt; binding -&amp;gt; queue =&amp;gt;&#xA;&#xA;=&amp;gt; comsumer&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;producer: 生产message并且publish到rabbitmq-server.&lt;/p&gt;&#xA;&lt;p&gt;consumer: 连接到rabbitmq-server并且subscribe一些queue.&lt;/p&gt;&#xA;&lt;p&gt;connection: producer和consumer都是通过tcp连接到rabbitmq-server.&lt;/p&gt;&#xA;&lt;p&gt;channels: 建立在tcp连接中的虚拟连接，用于处理数据流动.&lt;/p&gt;&#xA;&lt;p&gt;queue:　生产者和消费者都应该创建queue.(只能通过exchange接收message)&lt;/p&gt;&#xA;&lt;p&gt;exchanges类型:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fanout: 所有绑定到此exchange的queue都可以接收消息&lt;/li&gt;&#xA;&lt;li&gt;direct: 通过routingKey和exchange决定的那个唯一的queue可以接收消息&lt;/li&gt;&#xA;&lt;li&gt;topic：所有符合routingKey(此时可以是一个表达式)的routingKey所bind的queue可以接收消息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;message类型:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;messages: 生产者产生的总消息数．&lt;/li&gt;&#xA;&lt;li&gt;messages_ready: 等待deliver给消费者的消息．&lt;/li&gt;&#xA;&lt;li&gt;messages_unack: 已经被consumer处理，但是没有被ack的消息．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;virtual hosts: 本质就是一个rabbitmq server,拥有独立的exchange,queue.默认是/(%2F).&lt;/p&gt;&#xA;&lt;p&gt;round-robin dispatch: 循环分发，按顺序分发message到consumer,如果message被consumer正确接收，就会从queue中移除．&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rpc</title>
      <link>https://canuxcheng.com/post/rpc/</link>
      <pubDate>Sun, 03 Sep 2017 14:46:19 +0000</pubDate>
      <guid>https://canuxcheng.com/post/rpc/</guid>
      <description>&lt;h1 id=&#34;rpc&#34;&gt;RPC&lt;/h1&gt;&#xA;&lt;p&gt;Remote Procedure Call Protocol: 远程过程调用.&lt;/p&gt;&#xA;&lt;p&gt;google的rpc框架，支持多语言:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/grpc&#34;&gt;https://github.com/grpc/grpc&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;facebook的rpc框架，贡献给了apache, 支持多语言:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/thrift&#34;&gt;https://github.com/apache/thrift&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Germany</title>
      <link>https://canuxcheng.com/post/travel_germany/</link>
      <pubDate>Mon, 08 May 2017 16:41:50 +0000</pubDate>
      <guid>https://canuxcheng.com/post/travel_germany/</guid>
      <description>&lt;h1 id=&#34;德国之旅&#34;&gt;德国之旅&lt;/h1&gt;&#xA;&lt;p&gt;看照片：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://user.qzone.qq.com/1085694641/4&#34;&gt;http://user.qzone.qq.com/1085694641/4&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;德国是汽车之都。&lt;/p&gt;&#xA;&lt;p&gt;德国有16个州。&lt;/p&gt;&#xA;&lt;h1 id=&#34;城市州&#34;&gt;城市州&lt;/h1&gt;&#xA;&lt;p&gt;德国16个州中的三个城市州&lt;/p&gt;&#xA;&lt;h2 id=&#34;柏林&#34;&gt;柏林&lt;/h2&gt;&#xA;&lt;p&gt;德国首都。&lt;/p&gt;&#xA;&lt;p&gt;德国第一大城市。&lt;/p&gt;&#xA;&lt;h2 id=&#34;汉堡&#34;&gt;汉堡&lt;/h2&gt;&#xA;&lt;p&gt;德国第二大城市。&lt;/p&gt;&#xA;&lt;h2 id=&#34;不来梅&#34;&gt;不来梅&lt;/h2&gt;&#xA;&lt;h1 id=&#34;巴伐利亚州拜仁洲&#34;&gt;巴伐利亚州(拜仁洲)&lt;/h1&gt;&#xA;&lt;p&gt;慕尼黑是首府。&lt;/p&gt;&#xA;&lt;h2 id=&#34;慕尼黑&#34;&gt;慕尼黑&lt;/h2&gt;&#xA;&lt;p&gt;慕尼黑的奥特莱斯位于Ingolstadt Village。&lt;/p&gt;&#xA;&lt;p&gt;奥迪的总部位于慕尼黑的Ingolstadt。&lt;/p&gt;&#xA;&lt;p&gt;宝马总部位于慕尼黑。&lt;/p&gt;&#xA;&lt;p&gt;德国第三大城市。&lt;/p&gt;&#xA;&lt;h2 id=&#34;纽伦堡&#34;&gt;纽伦堡&lt;/h2&gt;&#xA;&lt;h2 id=&#34;奥格斯堡&#34;&gt;奥格斯堡&lt;/h2&gt;&#xA;&lt;h2 id=&#34;非森&#34;&gt;非森&lt;/h2&gt;&#xA;&lt;p&gt;天鹅堡的所在地Fussen。&lt;/p&gt;&#xA;&lt;h1 id=&#34;巴登符腾堡州&#34;&gt;巴登符腾堡州&lt;/h1&gt;&#xA;&lt;p&gt;斯图加特是首府。&lt;/p&gt;&#xA;&lt;h2 id=&#34;斯图加特&#34;&gt;斯图加特&lt;/h2&gt;&#xA;&lt;p&gt;斯图加特的奥特莱斯位于Metzingen Village。&lt;/p&gt;&#xA;&lt;p&gt;保时捷的总部。&lt;/p&gt;&#xA;&lt;p&gt;奔驰的总部。&lt;/p&gt;&#xA;&lt;h1 id=&#34;黑森州&#34;&gt;黑森州&lt;/h1&gt;&#xA;&lt;p&gt;威斯巴登是首府。&lt;/p&gt;&#xA;&lt;h2 id=&#34;威斯巴登&#34;&gt;威斯巴登&lt;/h2&gt;&#xA;&lt;h2 id=&#34;法兰克福&#34;&gt;法兰克福&lt;/h2&gt;&#xA;&lt;p&gt;该州最大城市,法国第五大城市。&lt;/p&gt;&#xA;&lt;p&gt;法兰克福的奥特莱斯位于Wertheim Village。&lt;/p&gt;&#xA;&lt;h1 id=&#34;北莱茵-威斯特法伦州&#34;&gt;北莱茵-威斯特法伦州&lt;/h1&gt;&#xA;&lt;p&gt;杜塞尔多夫是首府。&lt;/p&gt;&#xA;&lt;h2 id=&#34;杜塞尔多夫&#34;&gt;杜塞尔多夫&lt;/h2&gt;&#xA;&lt;h2 id=&#34;科隆&#34;&gt;科隆&lt;/h2&gt;&#xA;&lt;p&gt;该州最大城市，德国第四大城市。&lt;/p&gt;&#xA;&lt;h1 id=&#34;下萨克森州&#34;&gt;下萨克森州&lt;/h1&gt;&#xA;&lt;p&gt;汉诺威是首府。&lt;/p&gt;&#xA;&lt;h2 id=&#34;汉诺威&#34;&gt;汉诺威&lt;/h2&gt;&#xA;&lt;h2 id=&#34;沃尔夫斯堡&#34;&gt;沃尔夫斯堡&lt;/h2&gt;&#xA;&lt;p&gt;大众总部。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hadoop MapReduce</title>
      <link>https://canuxcheng.com/post/hadoop_mapreduce/</link>
      <pubDate>Wed, 03 May 2017 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/hadoop_mapreduce/</guid>
      <description>&lt;h1 id=&#34;map-reduce&#34;&gt;Map-Reduce&lt;/h1&gt;&#xA;&lt;p&gt;一种基于YARN的大型数据并行处理系统．主要处理离线数据．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;mapreduce-commands&#34;&gt;mapreduce commands&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;mapred [SHELL_OPTIONS] COMMAND [GENERIC_OPTIONS] [COMMAND_OPTIONS]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;user commands:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ mapred archive&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;admin commands:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ mapred historyserver&#xA;&#xA;$ mapred hsadmin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Redis</title>
      <link>https://canuxcheng.com/post/redis/</link>
      <pubDate>Wed, 03 May 2017 14:46:14 +0000</pubDate>
      <guid>https://canuxcheng.com/post/redis/</guid>
      <description>&lt;h1 id=&#34;redis&#34;&gt;Redis&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://redisdoc.com/&#34;&gt;http://redisdoc.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;redis在key-value存储上性能比memcached更好．&lt;/p&gt;&#xA;&lt;p&gt;安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# redis-cli, redis-sentinel, redis-server&#xA;$ sudo apt-get install redis-server&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;只安装redis-cli:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install redis-tools&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;redis-server监听端口6379.&lt;/p&gt;&#xA;&lt;p&gt;redis-sentinel端口26379.&lt;/p&gt;&#xA;&lt;p&gt;redis gui:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qishibo/AnotherRedisDesktopManager&#34;&gt;https://github.com/qishibo/AnotherRedisDesktopManager&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/luin/medis&#34;&gt;https://github.com/luin/medis&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;redis HA:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CodisLabs/codis&#34;&gt;https://github.com/CodisLabs/codis&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;redis的命令&#34;&gt;redis的命令&lt;/h1&gt;&#xA;&lt;p&gt;server:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;redis-server&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;client:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;redis-client&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;test:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;redis-benchmark&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;sentinel:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;redis-sentinel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;&#xA;&lt;p&gt;redis-cli 进入命令行模式&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; command    # 查看所有可用命令&#xA;&#xA;&amp;gt; info    # 查看redis服务器信息&#xA;&#xA;&amp;gt; monitor&#xA;&#xA;&amp;gt; select 1 # 选中数据库1&#xA;&amp;gt; keys *  # 显示所有key&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;&#xA;&lt;p&gt;string&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; set &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&#xA;&amp;gt; get &amp;lt;key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;list&lt;/p&gt;</description>
    </item>
    <item>
      <title>Smtp</title>
      <link>https://canuxcheng.com/post/smtp/</link>
      <pubDate>Wed, 26 Apr 2017 09:56:04 +0000</pubDate>
      <guid>https://canuxcheng.com/post/smtp/</guid>
      <description>&lt;h1 id=&#34;email&#34;&gt;Email&lt;/h1&gt;&#xA;&lt;p&gt;MTA: Mail Transfer Agent&lt;/p&gt;&#xA;&lt;p&gt;MUA: Mail User Agent&lt;/p&gt;&#xA;&lt;p&gt;python邮件服务器MTA：smtp协议&lt;/p&gt;&#xA;&lt;p&gt;python客户端MUA：本地协议pop3, 远程协议imap&lt;/p&gt;&#xA;&lt;h2 id=&#34;mailutils&#34;&gt;mailutils:&lt;/h2&gt;&#xA;&lt;p&gt;mailutils默认安装postfix,如果已经安装其它MTA就使用已经安装的．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install mailutils&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;非交互安装mailutils:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 这里不用配置任何参数．&#xA;$ sudo debconf-set-selections &amp;lt;&amp;lt;&amp;lt; &amp;quot;postfix postfix/mailname string &amp;quot;&#xA;$ sudo debconf-set-selections &amp;lt;&amp;lt;&amp;lt; &amp;quot;postfix postfix/main_mailer_type string &#39;Internet Site&#39;&amp;quot;&#xA;$ sudo apt-get install -y mailutils&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;测试：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;test mail body&amp;quot; | mail -s &amp;quot;test mail title&amp;quot; canuxcheng@gmail.com&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sendmail&#34;&gt;sendmail&lt;/h1&gt;&#xA;&lt;p&gt;开源的smtp服务器．&lt;/p&gt;&#xA;&lt;p&gt;安装sendmail:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install sendmail&#xA;$ sudo apt-get install sendmail-cf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>HAWQ</title>
      <link>https://canuxcheng.com/post/hawq/</link>
      <pubDate>Mon, 24 Apr 2017 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/hawq/</guid>
      <description>&lt;h1 id=&#34;hawq&#34;&gt;HAWQ&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://hawq.incubator.apache.org/&#34;&gt;http://hawq.incubator.apache.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/incubator-hawq&#34;&gt;https://github.com/apache/incubator-hawq&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;HAWQ是在Pivotal Greenplum和PostgreSQL基础上开发而来．&lt;/p&gt;&#xA;&lt;p&gt;HAWQ也就是Pivotal HDB.&lt;/p&gt;&#xA;&lt;p&gt;HAWQ和Pivotal　HDB是一个项目．&lt;/p&gt;&#xA;&lt;p&gt;Hortonworks公司的HDP集成了HAWQ.&lt;/p&gt;&#xA;&lt;p&gt;HAWQ可以通过HDFS在本机快速，交互查询hadoop数据．&lt;/p&gt;&#xA;&lt;p&gt;hawq的交互式命令行接口, 类似于postgresql, 参考postgresql.&lt;/p&gt;&#xA;&lt;p&gt;hawq的client: psql (参考postgresql)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;psql&#34;&gt;psql&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ psql&#xA;$ PGPASSWORD=&#39;password&#39;;psql -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; -U &amp;lt;username&amp;gt; -d [database] -c &amp;quot;[psql command]&amp;quot;&#xA;$ psql -l # 查看所有database&#xA;&#xA;# jdbc&#xA;$ jdbc:pivotal:greenplum://hdm1:5432;DatabaseName=getstartdb;User=hdbuser;Password=hdbpass&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sql&#34;&gt;sql&lt;/h1&gt;&#xA;&lt;p&gt;AO(append only) table:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; create table {table_name} (var type, var1 type1);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;parquet table:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; create table {table_name} (var type, var1 type2) WITH (appendonly=true, orientation=parquet);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;AO table distributed by specified column and partitioned by range:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hive</title>
      <link>https://canuxcheng.com/post/hive/</link>
      <pubDate>Mon, 24 Apr 2017 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/hive/</guid>
      <description>&lt;h1 id=&#34;hive&#34;&gt;Hive&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/hive&#34;&gt;https://github.com/apache/hive&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://hive.apache.org/&#34;&gt;http://hive.apache.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Hive2数据仓库用于读取，写入和管理使用SQL的大型分布式数据集．&lt;/p&gt;&#xA;&lt;p&gt;hive2的client: beeline(hive命令的升级版)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;hivebeeline&#34;&gt;hive/beeline&lt;/h1&gt;&#xA;&lt;p&gt;hive&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ hive --help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;beeline&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ beeline --silent=true&#xA;beeline&amp;gt; !connect jdbc:hive2://[ip]:[port]/[database] [username] [password]&#xA;&#xA;$ beeline -u &amp;quot;jdbc:hive2://[ip]:10000[/database]&amp;quot; -n [username] -p [password] -e &amp;quot;USE [database]; ...&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sql&#34;&gt;sql&lt;/h1&gt;&#xA;&lt;p&gt;normal table:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; create table tablename (var type, var1 type1);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;parquet table:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; create table {table_name} (var type, var1 type1) STORED AS PARQUET;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;partition table:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; create table {table_name} (var type, var1 type1) PARTITION BY (var2 type2);&#xA;&amp;gt; insert into {table_name} PARTITION (var2 = {pid}) VALUES {values};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;parquet partition table:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Impala</title>
      <link>https://canuxcheng.com/post/impala/</link>
      <pubDate>Mon, 24 Apr 2017 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/impala/</guid>
      <description>&lt;h1 id=&#34;impala&#34;&gt;Impala&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/incubator-impala&#34;&gt;https://github.com/apache/incubator-impala&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://impala.apache.org/&#34;&gt;https://impala.apache.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;impala的client: impala-shell&lt;/p&gt;&#xA;&lt;p&gt;Cloudera公司的CDH集成了Impala.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;impala-shellbeeline&#34;&gt;impala-shell/beeline&lt;/h1&gt;&#xA;&lt;p&gt;impala-shell&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ impala-shell&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;beeline&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ beeline --silent=true&#xA;beeline&amp;gt; !connect jdbc:hive2://[ip]:21050[/database];auth=noSasl [username] [password]&#xA;&#xA;$ beeline -u &amp;quot;jdbc:hive2://[ip]:21050[/database];auth=noSasl&amp;quot; -n [username] -p [password] -e &amp;quot;USE [database]; ...&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sql&#34;&gt;sql&lt;/h1&gt;&#xA;&lt;p&gt;normal table:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; create table {table_name} (var type, var1 type1);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;parquet table:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; crate table {table_name} (var type, var1 type1) STORED AS PARQUET;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;partition table:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; create table {table_name} (var type, var1 type1) PARTITIONED BY (var2 type2);&#xA;&amp;gt; insert into {table_name} PARTITION (var2 = val2) values (val, val1)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;parquet partition table:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Presto</title>
      <link>https://canuxcheng.com/post/presto/</link>
      <pubDate>Mon, 24 Apr 2017 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/presto/</guid>
      <description>&lt;h1 id=&#34;presto&#34;&gt;Presto&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prestodb&#34;&gt;https://github.com/prestodb&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://prestodb.io/&#34;&gt;https://prestodb.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;presto的client: presto-cli(rename to presto)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;presto-cli&#34;&gt;presto-cli&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ presto --server localhost:8080 --catalog hive --schema default&#xA;&#xA;# jdbc for presto&#xA;$ jdbc:presto://host:port/catalog/schema&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>MongoDB</title>
      <link>https://canuxcheng.com/post/mongodb/</link>
      <pubDate>Sun, 16 Apr 2017 14:46:14 +0000</pubDate>
      <guid>https://canuxcheng.com/post/mongodb/</guid>
      <description>&lt;h1 id=&#34;mongodb&#34;&gt;MongoDB&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mongodb/mongo&#34;&gt;https://github.com/mongodb/mongo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;mongodb是一种开源的文档数据库，高性能，高可用性，自动裁剪．&lt;/p&gt;&#xA;&lt;p&gt;mongodb的database和关系数据库中的database一样．&lt;/p&gt;&#xA;&lt;p&gt;mongodb将BSON(mongo的JSON)文档存储在集合(collections)中，集合相当于关系数据库中的表table．&lt;/p&gt;&#xA;&lt;p&gt;mongodb的collections中的域(field)，相当于关系数据库中的字段column.&lt;/p&gt;&#xA;&lt;p&gt;mongodb的collections中的文档(document)，相当于关系数据库中的记录行row.&lt;/p&gt;&#xA;&lt;p&gt;mongodb也支持index索引和primary key主键，但是不支持table joins表连接．&lt;/p&gt;&#xA;&lt;p&gt;ubuntu安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv0C49F3730359A14518585931BC711F9BA15703C6&#xA;$ echo &amp;quot;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4multiverse&amp;quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list&#xA;$ sudo apt-get update&#xA;$ sudo apt-get install -y mongodb-org&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;ubuntu启动:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo service mongod start&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;安装完成默认的数据库是test.另外db, admin, local是保留的数据库名称．&lt;/p&gt;&#xA;&lt;p&gt;mongod的默认端口是27017.&lt;/p&gt;&#xA;&lt;p&gt;mongo web-gui:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Studio3T/robomongo&#34;&gt;https://github.com/Studio3T/robomongo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;mongo的命令&#34;&gt;mongo的命令&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;mongo [options] [db address] [file names (ending in .js)]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;mongo shell进入到指定数据库:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ mongo [db_name]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;本地命令行执行sql语句：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xml</title>
      <link>https://canuxcheng.com/post/xml/</link>
      <pubDate>Fri, 07 Apr 2017 16:43:15 +0000</pubDate>
      <guid>https://canuxcheng.com/post/xml/</guid>
      <description>&lt;h1 id=&#34;xml&#34;&gt;XML&lt;/h1&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Xpath</title>
      <link>https://canuxcheng.com/post/xpath/</link>
      <pubDate>Fri, 07 Apr 2017 16:43:15 +0000</pubDate>
      <guid>https://canuxcheng.com/post/xpath/</guid>
      <description>&lt;h1 id=&#34;xpath&#34;&gt;XPath&lt;/h1&gt;&#xA;&lt;p&gt;XPath是一门在XML文档中查找信息的语言．&lt;/p&gt;&#xA;&lt;p&gt;xpath定位有绝对定位和相对定位，推荐使用相对定位．&lt;/p&gt;&#xA;&lt;p&gt;绝对的XPath定位包含了从HTML根节点起的所有元素，并且一些轻微的改变就会失效。&lt;/p&gt;&#xA;&lt;p&gt;相对的XPath用id或者name属性来找到一个靠近的元素(比较理想的是父元素)，这样你就可以依靠他们的相对关系来确定目标元素的位置。&lt;/p&gt;&#xA;&lt;h1 id=&#34;firefox&#34;&gt;firefox&lt;/h1&gt;&#xA;&lt;p&gt;firebug + firepath&lt;/p&gt;&#xA;&lt;p&gt;firefox通过两者结合来获取xpath&lt;/p&gt;&#xA;&lt;h1 id=&#34;chrome&#34;&gt;chrome&lt;/h1&gt;&#xA;&lt;p&gt;chrome的开发者工具(F12)可以直接copy xpath.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kvm</title>
      <link>https://canuxcheng.com/post/kvm/</link>
      <pubDate>Wed, 05 Apr 2017 21:47:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/kvm/</guid>
      <description>&lt;h1 id=&#34;kvm&#34;&gt;KVM&lt;/h1&gt;&#xA;&lt;p&gt;Kernel-based Virtual Machine.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;qemu&#34;&gt;Qemu&lt;/h1&gt;&#xA;&lt;p&gt;安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install qemu-system qemu-kvm&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Libvirt</title>
      <link>https://canuxcheng.com/post/libvirt/</link>
      <pubDate>Wed, 05 Apr 2017 21:47:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/libvirt/</guid>
      <description>&lt;h1 id=&#34;libvirt&#34;&gt;Libvirt&lt;/h1&gt;&#xA;&lt;p&gt;支持多种虚拟化平台的库&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://libvirt.org/&#34;&gt;https://libvirt.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libvirt-bin (包含virsh命令和libvirtd daemon)&#xA;// libvirtd在container中无法运行；在container中安装libvirt-bin可以获取virsh命令远程访问libvirt-bin server.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;libvirt-bin拆分成了两个包：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;libvirt-daemon-system&#xA;libvirt-clients&#xA;&#xA;$ sudo apt-get install libvirt-dev # 库, python/go client依赖该库&#xA;&#xA;$ sudo apt-get install virt-manager # windows管理工具&#xA;&#xA;$ sudo apt-get install virt-view # ...&#xA;&#xA;$ sudo service libvirt-bin restart&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;virsh&#34;&gt;virsh&lt;/h1&gt;&#xA;&lt;p&gt;libvirt的命令行工具&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ virsh list --all    # 查看所有虚拟机&#xA;$ virsh list --all --name # 只看domain name.&#xA;&#xA;$ virsh define /path/to/X.xml    # 从xml配置文件定义一个domain&#xA;$ virsh start     # 启动虚拟机&#xA;$ virsh reboot    # 重启虚拟机&#xA;$ virsh shutdown   # 关闭虚拟机&#xA;$ virsh destroy    # 强制关闭虚拟机&#xA;$ virsh undefine   # 移除虚拟机&#xA;$ virsh vncdisplay # 查看虚拟机的vnc信息，可以通过vnc访问.&#xA;&#xA;$ virsh net-list --all # 查看所有网络&#xA;$ virsh net-define default.xml&#xA;$ virsh net-autostart default&#xA;$ virsh net-start default&#xA;$ virsh net-undefine default&#xA;$ virsh net-destroy default&#xA;&#xA;# 批量操作vm&#xA;$ for vm in `virsh list --all --name`; do virsh undefine/destroy ${vm}; done&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;qemu-img&#34;&gt;qemu-img&lt;/h1&gt;&#xA;&lt;p&gt;创建虚拟机的镜像文件:&lt;/p&gt;</description>
    </item>
    <item>
      <title>IDE</title>
      <link>https://canuxcheng.com/post/devops_ide/</link>
      <pubDate>Sun, 02 Apr 2017 21:11:26 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops_ide/</guid>
      <description>&lt;h1 id=&#34;jetbrains&#34;&gt;JetBrains&lt;/h1&gt;&#xA;&lt;p&gt;IntelliJ: Java的IDE, 安装Python的插件也支持python.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pycharm&#34;&gt;PyCharm&lt;/h2&gt;&#xA;&lt;p&gt;PyCharm: Python的IDE.&lt;/p&gt;&#xA;&lt;h2 id=&#34;goland&#34;&gt;Goland&lt;/h2&gt;&#xA;&lt;p&gt;Goland: golang的IDE.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;vscode&#34;&gt;VSCode&lt;/h1&gt;&#xA;&lt;h2 id=&#34;intellisense--code-navigation&#34;&gt;IntelliSense &amp;amp; Code Navigation&lt;/h2&gt;&#xA;&lt;p&gt;Go to Definition: F12, 跳转到定义.&lt;/p&gt;&#xA;&lt;p&gt;Peek Definition: Alt + F12， 速览定义，不跳转.&lt;/p&gt;&#xA;&lt;p&gt;Go to references: Shift + F12, 转到引用.&lt;/p&gt;&#xA;&lt;h2 id=&#34;frontend&#34;&gt;frontend&lt;/h2&gt;&#xA;&lt;h3 id=&#34;vs-js-debug&#34;&gt;vs-js-debug&lt;/h3&gt;&#xA;&lt;p&gt;vscode内置了js/ts/node的debugger.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-js-debug&#34;&gt;https://github.com/microsoft/vscode-js-debug&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;live-server&#34;&gt;live server&lt;/h3&gt;&#xA;&lt;p&gt;live preview(html, svg&amp;hellip;)&lt;/p&gt;&#xA;&lt;p&gt;如果用remote-ssh开启live server就是在远程机器上开启5500端口，webroot就是vscode打开的目录.&lt;/p&gt;&#xA;&lt;p&gt;如果是remote-ssh开发html，用这个preview很方便.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server&#34;&gt;https://github.com/ritwickdey/vscode-live-server&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;vscode-chrome-debug&#34;&gt;vscode-chrome-debug&lt;/h3&gt;&#xA;&lt;p&gt;打开的是安装vscode的机器上的chrome。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-chrome-debug&#34;&gt;https://github.com/microsoft/vscode-chrome-debug&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过live server监听remote-ssh机器上的5500，可以通过chrome远程调试静态站点。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,&#xA;    &amp;quot;configurations&amp;quot;: [&#xA;        {&#xA;            &amp;quot;name&amp;quot;: &amp;quot;angularjs&amp;quot;,&#xA;            &amp;quot;type&amp;quot;: &amp;quot;chrome&amp;quot;,&#xA;            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,&#xA;            &amp;quot;url&amp;quot;: &amp;quot;http://remote-ssh-server:5500/path/to/index.html&amp;quot;,&#xA;            &amp;quot;webRoot&amp;quot;: &amp;quot;${workspaceFolder}/path/to/&amp;quot;,&#xA;        },&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;python&#34;&gt;python&lt;/h2&gt;&#xA;&lt;p&gt;debuging:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cryptographic</title>
      <link>https://canuxcheng.com/post/sec_cryptographic/</link>
      <pubDate>Mon, 27 Mar 2017 17:11:58 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_cryptographic/</guid>
      <description>&lt;h1 id=&#34;pgp&#34;&gt;PGP&lt;/h1&gt;&#xA;&lt;p&gt;PGP: Pretty Good Privacy。&lt;/p&gt;&#xA;&lt;p&gt;用于签名和加密解密。&lt;/p&gt;&#xA;&lt;h2 id=&#34;pgp-1&#34;&gt;PGP&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pretty_Good_Privacy&#34;&gt;https://en.wikipedia.org/wiki/Pretty_Good_Privacy&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;openpgp&#34;&gt;OpenPGP&lt;/h2&gt;&#xA;&lt;p&gt;OpenPGP是PGP的标准,也有很多实现。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://openpgp.org/&#34;&gt;http://openpgp.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;gnupg&#34;&gt;GnuPG&lt;/h2&gt;&#xA;&lt;p&gt;GunPG: Gun Privacy Guard, 是基于openPGP的实现。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34;&gt;https://gnupg.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ gpg --help&#xA;&#xA;$ 快速生成签名密钥对&#xA;gpg --quick-generate-key &amp;quot;Canux&amp;quot;&#xA;// 查看公钥&#xA;gpg --list-keys&#xA;// 查看私钥&#xA;gpg --list-secret-keys&#xA;// 删除私钥&#xA;gpg --delete-secret-keys &amp;quot;Canux&amp;quot;&#xA;// 删除公钥&#xA;gpg --delete-keys &amp;quot;Canux&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;GPGME: GPG Made Easy, 是一个让应用程序使用GPG更容易的库．&lt;/p&gt;&#xA;&lt;h1 id=&#34;openssl&#34;&gt;OpenSSL&lt;/h1&gt;&#xA;&lt;p&gt;网络安全和密码工具。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;https://www.openssl.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ openssl --help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;单向哈希加密&#34;&gt;单向哈希加密&lt;/h1&gt;&#xA;&lt;p&gt;md5和shaX都是常用的存储密码的加密方法.&lt;/p&gt;&#xA;&lt;p&gt;rainbow table可以破解单向加密.&lt;/p&gt;&#xA;&lt;p&gt;salt方法可以防止rainbow table破解.&lt;/p&gt;&#xA;&lt;p&gt;scrypt是最难破解的加密方案.&lt;/p&gt;&#xA;&lt;h2 id=&#34;md5&#34;&gt;md5&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sha1&#34;&gt;sha1&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sha256&#34;&gt;sha256&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sha512&#34;&gt;sha512&lt;/h2&gt;&#xA;&lt;h2 id=&#34;hmac&#34;&gt;hmac&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;symmetric-cryptography&#34;&gt;Symmetric Cryptography&lt;/h1&gt;&#xA;&lt;p&gt;对称加密就是加密和解密使用的密钥是相同的．&lt;/p&gt;</description>
    </item>
    <item>
      <title>JS DOM</title>
      <link>https://canuxcheng.com/post/js_dom/</link>
      <pubDate>Wed, 15 Mar 2017 09:36:32 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js_dom/</guid>
      <description>&lt;h1 id=&#34;dom&#34;&gt;DOM&lt;/h1&gt;&#xA;&lt;p&gt;DOM: document object model.&lt;/p&gt;&#xA;&lt;p&gt;当网页被加载时，浏览器会创建页面的文档对象模型(DOM).&lt;/p&gt;&#xA;&lt;p&gt;DOM操作需要在html加载完成后进程.&lt;/p&gt;&#xA;&lt;p&gt;js可以通过DOM访问html文档的所有元素.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JavaScript 能够改变页面中的所有 HTML 元素&lt;/li&gt;&#xA;&lt;li&gt;JavaScript 能够改变页面中的所有 HTML 属性&lt;/li&gt;&#xA;&lt;li&gt;JavaScript 能够改变页面中的所有 CSS 样式&lt;/li&gt;&#xA;&lt;li&gt;JavaScript 能够对页面中的所有事件做出反应&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;查找html元素&#34;&gt;查找html元素&lt;/h2&gt;&#xA;&lt;p&gt;找到返回该元素的对象，没找到返回null.&lt;/p&gt;&#xA;&lt;p&gt;通过id:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;document.getElementById(&amp;quot;id&amp;quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;通过标签名:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;document.getElementsByTagName(&amp;quot;tag&amp;quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;通过类名:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;document.getElementsByName(&amp;quot;name&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;操作html元素或文本&#34;&gt;操作html元素或文本&lt;/h2&gt;&#xA;&lt;p&gt;操作标签或标签内的文本.&lt;/p&gt;&#xA;&lt;p&gt;直接改变html内容:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 绝不要使用在文档加载之后使用 document.write()。这会覆盖该文档&#xA;document.write(...);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;改变元素的内容:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;document.getElementById(id).innerHTML = &amp;quot;new text&amp;quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;操作html属性&#34;&gt;操作html属性&lt;/h2&gt;&#xA;&lt;p&gt;改变元素属性:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;document.getElementById(id).attribute = &amp;quot;new value&amp;quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;操作css&#34;&gt;操作css&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;document.getElementById(id).style.property = &amp;quot;new style&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;增删html元素&#34;&gt;增删html元素&lt;/h2&gt;&#xA;&lt;p&gt;增加元素:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var para = document.createElement(&amp;quot;p&amp;quot;);&#xA;var node = document.createTextNode(&amp;quot;new para&amp;quot;);&#xA;para.appendChild(node);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;删除元素:&lt;/p&gt;</description>
    </item>
    <item>
      <title>JS OOP</title>
      <link>https://canuxcheng.com/post/js_oop/</link>
      <pubDate>Wed, 15 Mar 2017 09:36:32 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js_oop/</guid>
      <description>&lt;h1 id=&#34;oop&#34;&gt;OOP&lt;/h1&gt;&#xA;&lt;p&gt;javascript中一切都是对象.&lt;/p&gt;&#xA;&lt;p&gt;javacript内置了Bull/Number/String/Object/Function/Array/Date/RegExp类型.&lt;/p&gt;&#xA;&lt;h1 id=&#34;object&#34;&gt;Object&lt;/h1&gt;&#xA;&lt;p&gt;创建Object实例:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var obj = new Object();&#xA;&#xA;var obj = Object(); // new 可以省略&#xA;&#xA;var obj = ｛&#xA;    name: &amp;quot;value&amp;quot;&#xA;};&#xA;&#xA;var obj = {&#xA;    &amp;quot;name&amp;quot;: &amp;quot;value&amp;quot;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;添加属性:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;obj.attr = &amp;quot;value&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;添加方法:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;obj.method =  methodName;&#xA;function methodName() {};&#xA;&#xA;obj.method = function() {};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;删除属性:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;delete obj.attr&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;访问对象属性:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;obj.property&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;访问对象方法:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;obj.method()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;boolean&#34;&gt;Boolean&lt;/h1&gt;&#xA;&lt;p&gt;attribution:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;constructor&#xA;prototype&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;method:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;toSource()&#xA;valueOf()&#xA;toString()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;number&#34;&gt;Number&lt;/h1&gt;&#xA;&lt;p&gt;attribution:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Angular</title>
      <link>https://canuxcheng.com/post/js_angular/</link>
      <pubDate>Mon, 13 Mar 2017 09:36:32 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js_angular/</guid>
      <description>&lt;h1 id=&#34;angularjs&#34;&gt;angularjs&lt;/h1&gt;&#xA;&lt;p&gt;angularjs 1.*&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular.js&#34;&gt;https://github.com/angular/angular.js&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;https://angularjs.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rev087/ng-inspector&#34;&gt;https://github.com/rev087/ng-inspector&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;angular&#34;&gt;Angular&lt;/h1&gt;&#xA;&lt;p&gt;Angular 是一个用 HTML 和 TypeScript 构建客户端应用的平台与框架。&lt;/p&gt;&#xA;&lt;p&gt;angular.js 的升级版&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular&#34;&gt;https://github.com/angular/angular&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular-cli&#34;&gt;https://github.com/angular/angular-cli&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://angular.io&#34;&gt;https://angular.io&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://angular.cn&#34;&gt;https://angular.cn&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装 angular-cli:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ npm install -g @angular/cli&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看版本:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ ng v&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;新建项目:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;project&amp;gt;&#xA;$ ng new &amp;lt;application&amp;gt;&#xA;&#xA;# 严格模式&#xA;$ ng new &amp;lt;application&amp;gt; --strict&#xA;&#xA;$ ng generate &amp;lt;schematic&amp;gt; [options]&#xA;appShell&#xA;application&#xA;class&#xA;component&#xA;directive&#xA;enum&#xA;guard&#xA;interceptor&#xA;interface&#xA;library&#xA;module&#xA;pipe&#xA;resolver&#xA;service&#xA;serviceWorker&#xA;webWorker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;测试项目:&lt;/p&gt;</description>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://canuxcheng.com/post/js_devops/</link>
      <pubDate>Mon, 13 Mar 2017 09:36:32 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js_devops/</guid>
      <description>&lt;h1 id=&#34;js--ts&#34;&gt;JS &amp;amp; TS&lt;/h1&gt;&#xA;&lt;p&gt;vscode&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;configurations&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Next.js: debug server-side&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;node-terminal&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;npm run dev&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Next.js: debug client-side&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chrome&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:3000&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Next.js: debug client-side (Firefox)&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firefox&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:3000&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;reAttach&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pathMappings&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;webpack://_N_E&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${workspaceFolder}&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Next.js: debug full stack&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;program&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${workspaceFolder}/node_modules/next/dist/bin/next&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;runtimeArgs&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--inspect&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;skipFiles&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;node_internals&amp;gt;/**&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;serverReadyAction&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;debugWithEdge&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;killOnServerStop&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pattern&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;- Local:.+(https?://.+)&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uriFormat&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;webRoot&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${workspaceFolder}&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SPA: Single page application, 单页应用，like react, vue and angular.&#xA;SSR: server side rendering. 服务端渲染, like next.js, nuxt.js&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript</title>
      <link>https://canuxcheng.com/post/js/</link>
      <pubDate>Mon, 13 Mar 2017 09:36:32 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js/</guid>
      <description>&lt;h1 id=&#34;javascript概述&#34;&gt;JavaScript概述&lt;/h1&gt;&#xA;&lt;p&gt;Javascript包括三部分:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ECMAScript核心,提供核心语言功能．&lt;/li&gt;&#xA;&lt;li&gt;DOM文档对象模型, 提供访问和操作网页内容的方法和接口．&lt;/li&gt;&#xA;&lt;li&gt;BOM浏览器对象模型, 提供与浏览器交互的方法和接口．&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;ES5.0 (2009)&#xA;ES5.1 (2011, ISO/IEC)&#xA;ES6.0 (2015)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;javascript基本语法&#34;&gt;javascript基本语法&lt;/h1&gt;&#xA;&lt;p&gt;javascript源程序叫xxx.js.&lt;/p&gt;&#xA;&lt;p&gt;javascript大小写敏感．&lt;/p&gt;&#xA;&lt;p&gt;javascript使用驼峰命名法．&lt;/p&gt;&#xA;&lt;p&gt;javascript的标识符以字母，下划线或美元符号开头，还可以包含数字．不能是关键字．&lt;/p&gt;&#xA;&lt;p&gt;JvaScript代码块以大括号{}包围,开括号写在第一行结尾处，前面空格，闭括号单独一行。&lt;/p&gt;&#xA;&lt;p&gt;javascript中所有事物都是对象，都有属性和方法.&lt;/p&gt;&#xA;&lt;p&gt;JavaScript使用分号;表示一个语句结束, 一般一行写多个语句才需要显示添加分号．&lt;/p&gt;&#xA;&lt;p&gt;javascript中运算符周围要有空格。&lt;/p&gt;&#xA;&lt;p&gt;javascript中使用四个空格来缩进。&lt;/p&gt;&#xA;&lt;p&gt;javascript不支持goto。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;注释&#34;&gt;注释&lt;/h1&gt;&#xA;&lt;p&gt;单行注释：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// comment&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;多行注释：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/*&#xA; * comment1&#xA; * comment2&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;关键字&#34;&gt;关键字&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 数据类型&#xA;var function return typeof new delete&#xA;&#xA;# 流程控制&#xA;if else for in do while switch case default with break continue&#xA;&#xA;# 修饰符&#xA;void&#xA;&#xA;# 动作相关&#xA;instanceof this&#xA;&#xA;# 异常处理&#xA;try catch throw&#xA;&#xA;# 调试&#xA;debugger&#xA;&#xA;# ECMAScript2015&#xA;let const&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;运算符和优先级&#34;&gt;运算符和优先级&lt;/h1&gt;&#xA;&lt;h2 id=&#34;算数运算符&#34;&gt;算数运算符&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;+&#xA;-&#xA;* &#xA;**&#xA;/&#xA;%&#xA;++&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;赋值运算符&#34;&gt;赋值运算符&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;=&#xA;+=&#xA;-=&#xA;*=&#xA;/=&#xA;%=&#xA;&amp;lt;&amp;lt;=&#xA;&amp;gt;&amp;gt;=&#xA;&amp;gt;&amp;gt;&amp;gt;=&#xA;&amp;amp;=&#xA;^=&#xA;|=&#xA;**=&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;比较运算符&#34;&gt;比较运算符&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 在比较值钱进行类型转换.&#xA;==&#xA;&#xA;// 强制对值和类型进行比较.&#xA;===&#xA;&#xA;!=&#xA;&#xA;!==&#xA;&#xA;&amp;gt;&#xA;&amp;lt;&#xA;&amp;gt;=&#xA;&amp;lt;=&#xA;&#xA;// 三元运算符&#xA;?&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;逻辑运算符&#34;&gt;逻辑运算符&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 逻辑与&#xA;&amp;amp;&amp;amp;&#xA;&#xA;// 逻辑或&#xA;||&#xA;&#xA;// 逻辑非&#xA;!&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;类型运算符&#34;&gt;类型运算符&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;typeof&#xA;&#xA;instanceof&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;位运算符&#34;&gt;位运算符&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;amp;&#xA;|&#xA;~&#xA;^&#xA;&amp;lt;&amp;lt;&#xA;&amp;gt;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;&#xA;&lt;h2 id=&#34;var申明变量&#34;&gt;var申明变量&lt;/h2&gt;&#xA;&lt;p&gt;通过var申明的变量没有块作用域，在块之外也能访问.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JS Test</title>
      <link>https://canuxcheng.com/post/js_test/</link>
      <pubDate>Mon, 13 Mar 2017 09:36:32 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js_test/</guid>
      <description>&lt;h1&gt;&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;jest&#34;&gt;Jest&lt;/h2&gt;&#xA;&lt;p&gt;for javascript.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jestjs/jest&#34;&gt;https://github.com/jestjs/jest&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;ts-jest&#34;&gt;TS Jest&lt;/h2&gt;&#xA;&lt;p&gt;for typescript.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kulshekhar/ts-jest&#34;&gt;https://github.com/kulshekhar/ts-jest&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;jasmine&#34;&gt;jasmine&lt;/h2&gt;&#xA;&lt;p&gt;A JavaScript Testing Framework&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jasmine/jasmine&#34;&gt;https://github.com/jasmine/jasmine&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;install jasmine to devDependencies&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ npm install --save-dev jasmineinit &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;jasmine in project&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ npx jasmine init&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;set jasmine as test script in package.json&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; &amp;quot;scripts&amp;quot;: { &amp;quot;test&amp;quot;: &amp;quot;jasmine&amp;quot; } &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;run test&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ npm test&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Testing</title>
      <link>https://canuxcheng.com/post/testing/</link>
      <pubDate>Wed, 01 Mar 2017 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/testing/</guid>
      <description>&lt;h1 id=&#34;qa&#34;&gt;QA&lt;/h1&gt;&#xA;&lt;p&gt;Quality Assurance&lt;/p&gt;&#xA;&lt;p&gt;QA主要就是进行软件测试相关的工作.&lt;/p&gt;&#xA;&lt;p&gt;软件测试就是使用人工或自动的手段来运行或测量软件系统的过程，以检验软件系统是否满足规定的要求，并找出与预期结果之间的差异．&lt;/p&gt;&#xA;&lt;p&gt;软件测试五个要素：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;质量&lt;/li&gt;&#xA;&lt;li&gt;人员&lt;/li&gt;&#xA;&lt;li&gt;技术&lt;/li&gt;&#xA;&lt;li&gt;流程&lt;/li&gt;&#xA;&lt;li&gt;资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试两个目标：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;测试覆盖率&lt;/li&gt;&#xA;&lt;li&gt;测试效率&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试阶段：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单元测试(Unit Testing)&lt;/li&gt;&#xA;&lt;li&gt;集成测试(Integration Testing)&lt;/li&gt;&#xA;&lt;li&gt;系统测试(System Testing)&lt;/li&gt;&#xA;&lt;li&gt;验收测试(Acceptance Testing)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试的手段：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;手动测试/自动化测试&lt;/li&gt;&#xA;&lt;li&gt;静态测试/动态测试&lt;/li&gt;&#xA;&lt;li&gt;黑盒测试/白盒测试&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试的类型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;性能测试&lt;/li&gt;&#xA;&lt;li&gt;稳定性测试&lt;/li&gt;&#xA;&lt;li&gt;安全测试&lt;/li&gt;&#xA;&lt;li&gt;可用性测试&lt;/li&gt;&#xA;&lt;li&gt;兼容性测试&lt;/li&gt;&#xA;&lt;li&gt;文档测试&lt;/li&gt;&#xA;&lt;li&gt;本地化测试&lt;/li&gt;&#xA;&lt;li&gt;冒烟测试&lt;/li&gt;&#xA;&lt;li&gt;功能测试Functional Testing&lt;/li&gt;&#xA;&lt;li&gt;回归测试Regression Testing&lt;/li&gt;&#xA;&lt;li&gt;用户界面测试UI Testing&lt;/li&gt;&#xA;&lt;li&gt;端到端测试End-To-End Testing&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试的模型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传统的瀑布模型&lt;/li&gt;&#xA;&lt;li&gt;V模型&lt;/li&gt;&#xA;&lt;li&gt;W模型&lt;/li&gt;&#xA;&lt;li&gt;X模型&lt;/li&gt;&#xA;&lt;li&gt;H模型&lt;/li&gt;&#xA;&lt;li&gt;敏捷测试模型(金字塔模式)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;软件测试的模式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;金字塔模式Ideal Test Automation Pyramid&lt;/li&gt;&#xA;&lt;li&gt;蛋筒冰激凌模式Ice Cream Cone&lt;/li&gt;&#xA;&lt;li&gt;双金字塔模式Dual Test Pyramid&lt;/li&gt;&#xA;&lt;li&gt;纸杯蛋糕模式Cupcake&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;test-automation-pyramid&#34;&gt;Test Automation Pyramid&lt;/h1&gt;&#xA;&lt;p&gt;Mike Cohn的测试金字塔&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/bliki/TestPyramid.html&#34;&gt;https://martinfowler.com/bliki/TestPyramid.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Automated GUI Tests(10%)&lt;/li&gt;&#xA;&lt;li&gt;Automated Service Tests(Component/Integration/API)(20%)&lt;/li&gt;&#xA;&lt;li&gt;Automated Unit Tests(70%)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;unit-test单元测试&#34;&gt;Unit Test/单元测试&lt;/h1&gt;&#xA;&lt;p&gt;单元测试是开发者编写的测试一个单元（函数／类）的功能是否符合预期．&lt;/p&gt;</description>
    </item>
    <item>
      <title>RobotFramework</title>
      <link>https://canuxcheng.com/post/testing_robotframework/</link>
      <pubDate>Sat, 25 Feb 2017 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/testing_robotframework/</guid>
      <description>&lt;h1 id=&#34;robot-framework&#34;&gt;Robot Framework&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/robotframework/robotframework&#34;&gt;https://github.com/robotframework/robotframework&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/robotframework/QuickStartGuide&#34;&gt;https://github.com/robotframework/QuickStartGuide&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;支持python和java的API.&lt;/p&gt;&#xA;&lt;p&gt;Robot Framework is a generic test automation framework for acceptance testing and acceptance test-driven development (ATDD).&lt;/p&gt;&#xA;&lt;p&gt;Install:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ pip install robotframework&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Modular:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Test Data&lt;/li&gt;&#xA;&lt;li&gt;Robot Framework(test data syntax)&lt;/li&gt;&#xA;&lt;li&gt;Test Libraries(test library API) + Test Tools&lt;/li&gt;&#xA;&lt;li&gt;System under Test(system interface)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Use:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ robot --version&#xA;$ robot [options] data_sources&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;会生成三个文件：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;output.xml&lt;/li&gt;&#xA;&lt;li&gt;log.html&lt;/li&gt;&#xA;&lt;li&gt;report.html&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;setting-table&#34;&gt;setting table&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;*** Settings ***&#xA;# 前三个是加载外部文件&#xA;Library    Selenium2Library # 需要在sys.path路径里面&#xA;Resource    ${RESOURCES}/common.tsv&#xA;Variables    ${RESOURCES}/common.py&#xA;Documentation    Docs&#xA;Metadata    Version    2.0&#xA;Suite Setup&#xA;Suite Teardown&#xA;Force Tags&#xA;Default Tags&#xA;Test Setup&#xA;Test Teardown&#xA;Test Template&#xA;Test Timeout&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;test-case-table&#34;&gt;Test Case table&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/robotframework/HowToWriteGoodTestCases&#34;&gt;https://github.com/robotframework/HowToWriteGoodTestCases&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Selenium</title>
      <link>https://canuxcheng.com/post/testing_selenium/</link>
      <pubDate>Sat, 25 Feb 2017 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/testing_selenium/</guid>
      <description>&lt;h1 id=&#34;selenium&#34;&gt;Selenium&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/selenium&#34;&gt;https://github.com/SeleniumHQ/selenium&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;用于基于浏览器的web应用的自动化测试工具集．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;selenium1: deprecated.&#xA;selenium2: 默认支持firefox&amp;lt;=46. 支持python2.6+, python3.2+&#xA;selenium3: 支持firefox47+, 所有浏览器都需要安装webdriver.支持python2.6+, python3.3+, 必须重启OS.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;支持python, java, javascript等API.&lt;/p&gt;&#xA;&lt;p&gt;默认安装selenium3:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ pip install selenium&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;selenium3需要安装相应浏览器的driver, 然后重启OS:&lt;/p&gt;&#xA;&lt;p&gt;selenium, driver, browser三个版本都需要兼容才能工作．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;winfows放在C:\Python\Scripts\&#xA;linux放在/usr/local/bin/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/downloads&#34;&gt;https://sites.google.com/a/chromium.org/chromedriver/downloads&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mozilla/geckodriver/releases&#34;&gt;https://github.com/mozilla/geckodriver/releases&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;[Deprecated] Remote Control: 也就是selenium1.selenium2依然保留了selenium1的API.但是selenium3会彻底删除RC的API.&lt;/p&gt;&#xA;&lt;p&gt;[Deprecated] IDE: selenium IDE是一个firefox的插件，用于记录浏览器上的测试步骤，能用于生成测试代码，并且转换成编程语言．但是已经被WebDriver取代．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;webdriver&#34;&gt;WebDriver&lt;/h1&gt;&#xA;&lt;p&gt;也就是selenium2.已经取代了selenium RC和selenium IDE.&lt;/p&gt;&#xA;&lt;p&gt;python的API参考python博客．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;grid&#34;&gt;Grid&lt;/h1&gt;&#xA;&lt;p&gt;Selenium Grid用于分布式测试&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;定位元素&#34;&gt;定位元素&lt;/h1&gt;&#xA;&lt;p&gt;对应的python的API参考python博文．&lt;/p&gt;&#xA;&lt;p&gt;selenium提供８种定位web页面中元素的方法：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;id&lt;/li&gt;&#xA;&lt;li&gt;name&lt;/li&gt;&#xA;&lt;li&gt;class&lt;/li&gt;&#xA;&lt;li&gt;tag&lt;/li&gt;&#xA;&lt;li&gt;link&lt;/li&gt;&#xA;&lt;li&gt;partial_link&lt;/li&gt;&#xA;&lt;li&gt;通过xpath&lt;/li&gt;&#xA;&lt;li&gt;通过css&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在浏览器通过F12快捷键进入调试模式获取．&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenStack</title>
      <link>https://canuxcheng.com/post/cloud_openstack/</link>
      <pubDate>Thu, 23 Feb 2017 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/cloud_openstack/</guid>
      <description>&lt;h1 id=&#34;openstack&#34;&gt;OpenStack&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openstack&#34;&gt;https://github.com/openstack&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openstack-dev&#34;&gt;https://github.com/openstack-dev&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;openstack是一个云操作系统，通过数据中心可控制大型的计算，存储，网络等资源池．&lt;/p&gt;&#xA;&lt;p&gt;所有的管理通过前端的界面管理员就可以完成，同样也可以通过web接口让最终的用户部署资源．&lt;/p&gt;&#xA;&lt;p&gt;openstack的设计原则：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.openstack.org/wiki/BasicDesignTenets&#34;&gt;https://wiki.openstack.org/wiki/BasicDesignTenets&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;horizon---openstack-dashboard&#34;&gt;horizon - OpenStack Dashboard&lt;/h1&gt;&#xA;&lt;p&gt;控制面板&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openstack/horizon&#34;&gt;https://github.com/openstack/horizon&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;keystone---openstack-identity&#34;&gt;keystone - OpenStack Identity&lt;/h1&gt;&#xA;&lt;p&gt;认证服务&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openstack/keystone&#34;&gt;https://github.com/openstack/keystone&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;nova---openstack-compute&#34;&gt;nova - OpenStack Compute&lt;/h1&gt;&#xA;&lt;p&gt;计算服务&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openstack/nova&#34;&gt;https://github.com/openstack/nova&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;swift---openstack-storage&#34;&gt;swift - OpenStack Storage&lt;/h1&gt;&#xA;&lt;p&gt;存储服务&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openstack/swift&#34;&gt;https://github.com/openstack/swift&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;neutron---openstack-networking&#34;&gt;neutron - OpenStack Networking&lt;/h1&gt;&#xA;&lt;p&gt;网络服务(原名quantum)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openstack/neutron&#34;&gt;https://github.com/openstack/neutron&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;glance---openstack-image-management&#34;&gt;glance - OpenStack Image Management&lt;/h1&gt;&#xA;&lt;p&gt;镜像管理&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openstack/glance&#34;&gt;https://github.com/openstack/glance&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cinder---openstack-block-storage&#34;&gt;cinder - OpenStack Block Storage&lt;/h1&gt;&#xA;&lt;p&gt;块存储服务&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openstack/cinder&#34;&gt;https://github.com/openstack/cinder&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Makefile</title>
      <link>https://canuxcheng.com/post/linux_makefile/</link>
      <pubDate>Thu, 12 Jan 2017 21:18:33 +0000</pubDate>
      <guid>https://canuxcheng.com/post/linux_makefile/</guid>
      <description>&lt;h1 id=&#34;make&#34;&gt;Make&lt;/h1&gt;&#xA;&lt;p&gt;make的作用：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制源代码的编译&lt;/li&gt;&#xA;&lt;li&gt;手册页的编写&lt;/li&gt;&#xA;&lt;li&gt;将应用程序安装到目标目录&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;make的使用规则：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果工程没有编译过，需要编译所有源文件和链接所有目标文件．&lt;/li&gt;&#xA;&lt;li&gt;如果工程里某几个目标文件被修改，只需要编译修改的源文件，并链接所有目标文件．&lt;/li&gt;&#xA;&lt;li&gt;如果头文件被修改，只需要编译引用了被修改的头文件的源文件，并链接所有目标文件．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;makefile文件查找顺序：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当前目录找makefile&lt;/li&gt;&#xA;&lt;li&gt;当前目录找Makefile&lt;/li&gt;&#xA;&lt;li&gt;当前目录找GNUmakefile&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;make命令&#34;&gt;make命令&lt;/h1&gt;&#xA;&lt;p&gt;make命令会执行当前目录的makefile/Makefile/GNUmakefile文件．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;make [options] [target] ...&#xA;-f FILE, --file=FILE, --makefile=FILE    # 指定makefile文件&#xA;-n, --just-print, --dry-run, --recon # 只打印，不执行&#xA;-k, --keep-going　# 忽略错误继续执行&#xA;&#xA;make&#xA;make all&#xA;make install&#xA;make clean&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;make的工作顺序：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;读入所有makefile文件&lt;/li&gt;&#xA;&lt;li&gt;读入include的其它makefile文件&lt;/li&gt;&#xA;&lt;li&gt;初始化变量&lt;/li&gt;&#xA;&lt;li&gt;推导隐晦规则，分析所有规则&lt;/li&gt;&#xA;&lt;li&gt;为所有目标文件创建依赖关系链&lt;/li&gt;&#xA;&lt;li&gt;根据依赖关系决定哪些目标需要重新生成&lt;/li&gt;&#xA;&lt;li&gt;执行生成的命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;makefile语法&#34;&gt;makefile语法&lt;/h1&gt;&#xA;&lt;p&gt;make命令执行makefile文件时，会比较target和prerequisites的时间戳，如果后者比前者新，或者前者不存在，就会执行command,否则会跳过command.&lt;/p&gt;&#xA;&lt;p&gt;其中#表示注释，\表示续行．@表示该命令的执行不会打印到stdout,-表示忽略错误继续执行．&lt;/p&gt;&#xA;&lt;p&gt;makefile中的command必须以tab开头，target和prerequisites有多个时用空格分开．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# comment&#xA;target...: prerequisites...&#xA;    command&#xA;    command1 too \&#xA;    long&#xA;    @command2&#xA;    -command3&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;makefile变量赋值:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var=val&#xA;var := val  覆盖之前的值&#xA;var ?= val  如果没有被赋值过，就赋值&#xA;var += val  添加一个值&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;通过命令定义变量：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grafana</title>
      <link>https://canuxcheng.com/post/metrics_grafana/</link>
      <pubDate>Thu, 12 Jan 2017 21:05:48 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics_grafana/</guid>
      <description>&lt;h1 id=&#34;grafana&#34;&gt;Grafana&lt;/h1&gt;&#xA;&lt;p&gt;The tool for beautiful monitoring and metric analytics &amp;amp; dashboards for Graphite, InfluxDB &amp;amp; Prometheus &amp;amp; More.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/grafana&#34;&gt;https://github.com/grafana/grafana&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;支持多种data source:&lt;/p&gt;&#xA;&lt;p&gt;graphite/influxdb/opentsdb/premetheus/elasticsearch/mysql/postgresql&lt;/p&gt;&#xA;&lt;p&gt;安装配置参考官方文档&lt;/p&gt;&#xA;&lt;p&gt;grafana配置文件是grafana.ini.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;http-api&#34;&gt;HTTP API&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;port = 3000&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;dashboard&#34;&gt;dashboard&lt;/h2&gt;&#xA;&lt;p&gt;create/update dashboard:&lt;/p&gt;&#xA;&lt;p&gt;将datasource设置成变量，然后导出的json文件就可以直接导入了．&lt;/p&gt;&#xA;&lt;p&gt;dashboard.id=null才能创建新dashboard.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;post /api/dashboards/db&#xA;data = json.dumps({&#xA;    &amp;quot;dashboard&amp;quot;: {&#xA;        &amp;quot;id&amp;quot;: null,&#xA;        ...&#xA;    },&#xA;    &amp;quot;folderId&amp;quot;: 0,&#xA;    &amp;quot;overwrite&amp;quot;: True, # True for python, true for go.&#xA;    &amp;quot;message&amp;quot;: &amp;quot;commit message&amp;quot;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;datasource&#34;&gt;datasource&lt;/h2&gt;&#xA;&lt;p&gt;create datasource:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;post /api/datasources&#xA;data = json.dumps({&#xA;    &amp;quot;name&amp;quot;:&#xA;    &amp;quot;type&amp;quot;:&#xA;    &amp;quot;url&amp;quot;:&#xA;    &amp;quot;database&amp;quot;:&#xA;    &amp;quot;access&amp;quot;: &amp;quot;proxy&amp;quot;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;alert&#34;&gt;alert&lt;/h2&gt;&#xA;&lt;p&gt;create alert notification/channel:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vagrant</title>
      <link>https://canuxcheng.com/post/vagrant/</link>
      <pubDate>Thu, 12 Jan 2017 21:00:01 +0000</pubDate>
      <guid>https://canuxcheng.com/post/vagrant/</guid>
      <description>&lt;h1 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h1&gt;&#xA;&lt;p&gt;构建在虚拟化技术之上的虚拟机运行环境管理工具．&lt;/p&gt;&#xA;&lt;p&gt;适合用来构建和分发开发环境．通过命令行可以批量自动化，不用一个一个安装配置图形界面的虚拟机．&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mitchellh/vagrant&#34;&gt;https://github.com/mitchellh/vagrant&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;需要安装virtualbox或vmware等虚拟机.&lt;/p&gt;&#xA;&lt;p&gt;vagrant还支持其它的providers(docker, vmware, hyper-v, aws)&lt;/p&gt;&#xA;&lt;p&gt;可以在这里找到很多vagrant可用的box:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://atlas.hashicorp.com/boxes/search&#34;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;初始化&#34;&gt;初始化&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ mkdir -p /home/user/vagrant&#xA;$ cd /vagrant&#xA;&#xA;# 在当前目录生成一个Vagrantfile文件, 需手动添加vm.box&#xA;$ vagrant init &#xA;&#xA;# 相当于直接添加了vm.box到Vagrantfile.&#xA;$ vagrant init [box-name]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;添加box&#34;&gt;添加box&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 默认从https://atlas.hashicorp.com/boxes/search下载该box.&#xA;$ vagrant box add [[--name ]box-name] hashicorp/precise64&#xA;&#xA;# 也可以使用下载到本地的box&#xA;$ vagrant box add [[--name ]box-name] /path/to/your.box&#xA;&#xA;# 也可以使用自己的服务器上的box&#xA;$ vagrant box add [[--name ]box-name] URL&#xA;&#xA;# 添加box之后修改Vagrantfile,添加vm.box:&#xA;Vagrant.configure(&amp;quot;2&amp;quot;) do |config|&#xA;  config.vm.box = &amp;quot;[box-name]&amp;quot;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;使用box&#34;&gt;使用box&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vagrant up [box-name]&#xA;$ vagrant up --provider docker/aws/vmware/hyperv/... [box-name]&#xA;&#xA;$ vagrant ssh&#xA;# 会进入一个vagrant@precise64:~$的环境．&#xA;# /vagrant 是一个和/home/user/vagrant同步的路径．&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;结束使用&#34;&gt;结束使用&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vagrant status # 查看box状态&#xA;$ vagrant halt # 关闭box&#xA;$ vagrant reload # 重启box&#xA;$ vagrant suspend&#xA;$ vagrant resume&#xA;$ vagrant provision&#xA;&#xA;# 会销毁box占用的所有资源，但不删除box.&#xA;$ vagrant destroy&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;管理box&#34;&gt;管理box&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vagrant box list&#xA;$ vagrant box remove&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;其它&#34;&gt;其它&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vagrant global-status&#xA;$ vagrant global-status --prune&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;配置vagrantfile&#34;&gt;配置Vagrantfile&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;config.vm.box_version = &amp;quot;1.1.0&amp;quot;&#xA;cfg.vm.hostname = &amp;quot;ubuntu.labs&amp;quot;&#xA;&#xA;# 端口映射, 把主机的端口映射到vagrant的box&#xA;# 访问主机的该端口就是访问vagrant的box&#xA;cfg.vm.network :forward_port, guest: 80, host: 8080&#xA;&#xA;# 私有网络，只有主机可以访问vagrant的box.&#xA;# 如果多个vagrant的box设定在同一个网段也可以互相访问．&#xA;cfg.vm.network :private_network, ip: &amp;quot;192.168.50.10&amp;quot;&#xA;&#xA;# 公有网络，vagrant的box和主机使用一样的网络．&#xA;cfg.vm.network :public_network&#xA;cfg.vm.network :public_network, ip: &amp;quot;192.168.1.1&amp;quot;&#xA;&#xA;cfg.vm.synced_folder &amp;quot;/var/tmp/pkg-build&amp;quot;, &amp;quot;/var/tmp/pkg-build&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;打包&#34;&gt;打包&lt;/h1&gt;&#xA;&lt;p&gt;用户可以打包自己的开发环境，然后分发出去．&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django Misc</title>
      <link>https://canuxcheng.com/post/django_misc/</link>
      <pubDate>Wed, 04 Jan 2017 01:13:36 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_misc/</guid>
      <description>&lt;h1 id=&#34;django的国际化和本地化&#34;&gt;Django的国际化和本地化&lt;/h1&gt;&#xA;&lt;p&gt;settings.py里面和国际化和本地化相关的设置:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;USE_I18N = True&#xA;USE_L10N = True&#xA;TIME_ZONE = &#39;UTC&#39;&#xA;USE_TZ = True&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;国际化i18n&#34;&gt;国际化(i18N)&lt;/h2&gt;&#xA;&lt;p&gt;由开发者完成,本地化的准备工作.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.i18nguy.com/unicode/language-identifiers.html&#34;&gt;http://www.i18nguy.com/unicode/language-identifiers.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;LANGUAGE_CODE = &#39;en-us&#39; # default&#xA;&#xA;LANGUAGES = [&#xA;    (&#39;en-US&#39;, _(&#39;English&#39;)),&#xA;    (&#39;zh-CN&#39;, _(&#39;Chinese&#39;)),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;本地化l10n&#34;&gt;本地化(l10N)&lt;/h2&gt;&#xA;&lt;p&gt;由翻译者完成.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;django的安全&#34;&gt;Django的安全&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;django的性能优化&#34;&gt;Django的性能优化&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/zh-hans/3.2/topics/performance/&#34;&gt;https://docs.djangoproject.com/zh-hans/3.2/topics/performance/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;django的地理框架&#34;&gt;Django的地理框架&lt;/h1&gt;</description>
    </item>
    <item>
      <title>TSDB</title>
      <link>https://canuxcheng.com/post/database/</link>
      <pubDate>Tue, 03 Jan 2017 14:46:14 +0000</pubDate>
      <guid>https://canuxcheng.com/post/database/</guid>
      <description>&lt;h1 id=&#34;rdbms&#34;&gt;RDBMS&lt;/h1&gt;&#xA;&lt;p&gt;关系数据库管理系统。&lt;/p&gt;&#xA;&lt;p&gt;SQLite&lt;/p&gt;&#xA;&lt;p&gt;Oracle&lt;/p&gt;&#xA;&lt;p&gt;MSSQL&lt;/p&gt;&#xA;&lt;p&gt;Mysql&lt;/p&gt;&#xA;&lt;p&gt;Postgre&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;nosql&#34;&gt;NoSQL&lt;/h1&gt;&#xA;&lt;p&gt;NoSQL: Not only SQL.&lt;/p&gt;&#xA;&lt;p&gt;非关系型数据库。&lt;/p&gt;&#xA;&lt;p&gt;memcached(cache)&lt;/p&gt;&#xA;&lt;p&gt;redis(cache)&lt;/p&gt;&#xA;&lt;p&gt;mongodb&lt;/p&gt;&#xA;&lt;p&gt;hbase(hadoop)&lt;/p&gt;&#xA;&lt;p&gt;cassandra(hadoop)&lt;/p&gt;&#xA;&lt;p&gt;rethinkdb&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tsdb&#34;&gt;TSDB&lt;/h1&gt;&#xA;&lt;p&gt;Time series database.&lt;/p&gt;&#xA;&lt;p&gt;时序数据库&lt;/p&gt;&#xA;&lt;p&gt;influxdb&lt;/p&gt;&#xA;&lt;p&gt;rrdtool&lt;/p&gt;&#xA;&lt;p&gt;graphite&lt;/p&gt;&#xA;&lt;p&gt;opentsdb&lt;/p&gt;&#xA;&lt;p&gt;premetheus&lt;/p&gt;</description>
    </item>
    <item>
      <title>Awk</title>
      <link>https://canuxcheng.com/post/shell_awk/</link>
      <pubDate>Wed, 14 Dec 2016 00:55:37 +0800</pubDate>
      <guid>https://canuxcheng.com/post/shell_awk/</guid>
      <description>&lt;h1 id=&#34;awk&#34;&gt;awk&lt;/h1&gt;&#xA;&lt;p&gt;awk 是一门编程语言&lt;/p&gt;&#xA;&lt;p&gt;awk/nawk/gawk/mawk：比sed更高级的流编辑工具，是sed和grep的升级版，主要用于数据流处理。&lt;/p&gt;&#xA;&lt;p&gt;nawk： new awk。&lt;/p&gt;&#xA;&lt;p&gt;mawk： awk的解释器&lt;/p&gt;&#xA;&lt;p&gt;gawk是gnu的awk，功能更全面。&lt;/p&gt;&#xA;&lt;p&gt;awk命令格式：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;awk [-v var=value [-F *] [–] &#39;/pattern/ {action}&#39;  file&#xA;awk [-v var=value [-F *] [-f scriptfile ...] [–] file&#xA;awk [-v var=value [-F *] [-] &#39;BEGIN {} /pattern/ {action} END {}&#39;  file&#xA;BEGIN { }  在读取输入之前就操作&#xA;END { }    在读物输入之后操作&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;awk的指令需要用单引号包围；&#xA;模式需要用/pattern/包围；&#xA;过程需要用{command1；command2}包围，多个过程需要用；隔开。&lt;/p&gt;&#xA;&lt;p&gt;脚本中传递参数格式：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;awk [-f scriptfile]OR[&#39;/pattern/{action}&#39;] val1=value1 val2=value2 … file1   vala=valuea valb=valueb... file2 ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;如果通过shell传参数，把value改成$n即可。&#xA;可以通过命令返回值作为参数value。&#xA;也可以使用环境变量作为value，也可以给awk的环境变量赋值。&#xA;可以在任何位置定义变量（‘ ‘ 之后；-v之后；BEGIN中；{}中；END中）。&#xA;只有在-v和在BEGIN中定义的变量能在BEGIN中使用。&#xA;在END中定义的变量只能在END中使用，其它位置定义的变量都可以在{}中使用。&#xA;在任何位置定义的变量在END中都可以使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wordpress</title>
      <link>https://canuxcheng.com/post/wordpress/</link>
      <pubDate>Fri, 18 Nov 2016 00:06:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/wordpress/</guid>
      <description>&lt;h1 id=&#34;wordpress&#34;&gt;WordPress&lt;/h1&gt;&#xA;&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;&#xA;&lt;p&gt;安装依赖：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$sudo apt install apache2&#xA;$sudo apt install mysql-server&#xA;$sudo apt install php5&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;下载wordpress：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$cd /var/www/html&#xA;$git clone https://github.com/WordPress/WordPress.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;配置&#34;&gt;配置&lt;/h1&gt;&#xA;&lt;p&gt;添加mysql数据库：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$mysql -u root -p&#xA;mysql&amp;gt; create user &#39;wordpress&#39;@&#39;localhost&#39; identified by &#39;******&#39;;&#xA;mysql&amp;gt; create database &#39;wordpress&#39;;&#xA;mysql&amp;gt; GRANT ALL PRIVILEGES ON wordpress.* TO &amp;quot;wordpress&amp;quot;@&amp;quot;localhost&amp;quot;;&#xA;mysql&amp;gt; FLUSH PRIVILEGES;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;编辑配置文件：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;wp-config.php&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;登陆并安装站点：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;http://localhost&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;管理界面：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;http://localhost/wp-admin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;语言&#34;&gt;语言&lt;/h1&gt;&#xA;&lt;p&gt;下载相应的语言版本,中文下载中文版的wordpress.&lt;/p&gt;&#xA;&lt;p&gt;然后将wordpress/wp-content/languages拷贝到英文版的wordpress/wp-content下&lt;/p&gt;&#xA;&lt;p&gt;语言包路径:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;wordpress/wp-content/languages&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;主题&#34;&gt;主题&lt;/h1&gt;&#xA;&lt;p&gt;修改wp-config.php安装主题不用输入ftp信息：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;define(&amp;quot;FS_METHOD&amp;quot;, &amp;quot;direct&amp;quot;);&#xA;define(&amp;quot;FS_CHMOD_DIR&amp;quot;, 0777);&#xA;define(&amp;quot;FS_CHMOD_FILE&amp;quot;, 0777);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;主题安装在：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Html Form</title>
      <link>https://canuxcheng.com/post/html_form/</link>
      <pubDate>Mon, 31 Oct 2016 04:00:49 +0000</pubDate>
      <guid>https://canuxcheng.com/post/html_form/</guid>
      <description>&lt;h1 id=&#34;html表单&#34;&gt;html表单&lt;/h1&gt;&#xA;&lt;p&gt;html表单用于搜集不同类型的用户输入。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;form&#34;&gt;&lt;strong&gt;form&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;form元素定义html表单。支持全局属性和事件属性。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;action_page.py&amp;quot;&amp;gt;&#xA;&amp;lt;fieldset&amp;gt;&#xA;&amp;lt;legend&amp;gt;Form information:&amp;lt;/legend&amp;gt;&#xA;First name:&amp;lt;br&amp;gt;&#xA;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;firstname&amp;quot;&amp;gt;&#xA;&amp;lt;br&amp;gt;&#xA;Last name:&amp;lt;br&amp;gt;&#xA;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;lastname&amp;quot;&amp;gt;&#xA;&amp;lt;/fieldset&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&#xA;# accept-charset属性规定服务器可处理的表单数据字符集。&#xA;&#xA;# action属性规定当提交表单时向何处发送表单数据。&#xA;&amp;lt;form action=&amp;quot;action_page.py&amp;quot;&amp;gt;&#xA;&#xA;# autocomplete属性规定是否启用表单的自动完成功能&#xA;on/off&#xA;&#xA;# enctype属性规定在发送表单数据之前如何编码&#xA;application/x-www-form-urlencoded, 默认值，表示在发送前编码所有值．&#xA;multipart/form-data, 不编码，在使用包含文件上传控件的表单必须使用．&#xA;text/plain, 空格转换为&amp;quot;+&amp;quot;加号，不对特殊字符编码．&#xA;&#xA;# method属性规定用于发送form-data的http方法&#xA;get/post&#xA;&#xA;# name属性规定表单名称&#xA;# novalidate属性规定提交表单时不验证&#xA;&#xA;# target属性规定在何处打开URL。&#xA;_blank/_self/_parent/_top&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;input&#34;&gt;&lt;strong&gt;input&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;input元素是最重要的表单元素。支持全局属性和事件属性。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# type属性规定输入元素类型&#xA;button&#xA;checkbox&#xA;file&#xA;hidden&#xA;image&#xA;password&#xA;radio&#xA;reset&#xA;submit&#xA;text&#xA;&#xA;# name属性定义input元素名称&#xA;# value属性定义input元素默认值&#xA;readonly&#xA;disabled&#xA;size&#xA;maxlength&#xA;alt&#xA;accept&#xA;checked&#xA;src&#xA;&#xA;autocomplete&#xA;autofocus&#xA;form&#xA;formaction&#xA;formenctype&#xA;formmethod&#xA;formnovalidate&#xA;formtarget&#xA;height&#xA;width&#xA;list&#xA;max&#xA;min&#xA;multiple&#xA;pattern&#xA;placeholder&#xA;required&#xA;step&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;fieldset&#34;&gt;&lt;strong&gt;fieldset&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;fieldset元素组合表单中的相关数据，支持全局属性和事件属性&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bootstrap</title>
      <link>https://canuxcheng.com/post/js_bootstrap/</link>
      <pubDate>Thu, 27 Oct 2016 22:19:20 +0800</pubDate>
      <guid>https://canuxcheng.com/post/js_bootstrap/</guid>
      <description>&lt;h1 id=&#34;bootstrap&#34;&gt;Bootstrap&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/twbs/bootstrap&#34;&gt;https://github.com/twbs/bootstrap&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bootcss.com/&#34;&gt;https://www.bootcss.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;install:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ npm install bootstrap@next&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;HTML,CSS,JavaScript的支持响应式和移动设备的WEB框架.&lt;/p&gt;</description>
    </item>
    <item>
      <title>jQuery</title>
      <link>https://canuxcheng.com/post/js_jquery/</link>
      <pubDate>Thu, 27 Oct 2016 22:19:20 +0800</pubDate>
      <guid>https://canuxcheng.com/post/js_jquery/</guid>
      <description>&lt;h1 id=&#34;jquery&#34;&gt;jQuery&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jquery/jquery&#34;&gt;https://github.com/jquery/jquery&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jquery123.com/&#34;&gt;https://www.jquery123.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;jquery是一个js库，简化了js编程。&lt;/p&gt;&#xA;&lt;p&gt;install:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ npm install jqury&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;jquery功能：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HTML 元素选取&lt;/li&gt;&#xA;&lt;li&gt;HTML 元素操作&lt;/li&gt;&#xA;&lt;li&gt;HTML 事件函数&lt;/li&gt;&#xA;&lt;li&gt;HTML DOM 遍历和修改&lt;/li&gt;&#xA;&lt;li&gt;CSS 操作&lt;/li&gt;&#xA;&lt;li&gt;JavaScript 特效和动画&lt;/li&gt;&#xA;&lt;li&gt;AJAX&lt;/li&gt;&#xA;&lt;li&gt;Utilities&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;syntax&#34;&gt;syntax&lt;/h1&gt;&#xA;&lt;p&gt;对元素操作语法：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$(selector).action()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;文档就绪函数:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$(document).ready(function(){&#xA;    ......&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;head中:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;&#xA;&amp;lt;script type=&amp;quot;text/javascript&amp;gt;&#xA;$(document).ready(function(){&#xA;    $(&amp;quot;button&amp;quot;).click(function(){&#xA;        $(&amp;quot;p&amp;quot;).hide();&#xA;    })&#xA;})&#xA;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;独立js文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;&#xA;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/path/to/my.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;选择器&#34;&gt;选择器&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://api.jquery.com/category/selectors/&#34;&gt;https://api.jquery.com/category/selectors/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$(this).hide()   this表示当前html元素&#xA;$(&amp;quot;p.test&amp;quot;)    class=&amp;quot;test&amp;quot;的&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;元素&#xA;$(&amp;quot;p#test&amp;quot;)    id=&amp;quot;test&amp;quot;的&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;元素&#xA;$(&amp;quot;div#test .demo&amp;quot;)  id=&amp;quot;test&amp;quot;的&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;中class=demo的元素&#xA;$(&amp;quot;ul li:first&amp;quot;)  每个&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;的第一个&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;element选择器：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test</title>
      <link>https://canuxcheng.com/post/django_test/</link>
      <pubDate>Tue, 04 Oct 2016 04:51:30 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_test/</guid>
      <description>&lt;h1 id=&#34;testspy&#34;&gt;tests.py&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/tools/&#34;&gt;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/tools/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/advanced/&#34;&gt;https://docs.djangoproject.com/zh-hans/3.1/topics/testing/advanced/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;单个测试文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;vim app/tests.py&#xA;from django.test import TestCase&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;多个测试文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;mkdir -p app/tests&#xA;vi test_case1.py&#xA;vi test_case2.py&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;配置和运行&#34;&gt;配置和运行&lt;/h1&gt;&#xA;&lt;p&gt;默认情况下运行 manage.py test 会创建测试数据库运行testcase，完成后自动销毁测试数据库.&lt;/p&gt;&#xA;&lt;p&gt;测试相关配置&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;vim project/settings.py&#xA;&#xA;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;NAME&#39;: &#39;mydb&#39;,&#xA;        &#39;TEST&#39;: {&#xA;            // 默认测试数据库是&#39;NAME&#39;前加&#39;test_&#39; (eg: &#39;test_mydb&#39;)&#xA;            // 可以通过TEST.NAME指定测试数据库&#xA;            &#39;NAME&#39;: &#39;mytestdb&#39;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;# 指定runner&#xA;## 默认 django.test.runner.DiscoverRunner&#xA;TEST_RUNNER = &#39;site_main.base_tests.TestRunner&#xA;&#xA;# 指定fixture文件路径&#xA;FIXTURE_DIRS = (os.path.join(BASE_DIR, &#39;app&#39;, &#39;fixtures&#39;), )&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;运行测试程序：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ python3 manage.py test // 查找test 开头的文件运行里面的 unittest.TestCase的子类.&#xA;$ python3 manage.py test &amp;lt;package&amp;gt; // 运行指️定应用内的测试&#xA;$ python3 manage.py test &amp;lt;module&amp;gt; // 运行指定模块内的测试&#xA;$ python3 manage.py test &amp;lt;module&amp;gt;.tests.MyTestCase // 运行一个指定的testcase&#xA;$ python3 manage.py test &amp;lt;module&amp;gt;.tests.MyTestCase.test_method // 运行一个指定的test method&#xA;&#xA;--keepdb // 保留测试数据库&#xA;--parallel // 并行运行测试。&#xA;-v/--verbosity 0/1/2/3  测试输出信息级别，默认为1， 0表示不输出。&#xA;-d/--debug-sql 输出测试执行的sql语句.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;client&#34;&gt;Client&lt;/h1&gt;&#xA;&lt;p&gt;测试客户端是一个 Python 类，它充当一个虚拟的 Web 浏览器，&#xA;允许你测试视图并以编程方式与 Django 驱动的应用程序交互。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Form</title>
      <link>https://canuxcheng.com/post/django_form/</link>
      <pubDate>Tue, 04 Oct 2016 04:30:02 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_form/</guid>
      <description>&lt;h1 id=&#34;formspy&#34;&gt;forms.py&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django import forms&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;表单&#34;&gt;表单&lt;/h1&gt;&#xA;&lt;p&gt;用户在浏览器中输入数据提交，对数据验证以及输入框的生成等。&lt;/p&gt;&#xA;&lt;p&gt;django的表单系统的核心类是django.forms.Form类,所有的构建的表单都是这个类的子类。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Admin</title>
      <link>https://canuxcheng.com/post/django_admin/</link>
      <pubDate>Tue, 04 Oct 2016 04:29:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_admin/</guid>
      <description>&lt;h1 id=&#34;adminpy&#34;&gt;admin.py&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib import admin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建一个管理员用户：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ python manage.py createsuperuser&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;管理员登陆界面：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;http://localhost:8000/admin/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在admin.py中注册模型，然后就可以在登陆界面管理模型了&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from .models import Question&#xA;admin.site.register(Question)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;自定义管理表单：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from .models import Question&#xA;class QuestionAdmin(admin.ModelAdmin):&#xA;    fileds = [&#39;pub_date&#39;, &#39;question_date&#39;]&#xA;admin.site.register(Question, QuestionAdmin)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;把表单分割成字段集：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from .models import Question&#xA;class QuestionAdmin(admin.ModelAdmin):&#xA;    fieldsets = [&#xA;        (None,               {&#39;fields&#39;: [&#39;question_text&#39;]}),&#xA;        (&#39;Date information&#39;, {&#39;fields&#39;: [&#39;pub_date&#39;]}),&#xA;    ]&#xA;admin.site.register(Question, QuestionAdmin)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;后台&#34;&gt;后台&lt;/h1&gt;&#xA;&lt;p&gt;django的后台管理程序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>URL</title>
      <link>https://canuxcheng.com/post/django_url/</link>
      <pubDate>Tue, 04 Oct 2016 04:20:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_url/</guid>
      <description>&lt;h1 id=&#34;urlspy&#34;&gt;urls.py&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.urls import path, include&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;django请求站点的方法：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ROOT_URLCONF，在settings.py中设置。&lt;/li&gt;&#xA;&lt;li&gt;寻找urlpatterns，它是django.conf.urls.url()实例的一个python列表。&lt;/li&gt;&#xA;&lt;li&gt;dnango依次匹配每个URL模式，在第一个匹配停下。&lt;/li&gt;&#xA;&lt;li&gt;一旦一个正则表达式匹配，django就调用对应的视图，视图获得HttpRequest实例,如果是没有命名的组返回内容作为位置参数，如果是命名的组返回内容作为关键字参数。&lt;/li&gt;&#xA;&lt;li&gt;如果没有匹配到或者过程跑出异常，django调用合适的错误处理。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;项目的url&#34;&gt;项目的URL&lt;/h1&gt;&#xA;&lt;p&gt;项目的URL主要用来包含应用的URL以及全局的URL:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib import admin&#xA;from django.urls import path, include&#xA;&#xA;urlpatterns = [&#xA;    # 默认的项目的admin的url&#xA;    path(&#39;admin/&#39;, admin.site.urls),&#xA;    &#xA;    # 在项目URL添加链接到应用URL：&#xA;    # 在下面添加你的所有应用的url,&#xA;    path(&#39;polls/&#39;, include(&#39;polls.urls&#39;)),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;应用的url&#34;&gt;应用的URL&lt;/h1&gt;&#xA;&lt;p&gt;将应用的视图映射到URL,需要在应用目录新建urls.py文件,然后在项目的url中包含应用的url。&lt;/p&gt;&#xA;&lt;p&gt;urlpatterns是url()实例类型的python列表。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.urls import path&#xA;from . import views&#xA;&#xA;app_name = &#39;polls&#39;&#xA;&#xA;urlpatterns = [&#xA;    # 普通视图&#xA;    path(&#39;&#39;, views.index, name=&#39;index&#39;),&#xA;    # 类视图&#xA;    path(&#39;&#39;, views.IndexView.as_view(), name=&#39;index&#39;),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;没有命名的组&#34;&gt;没有命名的组&lt;/h1&gt;&#xA;&lt;p&gt;视图函数只有request参数，匹配的正则表达式作为位置参数。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;url(r&#39;^pattern1/pattern2/$&#39;, views.index, name=&#39;index&#39;),&#xA;&#xA;def index(request):&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;命名组&#34;&gt;命名组&lt;/h1&gt;&#xA;&lt;p&gt;视图函数除了request参数还有关键字参数，匹配的命名表达式组作为关键字参数,覆盖默认的关键字参数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>View</title>
      <link>https://canuxcheng.com/post/django_view/</link>
      <pubDate>Tue, 04 Oct 2016 04:20:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_view/</guid>
      <description>&lt;h1 id=&#34;viewspy&#34;&gt;views.py&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.shortcuts import render&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;定义自己的视图函数：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse&#xA;from django.template import RequestContext, loader&#xA;&#xA;# 导入模板中的类&#xA;from .models import Question&#xA;&#xA;def index(request):&#xA;    ...&#xA;    t = loader.get_template(&#39;application/index.html&#39;)&#xA;    c = RequestContext(request, {&#39;foo&#39;: &#39;bar&#39;})&#xA;    return HttpResponse(t.render(c), content_type=&amp;quot;text/html&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;当请求一个页面时django会建立一个包含请求元数据的HttpRequest对象，当django加载对应视图时，这个对象作为视图第一个参数。&lt;/p&gt;&#xA;&lt;p&gt;每个视图会返回一个HttpResponse对象。&lt;/p&gt;&#xA;&lt;p&gt;每个视图函数都用HttpRequest对象（通常用request）作为第一个参数。&lt;/p&gt;&#xA;&lt;p&gt;每个视图函数都返回一个HttpResponse对象，包含生成的响应。&lt;/p&gt;&#xA;&lt;p&gt;HttpRquest和HttpResponse在django.http包中，参考：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://python.usyiyi.cn/documents/django_182/ref/request-response.html&#34;&gt;http://python.usyiyi.cn/documents/django_182/ref/request-response.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;HttpRequest对象属性：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;request.scheme # http/https&#xA;request.body&#xA;request.path&#xA;request.path_info&#xA;request.method # GET/POST&#xA;request.encoding&#xA;request.user&#xA;request.session&#xA;request.urlconf&#xA;request.GET&#xA;request.POST&#xA;request.REQUEST&#xA;request.COOKIES&#xA;request.FILES&#xA;request.META&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;HttpRequest对象方法：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;request.get_host()&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;HttpResponse对象属性：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;response.content&#xA;response.charset&#xA;response.status_code&#xA;response.reason_phrase&#xA;response.streaming&#xA;response.closed&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;HttpResponse对象的方法：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Model</title>
      <link>https://canuxcheng.com/post/django_model/</link>
      <pubDate>Tue, 04 Oct 2016 04:20:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_model/</guid>
      <description>&lt;h1 id=&#34;modelspy&#34;&gt;models.py&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from django.db import models&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;django模型是和数据库关联的，代码放在models.py，数据库信息在settings.py中统一配置即可。&lt;/p&gt;&#xA;&lt;p&gt;每个模型对应数据库唯一的一张表，是django.db.models.Model的子类。&lt;/p&gt;&#xA;&lt;p&gt;每个模型实例代表数据库中的一条特定记录.&lt;/p&gt;&#xA;&lt;p&gt;模型的每个属性都表示为数据库中的一个字段。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在项目的settings.py中激活应用，并设置数据库相关参数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;让django包含你的应用：&lt;/p&gt;&#xA;&lt;p&gt;告诉django你对模型做了更改，并且将这些更改存储为迁移文件polls/migrations/0001_initial.py:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;  $python manage.py makemigrations polls&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;可以查看迁移文件执行了哪些sql语句,并不真的在数据库执行：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;  $python manage.py sqlmigrate polls 0001&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;可以检查项目中的模型是否存在问题：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;  $python manage.py check&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在数据库中创建模型,查找还没有被应用的迁移文件然后和数据库同步：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;  $python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;模型的字段类型和字段选项&#34;&gt;模型的字段类型和字段选项&lt;/h1&gt;&#xA;&lt;p&gt;模型的每个属性都表示为数据库的一个字段,是Field子类的某个实例。&lt;/p&gt;&#xA;&lt;p&gt;模型的字段还有一些选项。&lt;/p&gt;&#xA;&lt;p&gt;字段命名规则：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不能是python的保留关键字。&lt;/li&gt;&#xA;&lt;li&gt;字段名中连续的下划线不能超过一个。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;访问其它应用的模型,导入即可：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from &amp;lt;other-aplication&amp;gt;.models import &amp;lt;module-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;模型字段类型和选项参考：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://python.usyiyi.cn/documents/django_182/ref/models/fields.html#common-model-field-options&#34;&gt;http://python.usyiyi.cn/documents/django_182/ref/models/fields.html#common-model-field-options&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;模型字段类型&#34;&gt;模型字段类型&lt;/h2&gt;&#xA;&lt;p&gt;字段的类型都是Field类的子类：&lt;/p&gt;&#xA;&lt;p&gt;每个字段都接受一个可选的位置参数(一般是第一个），叫字段的自述名,如果不指定就默认是字段名字（下划线换成空格）。&lt;/p&gt;&#xA;&lt;p&gt;自增字段:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;AutoField&#xA;# 默认django会每个模型添加一个自增主键字段,如果你显示设置一个自增主键字段就不会默认再添加,每个模型只能有一个主键字段。&#xA;# id = models.AutoField(primary_key=True)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;普通字段:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;BigIntegerField&#xA;BinaryField&#xA;BooleanField&#xA;CharField&#xA;CommaSeparatedIntegerField&#xA;DateField&#xA;DateTimeField&#xA;DecimalField&#xA;DurationField&#xA;EmailField&#xA;FileField&#xA;FilePathField&#xA;FloatField&#xA;GenericIPAddressField&#xA;IPAddressField&#xA;ImageField&#xA;IntegerField&#xA;NullBooleanField&#xA;PositiveIntegerField&#xA;PositiveSmallIntegerField&#xA;SlugField&#xA;SmallIntegerField&#xA;TextField&#xA;TimeField&#xA;URLField&#xA;UUIDField&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;关系字段:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Template</title>
      <link>https://canuxcheng.com/post/django_template/</link>
      <pubDate>Tue, 04 Oct 2016 04:12:49 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_template/</guid>
      <description>&lt;h1 id=&#34;模板设置&#34;&gt;模板设置&lt;/h1&gt;&#xA;&lt;p&gt;模板引擎在settings.py设置, django有两套模板引擎：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;TEMPLATES = [&#xA;    # DjangoTemplates&#xA;    {&#xA;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,&#xA;        # 定义项目的通用模板, mysite/templates&#xA;        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],&#xA;        # True 表示在所有安装应用的application/templates中查找。&#xA;        &#39;APP_DIRS&#39;: True,&#xA;        # 模板的选项：&#xA;        &#39;OPTIONS&#39;: {&#xA;            &#39;context_processors&#39;: [&#xA;                &#39;django.template.context_processors.debug&#39;,&#xA;                &#39;django.template.context_processors.request&#39;,&#xA;                &#39;django.contrib.auth.context_processors.auth&#39;,&#xA;                &#39;django.contrib.messages.context_processors.messages&#39;,&#xA;            ]&#xA;        },&#xA;    },&#xA;&#xA;    # Jinja2&#xA;    {&#xA;        &#39;BACKEND&#39;: &#39;django.template.backends.jinja2.Jinja2&#39;,&#xA;        # 定义项目的通用模板, mysite/templates&#xA;        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],&#xA;        # True表示在所有已安装应用的application/jinja2中查找。&#xA;        &#39;APP_DIRS&#39;: True,&#xA;        # 模板的选项：&#xA;        &#39;OPTIONS&#39;: {&#xA;            &#39;context_processors&#39;: [&#xA;                &#39;django.template.context_processors.debug&#39;,&#xA;                &#39;django.template.context_processors.request&#39;,&#xA;                &#39;django.contrib.auth.context_processors.auth&#39;,&#xA;                &#39;django.contrib.messages.context_processors.messages&#39;,&#xA;            ]&#xA;        },&#xA;    },&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;BACKEND定义模板引擎,django内置的模板引擎有两个django.template.backends.django.DjangoTemplates(默认)和django.template.backends.jinja2.Jinja2&lt;/p&gt;&#xA;&lt;p&gt;DIRS存放自定义的不在应用路径的模板，模板引擎按列表顺序搜索查找模板源文件,默认就是默认引擎的默认路径。&lt;/p&gt;&#xA;&lt;p&gt;APP_DIRS告诉模板引擎是否进入安装应用的templates(jinja2的目录是jinja2)查找模板。&lt;/p&gt;&#xA;&lt;p&gt;在视图中使用模板：&lt;/p&gt;&#xA;&lt;p&gt;默认django会在项目的所有应用的templates中查找模板，所以为了防止多个应用有同名的模板，需要在templates下新建application同名的目录来存放模板&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploy</title>
      <link>https://canuxcheng.com/post/django_deploy/</link>
      <pubDate>Tue, 27 Sep 2016 10:23:22 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_deploy/</guid>
      <description>&lt;h1 id=&#34;发布django项目&#34;&gt;发布django项目&lt;/h1&gt;&#xA;&lt;p&gt;django内置一个轻量级web开发服务器。&lt;/p&gt;&#xA;&lt;p&gt;如果要发布django项目需要另外的操作。&lt;/p&gt;&#xA;&lt;p&gt;也可以发布到其它的云平台。&lt;/p&gt;&#xA;&lt;p&gt;一般通过wsgi或者asgi来部署.&lt;/p&gt;&#xA;&lt;h2 id=&#34;deploy时django的设置&#34;&gt;deploy时django的设置&lt;/h2&gt;&#xA;&lt;p&gt;settings.py中的设置：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ALLOWED_HOSTS = [&#39;*&#39;]&#xA;DEBUG = False&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;wsgi-部署&#34;&gt;WSGI 部署&lt;/h1&gt;&#xA;&lt;h2 id=&#34;apache2--mod_wsgi&#34;&gt;apache2 + mod_wsgi&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GrahamDumpleton/mod_wsgi&#34;&gt;https://github.com/GrahamDumpleton/mod_wsgi&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;mod_wsgi是C写的apache的模块，实现了兼容WSGI接口，用来部署python的web应用。&lt;/p&gt;&#xA;&lt;p&gt;作为apache2的模块安装&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# ubuntu/debian&#xA;sudo aptitude install apache2 # 安装apache2&#xA;sudo aptitude install libapache2-mod-wsgi # for python2&#xA;sudo aptitude install libapache2-mod-wsgi-py3 # for python3&#xA;&#xA;# redhat/centos/fedora&#xA;sudo yum install httpd2&#xA;sudo yum install httpd-devel&#xA;sudo yum install mod_wsgi&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Ubuntu创建网站的配置文件/etc/apache2/sites-available/mysite.conf:&lt;/p&gt;&#xA;&lt;p&gt;Fedora创建网站的配置文件/etc/httpd/conf.d/mysite.conf:&lt;/p&gt;&#xA;&lt;p&gt;一般部署到web服务器，/home/user/修改为/var/www/&lt;project-name&gt;/&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Include the project dir, can not inside VirtualHost section.&#xA;WSGIPythonPath /home/user/mysite&#xA;# If use virtualenv and named .venv&#xA;# WSGIPythonPath /home/user/mysite:/home/user/mysite/.venv/lib/python2.7/site-packages&#xA;&#xA;&amp;lt;VirtualHost *:80&amp;gt;&#xA;    ServerName localhost&#xA;    # ServerName yoursite.domain&#xA;    ServerAdmin canuxcheng@gmail.com&#xA;&#xA;    Alias /robots.txt /home/user/mysite/static/robots.txt&#xA;    Alias /favicon.ico /home/user/mysite/static/favicon.ico&#xA;&#xA;    Alias /media/ /home/user/mysite/media/&#xA;    Alias /static/ /home/user/mysite/static/&#xA;&#xA;    &amp;lt;Directory /home/user/mysite/media&amp;gt;&#xA;    Required all granted&#xA;    &amp;lt;/Directory&amp;gt;&#xA;&#xA;    &amp;lt;Directory /home/user/mysite/static&amp;gt;&#xA;    Required all granted&#xA;    &amp;lt;/Directory&amp;gt;&#xA;&#xA;    # If use daemon mode to run WSGI process.&#xA;    WSGIDaemonProcess mysite python-path=/home/user/mysite&#xA;    # If use virtualenv and named .venv&#xA;    # WSGIDaemonProcess mysite python-path=/home/user/mysite:/home/user/mysite/.venv/lib/python2.7/site-packages&#xA;    # WSGIProcessGroup mysite&#xA;&#xA;    WSGIScriptAlias / /home/user/mysite/mysite/wsgi.py&#xA;&#xA;    &amp;lt;Directory /home/user/mysite/mysite&amp;gt;&#xA;    &amp;lt;Files wsgi.py&amp;gt;&#xA;    Required all granted&#xA;    &amp;lt;/Files&amp;gt;&#xA;    &amp;lt;/Directory&amp;gt;&#xA;&#xA;    # check the log in /var/log/apache2/error_mysite.log or access_mysite.log&#xA;    ErrorLog ${APACHE_LOG_DIR}/error_mysite.log&#xA;    CustomLog ${APACHE_LOG_DIR}/access_mysite.log combined&#xA;&amp;lt;/VirtualHost&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;修改项目的wsgi.py:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nodejs</title>
      <link>https://canuxcheng.com/post/js_node/</link>
      <pubDate>Tue, 27 Sep 2016 03:31:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js_node/</guid>
      <description>&lt;h1 id=&#34;nodejs&#34;&gt;Nodejs&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nodejs/node&#34;&gt;https://github.com/nodejs/node&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。&lt;/p&gt;&#xA;&lt;p&gt;Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。&lt;/p&gt;&#xA;&lt;p&gt;Node.js 的包管理器npm，是全球最大的开源库生态系统.&lt;/p&gt;&#xA;&lt;p&gt;常说的javascript是前端语言，nodejs就是后端版本的javascript。&lt;/p&gt;&#xA;&lt;p&gt;安装nodejs(npm):&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install nodejs&#xA;$ brew install nodejs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ node --version&#xA;$ npm --version&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;nvm&#34;&gt;nvm&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;https://github.com/nvm-sh/nvm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;nodejs版本管理器.&lt;/p&gt;&#xA;&lt;p&gt;install:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;verify:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;command -v nvm&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 查看所有可安装版本&#xA;nvm ls-remote&#xA;&#xA;// 安装指定版本&#xA;nvm install v14.15.5&#xA;&#xA;// 查看已安装版本&#xA;nvm ls&#xA;&#xA;// 指定默认版本&#xA;nvm alias default v16.14.0&#xA;&#xA;// 指定版本&#xA;nvm use v14.15.5&#xA;nvm use default&#xA;&#xA;// 查看版本&#xA;nvm run node --version&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>NPM</title>
      <link>https://canuxcheng.com/post/js_npm/</link>
      <pubDate>Tue, 27 Sep 2016 03:31:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/js_npm/</guid>
      <description>&lt;h1 id=&#34;npm&#34;&gt;NPM&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.cn/&#34;&gt;https://www.npmjs.cn/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;npm: node package manager.&lt;/p&gt;&#xA;&lt;p&gt;npm 由三部分组成：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;website &lt;a href=&#34;https://www.npmjs.com&#34;&gt;https://www.npmjs.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;CLI&lt;/li&gt;&#xA;&lt;li&gt;registry &lt;a href=&#34;https://registry.npmjs.org&#34;&gt;https://registry.npmjs.org&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;config:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 修改registry&#xA;$ npm config set registry https://registry.npm.taobao.org&#xA;$ npm config get registry&#xA;&#xA;// 修改默认全局安装路径&#xA;mkdir /path/npm_global&#xA;npm config set prefix /path/npm_global&#xA;echo &#39;export PATH=/path/npm_global/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.profile&#xA;source ~/.profile&#xA;&#xA;// 查看配置&#xA;$ npm config ls -l&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;install:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 根据当前目录package.json安装到当前目录node_modules&#xA;$ npm install&#xA;&#xA;// 安装pkg到当前目录的 node_modules&#xA;$ npm install &amp;lt;pkg&amp;gt;&#xA;&#xA;// 安装到全局的node_modules&#xA;$ npm install -g &amp;lt;name&amp;gt;&#xA;&#xA;--save-dev // 安装并自动更新到package.json的devDependencies.&#xA;--no-save // 不保存到package.json 和 package-lock.json.&#xA;--no-package-lock // 不生成package-lock.json&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;list:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web</title>
      <link>https://canuxcheng.com/post/web/</link>
      <pubDate>Tue, 27 Sep 2016 03:25:26 +0000</pubDate>
      <guid>https://canuxcheng.com/post/web/</guid>
      <description>&lt;h1 id=&#34;web&#34;&gt;WEB&lt;/h1&gt;&#xA;&lt;p&gt;web一般包括web server, web service, load balancing.&lt;/p&gt;&#xA;&lt;p&gt;URL: Uniform Resource Locator, 统一资源定位符．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;scheme://host[:port#]/path/.../[?query-string][#anchor]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;DNS: Domain Name System, 域名系统.&lt;/p&gt;&#xA;&lt;p&gt;header: header中用来保存session，cookie等头部信息．&lt;/p&gt;&#xA;&lt;p&gt;session: 服务端的数据存储机制．&lt;/p&gt;&#xA;&lt;p&gt;cookie: 客户端的数据存储机制．分为会话cookie和持久cookie.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;webserver&#34;&gt;webserver&lt;/h1&gt;&#xA;&lt;p&gt;LAMP: Linux+apache+mysql+php&lt;/p&gt;&#xA;&lt;p&gt;LNMP: Linux+nginx+mysql+php&lt;/p&gt;&#xA;&lt;h1 id=&#34;blog静态站点&#34;&gt;Blog静态站点&lt;/h1&gt;&#xA;&lt;p&gt;hugo是golang开发的静态站点生成器．&lt;/p&gt;&#xA;&lt;p&gt;pelican是python开发的静态站点生成器.&lt;/p&gt;&#xA;&lt;p&gt;hexo是nodejs开发的静态站点生成器.&lt;/p&gt;&#xA;&lt;p&gt;jekyll是ruby开发的静态站点生成器.&lt;/p&gt;&#xA;&lt;p&gt;octopress是ruby开发的kekyll的升级版.&lt;/p&gt;&#xA;&lt;h1 id=&#34;cms系统&#34;&gt;CMS系统&lt;/h1&gt;&#xA;&lt;p&gt;wordpress是php开发的website, blog, app框架。&lt;/p&gt;&#xA;&lt;p&gt;joomla是php开发的内容管理系统.&lt;/p&gt;&#xA;&lt;p&gt;drupal是php开发的内容管理系统.&lt;/p&gt;&#xA;&lt;p&gt;django-cms是python开发的基于django的内容管理系统.&lt;/p&gt;&#xA;&lt;p&gt;wagtail是python开发的基于django的内容管理系统.&lt;/p&gt;&#xA;&lt;p&gt;mezzanine是python开发的基于django的内容管理系统.&lt;/p&gt;&#xA;&lt;h1 id=&#34;forum系统&#34;&gt;Forum系统&lt;/h1&gt;&#xA;&lt;p&gt;vanilla是php开发的论坛系统.&lt;/p&gt;&#xA;&lt;p&gt;phpbb是php开发的论坛系统.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;webservice&#34;&gt;webservice&lt;/h1&gt;&#xA;&lt;p&gt;web service是一种标准,将应用程序转换成网络应用程序.&lt;/p&gt;&#xA;&lt;p&gt;WSDL:网络服务描述语言&lt;/p&gt;&#xA;&lt;p&gt;UDDI:&lt;/p&gt;&#xA;&lt;p&gt;RDF:&lt;/p&gt;&#xA;&lt;p&gt;RSS:&lt;/p&gt;&#xA;&lt;p&gt;SOAP: 是一种简单的基于XML的协议，它使应用程序通过HTTP来交换信息。&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>TPL</title>
      <link>https://canuxcheng.com/post/django_tpl/</link>
      <pubDate>Tue, 27 Sep 2016 01:33:42 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django_tpl/</guid>
      <description>&lt;h1 id=&#34;django-third-party-library&#34;&gt;Django Third Party Library.&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rosarior/awesome-django&#34;&gt;https://github.com/rosarior/awesome-django&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Add this application to your django project in settings.py.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = (&#xA;    &#39;south&#39;,&#xA;    &#39;debug_toolbar&#39;,&#xA;    &#39;crispy_forms&#39;,&#xA;    ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;django-rest-framework&#34;&gt;django-rest-framework&lt;/h1&gt;&#xA;&lt;p&gt;django的RESTful API的application。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tomchristie/django-rest-framework/tree/master&#34;&gt;https://github.com/tomchristie/django-rest-framework/tree/master&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-json-api/django-rest-framework-json-api&#34;&gt;https://github.com/django-json-api/django-rest-framework-json-api&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SimpleJWT/django-rest-framework-simplejwt&#34;&gt;https://github.com/SimpleJWT/django-rest-framework-simplejwt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;admin-interface&#34;&gt;admin interface&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/geex-arts/django-jet&#34;&gt;https://github.com/geex-arts/django-jet&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sehmaschine/django-grappelli&#34;&gt;https://github.com/sehmaschine/django-grappelli&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/darklow/django-suit&#34;&gt;https://github.com/darklow/django-suit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sshwsfc/xadmin&#34;&gt;https://github.com/sshwsfc/xadmin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;authentication&#34;&gt;authentication&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/etianen/django-python3-ldap&#34;&gt;https://github.com/etianen/django-python3-ldap&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pennersr/django-allauth/&#34;&gt;https://github.com/pennersr/django-allauth/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-guardian/django-guardian&#34;&gt;https://github.com/django-guardian/django-guardian&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;database&#34;&gt;database&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-dbbackup/django-dbbackup&#34;&gt;https://github.com/django-dbbackup/django-dbbackup&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;debug&#34;&gt;debug&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jazzband/django-debug-toolbar&#34;&gt;https://github.com/jazzband/django-debug-toolbar&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-extensions/django-extensions/&#34;&gt;https://github.com/django-extensions/django-extensions/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;form&#34;&gt;form&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-crispy-forms/django-crispy-forms&#34;&gt;https://github.com/django-crispy-forms/django-crispy-forms&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;search&#34;&gt;search&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/carltongibson/django-filter&#34;&gt;https://github.com/carltongibson/django-filter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-haystack/django-haystack&#34;&gt;https://github.com/django-haystack/django-haystack&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;security&#34;&gt;security&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/adamchainz/django-cors-headers&#34;&gt;https://github.com/adamchainz/django-cors-headers&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cms-project&#34;&gt;CMS Project&lt;/h1&gt;&#xA;&lt;h2 id=&#34;django-cms&#34;&gt;django-cms&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/divio/django-cms/&#34;&gt;https://github.com/divio/django-cms/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;wagtail&#34;&gt;wagtail&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wagtail/wagtail&#34;&gt;https://github.com/wagtail/wagtail&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;mezzanine&#34;&gt;mezzanine&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stephenmcd/mezzanine/&#34;&gt;https://github.com/stephenmcd/mezzanine/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;e-commerce-project&#34;&gt;e-Commerce Project&lt;/h1&gt;&#xA;&lt;h2 id=&#34;django-oscar&#34;&gt;django-oscar&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django-oscar/django-oscar&#34;&gt;https://github.com/django-oscar/django-oscar&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;django-shop&#34;&gt;django-shop&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/awesto/django-shop&#34;&gt;https://github.com/awesto/django-shop&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;pm-project&#34;&gt;PM Project&lt;/h1&gt;&#xA;&lt;h2 id=&#34;taiga&#34;&gt;taiga&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taigaio&#34;&gt;https://github.com/taigaio&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache</title>
      <link>https://canuxcheng.com/post/apache/</link>
      <pubDate>Tue, 27 Sep 2016 03:25:26 +0800</pubDate>
      <guid>https://canuxcheng.com/post/apache/</guid>
      <description>&lt;h1 id=&#34;apache&#34;&gt;Apache&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/httpd&#34;&gt;https://github.com/apache/httpd&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://httpd.apache.org/&#34;&gt;http://httpd.apache.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ubuntu/debian：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sudo aptitude install apache2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;redhat/centos/fedora:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo yum install httpd2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;启动服务器：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;service apache2 start&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;启动浏览器查看：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;http://localhost:80&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;apache命令&#34;&gt;apache命令&lt;/h1&gt;&#xA;&lt;p&gt;apache2ctl:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 检查配置&#xA;$ apache2ctl configtest&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;a2ensite&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 启用一个站点&#xA;$ sudo a2ensite &amp;lt;site&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;a2dissite&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo a2dissite &amp;lt;site&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;a2enmod&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 启用一个模块&#xA;$ sudo a2enmod &amp;lt;mod&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;a2dismod&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo a2dismod &amp;lt;mod&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;配置&#34;&gt;配置&lt;/h1&gt;&#xA;&lt;p&gt;配置站点site-enable/site.conf:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:8080&amp;gt;&#xA;    ServerAdmin webmaster@localhost&#xA;    DocumentRoot /opt&#xA;&#xA;    # 适合多目录&#xA;    Alias /qa /opt/qa&#xA;    Alias /dev /opt/dev&#xA;&#xA;    ErrorLog ${APACHE_LOG_DIR}/error.log&#xA;    CustomLog ${APACHE_LOG_DIR}/access.log combined&#xA;&amp;lt;/VirtualHost&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;修改权限apache2.conf:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django</title>
      <link>https://canuxcheng.com/post/django/</link>
      <pubDate>Tue, 20 Sep 2016 23:14:07 +0000</pubDate>
      <guid>https://canuxcheng.com/post/django/</guid>
      <description>&lt;h1 id=&#34;django&#34;&gt;Django&lt;/h1&gt;&#xA;&lt;p&gt;django是python的web框架。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/django/django&#34;&gt;https://github.com/django/django&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;https://www.djangoproject.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/zh-hans/3.1/contents/&#34;&gt;https://docs.djangoproject.com/zh-hans/3.1/contents/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;django遵守MVC设计模式，采用MTV框架。&lt;/p&gt;&#xA;&lt;p&gt;M: model,数据存取&lt;/p&gt;&#xA;&lt;p&gt;T: template，如何展现数据&lt;/p&gt;&#xA;&lt;p&gt;V: view，展现哪些数据&lt;/p&gt;&#xA;&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/zh-hans/3.1/faq/install/#faq-python-version-support&#34;&gt;https://docs.djangoproject.com/zh-hans/3.1/faq/install/#faq-python-version-support&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;django1.11是最后一个支持python2.7的长期支持版(2017.4).&lt;/p&gt;&#xA;&lt;p&gt;django2.0开始只支持python3(2018).&lt;/p&gt;&#xA;&lt;p&gt;本文以django3.1为例创建名为next的project.&lt;/p&gt;&#xA;&lt;p&gt;virtualenv中安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$mkdir next&#xA;$cd next&#xA;$virtualenv .venv&#xA;&#xA;# mac/linux&#xA;$source .venv/bin/activate&#xA;&#xA;# windows&#xA;&amp;gt;cd .venv/Scripts&#xA;&amp;gt;activate&#xA;&#xA;$pip install django&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;验证安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$python&#xA;&amp;gt;&amp;gt;&amp;gt;import django&#xA;&amp;gt;&amp;gt;&amp;gt;django.VERSION&#xA;&amp;gt;&amp;gt;&amp;gt;django.get_version()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;安装使用的数据库引擎的库：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo udo apt-get install libmysqlclient-dev&#xA;$ pip install mysqlclient&#xA;&#xA;$pip install psycopg2&#xA;&#xA;$pip install cx_Oracle&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;django默认是mysqlclient，可以使用pymysql替代：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# vim settings.py&#xA;import pymysql&#xA;pymysql.version_info = (1, 4, 13, &amp;quot;final&amp;quot;, 0)&#xA;pymysql.install_as_MySQLdb()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;project&#34;&gt;project&lt;/h1&gt;&#xA;&lt;p&gt;创建一个名为next的项目&lt;/p&gt;</description>
    </item>
    <item>
      <title>Http</title>
      <link>https://canuxcheng.com/post/http/</link>
      <pubDate>Tue, 13 Sep 2016 01:39:34 +0000</pubDate>
      <guid>https://canuxcheng.com/post/http/</guid>
      <description>&lt;h1 id=&#34;httphttps&#34;&gt;HTTP/HTTPS&lt;/h1&gt;&#xA;&lt;p&gt;http port: 80&lt;/p&gt;&#xA;&lt;p&gt;https port: 443&lt;/p&gt;&#xA;&lt;p&gt;http/https的请求方式：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;get # 从服务器取出资源&#xA;post # 在服务器新建资源&#xA;put # 在服务器更新资源，客户端提供改变后的完整资源&#xA;delete # 从服务器删除资源&#xA;patch # 在服务器更新资源，客户端提供改变的属性&#xA;head # 获取资源的源数据&#xA;options # 获取资源的哪些信息是客户端可以改变的信息&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;URL: Uniform Resource Locator&lt;/p&gt;&#xA;&lt;p&gt;URI: Universal Resource Identifier&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;scheme&amp;gt;://&amp;lt;netloc&amp;gt;/&amp;lt;path&amp;gt;;&amp;lt;params&amp;gt;?&amp;lt;query&amp;gt;#&amp;lt;fragment&amp;gt;&#xA;scheme: http/https/ftp/file&#xA;netloc: username:password@host:port&#xA;path: /path/to/path&#xA;params: options arguments&#xA;query: connector&amp;amp;key-value&#xA;fragment:&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;http命令&#34;&gt;http命令&lt;/h1&gt;&#xA;&lt;h2 id=&#34;curl&#34;&gt;curl&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ curl [options] [URL...]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;httpie&#34;&gt;httpie&lt;/h2&gt;&#xA;&lt;p&gt;python开发的类似于curl的命令行工具，同时还有wget的功能．&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jakubroztocil/httpie&#34;&gt;https://github.com/jakubroztocil/httpie&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo yum/apt-get install httpie&#xA;&#xA;$ http -a &#39;username:password&#39; GET http://google.com&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;python的http标准库&#34;&gt;python的http标准库&lt;/h1&gt;&#xA;&lt;p&gt;python2的http标准库&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_builtins</title>
      <link>https://canuxcheng.com/post/psl_builtins/</link>
      <pubDate>Mon, 15 Aug 2016 11:16:29 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_builtins/</guid>
      <description>&lt;h1 id=&#34;_builtins_&#34;&gt;_&lt;em&gt;builtins&lt;/em&gt;_&lt;/h1&gt;&#xA;&lt;p&gt;python的内置模块，所有python的内置功能都在这个模块中，不需要import导入就可以使用。&lt;/p&gt;&#xA;&lt;p&gt;包括内置类类型以及所属的内置方法，和内置函数.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;builtin&lt;/strong&gt; - 包括内置类类型以及所属的内置方法，和内置函数.解释器不会自动导入．&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;builtins&lt;/strong&gt; - 仅仅是__builtin__的一个引用．解释器自动导入的．&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;内置常量&lt;/p&gt;&#xA;&lt;p&gt;内置函数(BIF)&lt;/p&gt;&#xA;&lt;p&gt;内置类型(BIT)&lt;/p&gt;&#xA;&lt;p&gt;工厂函数：python内置的类型都有对应的类的实现，同名的类的方法就是工厂函数．&lt;/p&gt;&#xA;&lt;p&gt;内置类型的内置方法(BIM)&lt;/p&gt;&#xA;&lt;p&gt;内置异常&lt;/p&gt;&#xA;&lt;p&gt;该模块是通过C/C++实现的．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;内置函数&#34;&gt;内置函数&lt;/h1&gt;&#xA;&lt;p&gt;python2和python3共同的内置函数：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;__import__(name, globals={}, locals={}, fromlist=[], level=-1) # import关键字实际调用该函数&#xA;&#xA;compile(source, filename, mode[, flags[, dont_inherit]])&#xA;# 编译source返回一个code对象(代码对象)．&#xA;# mode: exec, 用于模块 python2可以用exec关键字执行,python3改成exec()函数;&#xA;module = &amp;quot;for i in xrange(10): print(i)&amp;quot;&#xA;code = compile(module, &#39;&#39;, &#39;exec&#39;)&#xA;type(code) # code&#xA;exec code&#xA;# mode: single, 用于单行语句, 也是用exec执行;&#xA;code = compile(&amp;quot;print &#39;test&#39;&amp;quot;, &#39;&#39;, single)&#xA;type(code) # code&#xA;exec code&#xA;# mode: eval, 用于表达式 可以用eval()函数执行． eg:&#xA;expression = &amp;quot;3 * 4&amp;quot;&#xA;code = compile(expression, &#39;&#39;, &#39;eval&#39;)&#xA;type(code) # code&#xA;eval(code)&#xA;&#xA;eval(source[, globals[, locals]])&#xA;# 返回python表达式的结果，source可以是compile()返回的代码对象，也可以是一个表达式．&#xA;&#xA;format(value[, format_spec]) # 返回格式化后的字符串形式．&#xA;&#xA;## 环境变量相关&#xA;globals() # 返回当前作用域的全局名称空间的字典．&#xA;locals() # 返回当前作用域的局部名称空间的字典．&#xA;&#xA;## 数字类型的数学运算&#xA;abs(number) # 返回int/long的绝对值&#xA;divmod(x, y) # 返回x/y 的　(商，余数) 组成的元组&#xA;pow(x, y[, z]) # 返回x**y或(x**y) % z&#xA;round(number[, ndigits]) # 返回number四舍五入后的结果，ndigits表示小数点后的位数，默认是0.&#xA;chr(i) # 返回整数ｉ对应的ASCII字符的字符串形式，0 &amp;lt;= i &amp;lt; 256.&#xA;ord(c) # 返回字符ASCII字符c对应的整数.&#xA;bin(number) # 返回int/long的二进制的字符串形式&#xA;oct(number) # 返回int/long的八进制的字符串形式．&#xA;hex(number) # 返回int/long的十六进制的字符串形式.&#xA;&#xA;## 对象相关的操作&#xA;id(object) # 返回一个对象的ID, 用内存地址作为ID来表示唯一性. 也就是对象的身份．等价is关键字.&#xA;repr(object) # 返回object的标准字符串形式，可以通过eval()重新得到该对象．eval(repr(object)) == object.&#xA;callable(object) # 如果object是可调用的返回True, 需要实现魔法方法__call__()&#xA;hash(object) # 返回一个对象的散列/哈希(hash)值，有相同值的对象hash值相同.可用做字典的键.&#xA;len(object) # 返回序列（str, tuple, list)或映射（dict)的长度&#xA;dir([object]) # 查看对象的信息&#xA;getattr(object, name[, default]) # 如果object.name存在,返回name的值，否则如果default存在，返回default,否则抛出异常AttributeError, 和super的查找顺序一样．&#xA;hasattr(object, name) # 和getattr一样，但是捕获了异常，object.name存在返回True,否则返回False.&#xA;setattr(object, name, value) # 给对象的属性赋值，相当于object.name = value&#xA;delattr(object, name) # 删除对象object的属性name&#xA;isinstance(object, class-or-type-or-tuple) # 如果object是class-or-type中指定的类或类型的实例或子类的实例，返回True,否则返回False.&#xA;issubclass(C, B-or-(B,A)) # 如果C是B或(B,A,...)中的类的子类，返回True,否则返回False. 不严格子类也允许，例如一个类可以看作是自身的子类．&#xA;vars([object]) # 没有参数等于locals()，有参数等于object.__dict__.&#xA;&#xA;## related to iterable&#xA;min(iterable[, key=func]) # 返回可迭代对象iterable中的最小元素&#xA;min(a, b, c, ...[, key=func])  # 返回a,b,c...中的最小元素&#xA;max(iterable[, key=func]) # 和min相反&#xA;max(a, b, c, ...[, key=func]) # 和min相反&#xA;all(iterable) # 如果可迭代的参数iterable中所有的元素都不是0,False,&#39;&#39;则返回True,iterable为空也返回True,否则返回False&#xA;any(iterable) # 如果可迭代的参数iterable中所有的元素都是0,False,&#39;&#39;则返回False,　否则返回True&#xA;sum(sequence[, start]) # 返回数字序列sequence的所有元素加上start的和，start默认是０．&#xA;&#xA;## related to iterator&#xA;iter(collection) # 将可迭代对象（str, tuple, list, dict的键,集合,文件的行等）转换成迭代器,返回迭代器对象.&#xA;iter(callable, sentinel) # 第一个参数需要是callable的，每次迭代到sentinel停止．&#xA;next(iterator[, default]) # 返回迭代器iterator中的下一个元素，如果没有元素了，default指定内容返回该内容，否则抛出StopIteration异常．&#xA;&#xA;## related to input&#xA;input([prompt]) # 等于eval(raw_input(prompt))&#xA;# 根据prompt提示输入内容，返回输入的内容,如果是表达式会先求值再返回.&#xA;&#xA;## related to file&#xA;open(name[, mode[, buffering]]) # 打开一个文件，返回一个file类类型的对象．&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;[New]python3新增的内置函数：&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_Concurrency</title>
      <link>https://canuxcheng.com/post/psl_concurrency/</link>
      <pubDate>Mon, 15 Aug 2016 11:04:12 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_concurrency/</guid>
      <description>&lt;h1 id=&#34;concurrent-execution&#34;&gt;Concurrent Execution&lt;/h1&gt;&#xA;&lt;p&gt;进程：每个进程都有自己的地址空间，内存，数据栈以及其它记录其运行轨迹的辅助数据，进程间不共享全局变量。&lt;/p&gt;&#xA;&lt;p&gt;线程：线程（有时被称为轻量级进程）跟进程有些相似，不同的是，所有的线程运行在同一个进程中，共享相同的运行环境，同一个进程的线程之间共享全局变量。&lt;/p&gt;&#xA;&lt;p&gt;IPC: 进程/线程之间交换信息叫进程间通信．&lt;/p&gt;&#xA;&lt;p&gt;python的多线程由于GIL只有并发没有并行，无论有多少cpu,一次只能有一个python解释器(线程)执行.一次只能执行一个线程.一次只能用到一个逻辑cpu.&lt;/p&gt;&#xA;&lt;p&gt;IO密集型任务消耗IO,但是不消耗CPU,cpu切换消耗少,适合用多线程.&lt;/p&gt;&#xA;&lt;p&gt;python的多进程可以并行,每个进程启动一个解释器进程.&lt;/p&gt;&#xA;&lt;p&gt;多进程开销大，消耗内存.&lt;/p&gt;&#xA;&lt;p&gt;计算密集型消耗cpu,任务个数不超过cpu个数．适合用多进程，把每个cpu跑满.&lt;/p&gt;&#xA;&lt;h2 id=&#34;multiprocessing&#34;&gt;multiprocessing&lt;/h2&gt;&#xA;&lt;p&gt;多进程就是同时执行多个任务.&lt;/p&gt;&#xA;&lt;p&gt;python可以通过多进程取代多线程，从而绕过多线程的GIL.&lt;/p&gt;&#xA;&lt;p&gt;python是静态语言，&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import multiprocessing&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# multiprocessing.Process&#xA;proc = Process(group=None, target=None, name=None, args=(), kwargs={})&#xA;# methods:&#xA;run(self)&#xA;start(self) # 启动一个进程&#xA;join(self, timeout=None) # 父进程等待子进程结束&#xA;is_alive()&#xA;terminate(self)&#xA;# data descriptor:&#xA;authkey&#xA;daemon # proc.daemon = True 后台运行&#xA;exitcode&#xA;ident&#xA;name&#xA;pid&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 普通函数&#xA;active_children()&#xA;allow_connection_pickling()&#xA;cpu_count() # 获取cpu个数&#xA;current_process()&#xA;freeze_support()&#xA;get_logger()&#xA;log_to_stderr(level=None)&#xA;&#xA;Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None)&#xA;pool = Pool()&#xA;# func只能是顶层函数，不能是方法和内部函数.&#xA;# 进程池，可以控制进程数量,processes 默认是cpu个数(cpu_count())&#xA;# 非阻塞，维持进程总数，当一个进程结束会添加新的进程到pool,主进程不阻塞，同步运行，pool中的进程并发执行.&#xA;apply_async(func, args=(), kwargs={}, callback=None) # 非阻塞,&#xA;map_async(func, iterable, chunksize=None, callback=None) # 非阻塞&#xA;# 阻塞，维持进程总数，当一个进程结束会添加新的进程到pool，主进程阻塞，pool中的进程一个一个执行.&#xA;apply(func, args=(), kwargs={}) # 阻塞&#xA;map(func, itreable, chunksize=None) # 阻塞&#xA;terminate() # 终止所有任务&#xA;close() # 关闭pool,不接受新任务&#xA;join() # 等待pool中子进程结束，要在close/terminate之后调用.&#xA;&#xA;# IPC: 管道&#xA;Pipe(duplex=True) # duplex=True表示默认是双向pipe.&#xA;receiver, sender = Pipe()&#xA;sender.send(obj)&#xA;receiver.recv()&#xA;close()&#xA;&#xA;# IPC: 消息队列&#xA;# 来自于Queue.Queue, 具体方法参考Queue.Queue&#xA;Queue(maxsize=0) # return a queue object&#xA;q = Queue()&#xA;&#xA;# IPC: 共享内存&#xA;Manager()&#xA;list, dict, Namespace, Lock, RLock, Semaphore, BoundedSemaphore, Condition, Event, Queue, Value and Array&#xA;&#xA;Array(typecode_or_type, size_or_initializer, **kwds)&#xA;&#xA;RawArray(typecode_or_type, size_or_initializer)&#xA;&#xA;Value(typecode_or_type, *args, **kwds)&#xA;&#xA;RawValue(typecode_or_type, *args)&#xA;&#xA;Event()&#xA;&#xA;# 同步：　条件变量&#xA;Condition(lock=None)&#xA;&#xA;# 同步：信号量&#xA;Semaphore(value=1)&#xA;&#xA;# 同步：有界信号量&#xA;BoundedSemaphore(value=1)&#xA;&#xA;# 同步： 锁&#xA;Lock()&#xA;&#xA;# 同步: 锁&#xA;RLock()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;data:&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_Python</title>
      <link>https://canuxcheng.com/post/psl_python/</link>
      <pubDate>Mon, 15 Aug 2016 11:04:12 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_python/</guid>
      <description>&lt;h1 id=&#34;python-runtime-services&#34;&gt;Python Runtime Services&lt;/h1&gt;&#xA;&lt;h2 id=&#34;_builtin_&#34;&gt;_&lt;em&gt;builtin&lt;/em&gt;_&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;builtin&lt;/strong&gt;/builtins - Built-in functions, exceptions, and other objects.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;python2叫__builtin__&lt;/p&gt;&#xA;&lt;p&gt;python3叫builtins&lt;/p&gt;&#xA;&lt;h2 id=&#34;_main_&#34;&gt;_&lt;em&gt;main&lt;/em&gt;_&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;main&lt;/strong&gt; - Top-level script environment.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;if __name__ == &amp;quot;__main__&amp;quot;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;当作为顶层脚本运行时(&lt;strong&gt;main&lt;/strong&gt;), 当作为一个模块运行时候就是模块名称．&lt;/p&gt;&#xA;&lt;h2 id=&#34;_future_&#34;&gt;_&lt;em&gt;future&lt;/em&gt;_&lt;/h2&gt;&#xA;&lt;p&gt;把下一个版本的新特性导入到当前版本。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from __future__ import &amp;lt;feature_name&amp;gt;&#xA;&#xA;# feature name:&#xA;all_feature_names # 一次导入所有feature&#xA;absolute_import # 绝对导入&#xA;division&#xA;generators&#xA;nested_scopes&#xA;print_function&#xA;unicode_literals # python2中u&#39;string&#39;才表示unicode, &#39;string&#39;表示str，python3中所有字符串都是unicode。&#xA;with_statement&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;data:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;all_feature_names&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;sys&#34;&gt;sys&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import sys&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Dynamic objects:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 动态对象&#xA;sys.argv # 命令行参数的列表，sys.argv[0]是程序名称, len(sys.argv)就是C语言中的argc&#xA;sys.path # 搜索的路径．import导入模块的搜索路径．&#xA;sys.modules # 字典格式的加载的模块.已经导入并加载的模块会加进来．&#xA;sys.stdin # 标准输入，用于input()&#xA;sys.stdout # 标准输出，用于print&#xA;sys.stderr # 标准出错&#xA;displayhook -- called to show results in an interactive session&#xA;excepthook --&#xA;last_type -- type of last uncaught exception&#xA;last_value -- value of last uncaught exception&#xA;last_traceback --&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Static objects:&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_System</title>
      <link>https://canuxcheng.com/post/psl_system/</link>
      <pubDate>Mon, 15 Aug 2016 11:04:12 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_system/</guid>
      <description>&lt;h1 id=&#34;generic-operating-system-services&#34;&gt;Generic Operating System Services&lt;/h1&gt;&#xA;&lt;h2 id=&#34;os&#34;&gt;os&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import os&#xA;&#xA;os.path # 参考PSL_File&#xA;os.name&#xA;os.curdir&#xA;os.pardir # 表示上一级路径.., 需要用abspath解析&#xA;# os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), os.pardir))&#xA;os.sep&#xA;os.extsep&#xA;os.altsep&#xA;os.pathsep&#xA;os.linesep&#xA;os.defpath&#xA;os.devnull&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;WCOREDUMP(...)&#xA;...&#xA;&#xA;abort(...)&#xA;fork() # 创建一个子进程，返回0给子进程，返回子进程pid给父进程．&#xA;exec*&#xA;wait() # 等待子进程结束，返回(pid, status).&#xA;waitpid(pid, options) # 等待指定子进程结束.&#xA;listdir(path) # 列出目录下的文件和目录&#xA;makedirs(path [, mode=0o777], exist_ok=False)&#xA;mkdir(path [, mode=0777])&#xA;walk(top, topdown=True, onerror=None, followlinks=False) # 返回 (dirpath, dirnames, filenames) 类型的迭代器&#xA;remove(path) # 删除文件&#xA;rmdir(path) # 删除目录&#xA;removedirs(path)&#xA;symlink(src, dst)&#xA;chown(path, uid, gid)&#xA;chmod(path, mode=0o777)&#xA;...&#xA;&#xA;# 使用subprocess模块代替下列函数：&#xA;system(command) # 在subshell执行命令，返回退出码(windows系统始终为0),而非命令执行结果．&#xA;spawn*&#xA;popen*(command [, mode=&#39;r&#39; [, bufsize]]) # 执行命令，返回命令执行结果的文件句柄(file对象)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;data:&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_GUI</title>
      <link>https://canuxcheng.com/post/psl_gui/</link>
      <pubDate>Mon, 15 Aug 2016 10:28:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_gui/</guid>
      <description>&lt;h1 id=&#34;gui&#34;&gt;GUI&lt;/h1&gt;&#xA;&lt;h2 id=&#34;tkinter&#34;&gt;Tkinter&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ttk&#34;&gt;ttk&lt;/h2&gt;&#xA;&lt;h2 id=&#34;tix&#34;&gt;Tix&lt;/h2&gt;&#xA;&lt;h2 id=&#34;scrolledtext&#34;&gt;ScrolledText&lt;/h2&gt;&#xA;&lt;h2 id=&#34;turtle&#34;&gt;turtle&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tpl&#34;&gt;TPL&lt;/h1&gt;&#xA;&lt;p&gt;相关的第三方库&lt;/p&gt;&#xA;&lt;h2 id=&#34;wxwidgets&#34;&gt;wxWidgets&lt;/h2&gt;&#xA;&lt;p&gt;python2的库叫wxPython.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.wxpython.org/&#34;&gt;https://www.wxpython.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Windows下载安装包安装即可．&#xA;$ sudo apt-get install python-wxgtk2.8&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;python３启用新的项目phoneix.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wxWidgets/Phoenix&#34;&gt;https://github.com/wxWidgets/Phoenix&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;gtk&#34;&gt;gtk&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;PyGTK&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;qt&#34;&gt;qt&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;PyQt&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>PSL_Misc</title>
      <link>https://canuxcheng.com/post/psl_misc/</link>
      <pubDate>Mon, 15 Aug 2016 10:28:46 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_misc/</guid>
      <description>&lt;h1 id=&#34;psl&#34;&gt;PSL&lt;/h1&gt;&#xA;&lt;p&gt;Python Standard Library: Python标准库&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;internationalization&#34;&gt;Internationalization&lt;/h1&gt;&#xA;&lt;h2 id=&#34;gettext&#34;&gt;gettext&lt;/h2&gt;&#xA;&lt;h2 id=&#34;locale&#34;&gt;locale&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;program-frameworks&#34;&gt;Program Frameworks&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cmd&#34;&gt;cmd&lt;/h2&gt;&#xA;&lt;h2 id=&#34;shlex&#34;&gt;shlex&lt;/h2&gt;&#xA;&lt;p&gt;类shell的词法分析．&lt;/p&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;shlex&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;split(s, comments=False, posix=True)&#xA;# split(&amp;quot;command **kwargs&amp;quot;) -&amp;gt; [&#39;command&#39;, &#39;arg1&#39;, ...]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;data:&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;custom-python-interpreters&#34;&gt;Custom Python Interpreters&lt;/h1&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;code&lt;/h2&gt;&#xA;&lt;h2 id=&#34;codeop&#34;&gt;codeop&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;python-language-services&#34;&gt;Python Language Services&lt;/h1&gt;&#xA;&lt;h2 id=&#34;keyword&#34;&gt;keyword&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import keyword&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;keyword.iskeyword(keyword) # x.__contains__(y) &amp;lt;==&amp;gt; y in x&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;data:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;keyword.kwlist # 返回所有关键字的列表&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;parser&#34;&gt;parser&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ast&#34;&gt;ast&lt;/h2&gt;&#xA;&lt;h2 id=&#34;symtable&#34;&gt;symtable&lt;/h2&gt;&#xA;&lt;h2 id=&#34;symbol&#34;&gt;symbol&lt;/h2&gt;&#xA;&lt;h2 id=&#34;token&#34;&gt;token&lt;/h2&gt;&#xA;&lt;h2 id=&#34;tokenize&#34;&gt;tokenize&lt;/h2&gt;&#xA;&lt;h2 id=&#34;tabnanny&#34;&gt;tabnanny&lt;/h2&gt;&#xA;&lt;h2 id=&#34;pyclbr&#34;&gt;pyclbr&lt;/h2&gt;&#xA;&lt;h2 id=&#34;py_compile&#34;&gt;py_compile&lt;/h2&gt;&#xA;&lt;h2 id=&#34;compileall&#34;&gt;compileall&lt;/h2&gt;&#xA;&lt;h2 id=&#34;dis&#34;&gt;dis&lt;/h2&gt;&#xA;&lt;h2 id=&#34;pickletools&#34;&gt;pickletools&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;importing-modules&#34;&gt;Importing Modules&lt;/h1&gt;&#xA;&lt;h2 id=&#34;imp&#34;&gt;imp&lt;/h2&gt;&#xA;&lt;h2 id=&#34;importlib&#34;&gt;importlib&lt;/h2&gt;&#xA;&lt;h2 id=&#34;zipimport&#34;&gt;zipimport&lt;/h2&gt;&#xA;&lt;h2 id=&#34;pkgutil&#34;&gt;pkgutil&lt;/h2&gt;&#xA;&lt;h2 id=&#34;modulefinder&#34;&gt;modulefinder&lt;/h2&gt;&#xA;&lt;h2 id=&#34;runpy&#34;&gt;runpy&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;miscellaneous-services&#34;&gt;Miscellaneous Services&lt;/h1&gt;&#xA;&lt;h2 id=&#34;formatter&#34;&gt;formatter&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ihooks&#34;&gt;ihooks&lt;/h2&gt;</description>
    </item>
    <item>
      <title>PSL_Cryptographic</title>
      <link>https://canuxcheng.com/post/psl_cryptographic/</link>
      <pubDate>Sun, 14 Aug 2016 21:15:14 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_cryptographic/</guid>
      <description>&lt;h1 id=&#34;cryptographic-services&#34;&gt;Cryptographic Services&lt;/h1&gt;&#xA;&lt;h2 id=&#34;hashlib&#34;&gt;hashlib&lt;/h2&gt;&#xA;&lt;p&gt;哈希算法和摘要算法标准库，就是把任意长度的数据转换为一个长度固定的数据串．&lt;/p&gt;&#xA;&lt;p&gt;MD5: Message Digest Algorithm 5.&lt;/p&gt;&#xA;&lt;p&gt;SHA1: Secure Hash Algorithm.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import hashlib&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# methods:&#xA;# 哈希对象有下列方法：&#xA;update(arg) # 更新字符串&#xA;md5.update(&#39;string or read from a file&#39;) # 放入需要转换的内容&#xA;&#xA;digest() # 字符串&#xA;hexdigest() # 十六进制字符串&#xA;md5.hexdigest() # 获取md5十六进制字符串&#xA;&#xA;copy() # 复制哈希对象&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 下类函数都返回哈希对象&#xA;new(name, string=&#39;&#39;)&#xA;md5()&#xA;md5 = hashlib.md5() # 创建一个md5的hash对象&#xA;sha1()&#xA;sha224()&#xA;sha256()&#xA;sha384()&#xA;sha512()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;hmac&#34;&gt;hmac&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tpl&#34;&gt;TPL&lt;/h1&gt;&#xA;&lt;p&gt;相关的第三方库&lt;/p&gt;&#xA;&lt;h2 id=&#34;pycrypto&#34;&gt;pycrypto&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dlitz/pycrypto&#34;&gt;https://github.com/dlitz/pycrypto&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;windows需要MS Visual C++ compiler for python2.7.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_Data</title>
      <link>https://canuxcheng.com/post/psl_data/</link>
      <pubDate>Sun, 14 Aug 2016 20:57:36 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_data/</guid>
      <description>&lt;h1 id=&#34;data-types&#34;&gt;Data Types&lt;/h1&gt;&#xA;&lt;h2 id=&#34;datetime&#34;&gt;datetime&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import datetime&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# datetime.date&#xA;date(year, month, day)&#xA;# methods:&#xA;ctime(...)&#xA;...&#xA;# data descriptors:&#xA;day&#xA;month&#xA;year&#xA;&#xA;# datetime.datetime(datetime.date)&#xA;datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])&#xA;# methods:&#xA;datetime.datetime.strptime(string, format)&#xA;format_datetime = datetime.datetime.strptime(&#39;20160824161431&#39;, &#39;%Y%m%d%H%M%S&#39;) # return: datetime.datetime(2016, 8, 24, 16, 14, 31)&#xA;format_datetime = datetime.datetime.strptime(&#39;24 August 2016 16:14:31&#39;, &#39;%Y%m%d%H%M%S&#39;) # return: datetime.datetime(2016, 8, 24, 16, 14, 31)&#xA;&#xA;datetime.datetime.strftime(format[, tuple])&#xA;string_datetime = format_datetime.strftime(&amp;quot;%d %B %Y %H:%M:%S&amp;quot;) # return: &#39;24 August 2016 16:14:31&#39;&#xA;datetime.datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;) # return: &#39;2017-02-07 23:07:32&#39;&#xA;&#xA;str(datetime.datetime.now())&#xA;datetime.datetime.now().strftime(&#39;%Y%m%d%H%M%S&#39;) # 当前时间戳&#xA;&#xA;# datetime.time&#xA;&#xA;# datetime.timedelta&#xA;&#xA;# datetime.tzinfo&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;data:&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_File</title>
      <link>https://canuxcheng.com/post/psl_file/</link>
      <pubDate>Sun, 14 Aug 2016 20:51:28 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_file/</guid>
      <description>&lt;h1 id=&#34;file-and-directory-access&#34;&gt;File and Directory Access&lt;/h1&gt;&#xA;&lt;h2 id=&#34;ospath&#34;&gt;os.path&lt;/h2&gt;&#xA;&lt;p&gt;windows的路径要写成：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;C:\\test\\sub\\&#xA;&#xA;import os&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;function:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;os.path.expanduser(path) # 把path中~或~user扩展成绝对路径 expanduser(&amp;quot;~/src&amp;quot;) -&amp;gt; /home/user/src&#xA;os.path.expandvars(path) # 把path中的shell变量$var 或 ${var} 还原．&#xA;os.path.dirname(filename) # 返回filename的路径 dirname(&amp;quot;/home/user/file.py&amp;quot;) -&amp;gt; /home/user&#xA;os.path.join(a, *p) # 拼结一个完整的路径　&#xA;os.path.join(a, os.pardir) # 返回上级目录的路径&#xA;os.path.realpath(filename) # 返回filename的真实路径+文件名 realpath(&#39;__file__&#39;)&#xA;os.path.abspath(path) # 返回绝对路径, os.path.abspath(&#39;__file__&#39;)&#xA;os.path.splitext(p) # 分解路径和扩展名返回组成的元组，/home/user/test.py -&amp;gt; (&amp;quot;/home/user/test&amp;quot;, &amp;quot;.py&amp;quot;)&#xA;os.path.basename(p) # 返回最后一个组件名，也就是文件名 /home/user/test.py -&amp;gt; test.py&#xA;os.path.getsize(filename) # 返回文件大小&#xA;os.path.exists(path) # 判断path(文件或目录)是否存在&#xA;os.path.isfile(path) # 判断path是否是常规文件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;pathlib&#34;&gt;pathlib&lt;/h2&gt;&#xA;&lt;p&gt;new in python3.4&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_Math</title>
      <link>https://canuxcheng.com/post/psl_math/</link>
      <pubDate>Fri, 12 Aug 2016 16:56:45 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_math/</guid>
      <description>&lt;h1 id=&#34;numeric-and-mathematical-modules&#34;&gt;Numeric and Mathematical Modules&lt;/h1&gt;&#xA;&lt;h2 id=&#34;random&#34;&gt;random&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import random&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# random.Random&#xA;Random()&#xA;# methods:&#xA;seed([self,], a=None)&#xA;randint(a, b) # 随机一个[a,b]中的整数．&#xA;choice(self, seq) # 从seq中随机选择一个元素&#xA;uniform(self, a, b)&#xA;sample(self, population, k)&#xA;randint(self, a, b)&#xA;randrange(self, start, stop=None, step=1, _int=&amp;lt;type &#39;int&#39;&amp;gt;, _maxwidth=9007199254740992L)&#xA;&#xA;# random.SystemRandom(Random)&#xA;SystemRandom(Random)&#xA;&#xA;# random.WichmannHill(Random)&#xA;WichmannHill(Random)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;getrandbits(k)&#xA;random(self) # 随机一个小于１的数．&#xA;# 所有Random类的methods也可以直接使用．&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;fractions&#34;&gt;fractions&lt;/h2&gt;&#xA;&lt;h2 id=&#34;functools&#34;&gt;functools&lt;/h2&gt;&#xA;&lt;p&gt;函数式编程相关的模块&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import functools&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# functools.partial&#xA;partial(func, *args, **keywords) # 返回functools.partial类型的对象, partial是functools内置的偏函数类类型.&#xA;RED = partial(lambda content, color: color + str(content) + Fore.RESET, color=Fore.RED)&#xA;RED(&amp;quot;show me red&amp;quot;) == lambda content, color: Fore.RED + str(&amp;quot;show me red&amp;quot;) + Fore.RESET&#xA;# 相当于通过partial传一个参数给func，然后剩下的参数通过返回的偏函数传入．这样可以固化一部分参数．&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_String</title>
      <link>https://canuxcheng.com/post/psl_string/</link>
      <pubDate>Fri, 12 Aug 2016 16:49:07 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_string/</guid>
      <description>&lt;h1 id=&#34;text-processing-services&#34;&gt;Text Processing Services&lt;/h1&gt;&#xA;&lt;h2 id=&#34;string&#34;&gt;string&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import string&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;p&gt;data:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ascii_letters&#xA;ascii_lowercase&#xA;ascii_uppercase&#xA;digits&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;re&#34;&gt;re&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import re&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;compile(pattern, flags=0)&#xA;escape(pattern)&#xA;findall(pattern, string, flags=0)&#xA;finditer(pattern, string, flags=0)&#xA;match(pattern, string, flags=0) # if not match, return None, else return object.&#xA;search(pattern, string, flags=0)&#xA;purge()&#xA;split(pattern, string, maxsplit=0, flags=0) # 根据pattern分割string,返回分割后的列表．&#xA;sub(pattern, repl, string, count=0, flags=0)&#xA;subn(pattern, repl, string, count=0, flags=0)&#xA;template(pattern, flags=0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;data:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# flags:&#xA;IGNORECASE # 大小写不敏感&#xA;LOCALE&#xA;MULTILINE&#xA;DOTALL&#xA;VERBOSE&#xA;UNICODE&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;modules:&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_Multimedia</title>
      <link>https://canuxcheng.com/post/psl_multimedia/</link>
      <pubDate>Fri, 12 Aug 2016 15:51:56 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_multimedia/</guid>
      <description>&lt;h1 id=&#34;multimedia-services&#34;&gt;Multimedia Services&lt;/h1&gt;&#xA;&lt;h2 id=&#34;audioop&#34;&gt;audioop&lt;/h2&gt;&#xA;&lt;h2 id=&#34;aifc&#34;&gt;aifc&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sunau&#34;&gt;sunau&lt;/h2&gt;&#xA;&lt;h2 id=&#34;wave&#34;&gt;wave&lt;/h2&gt;&#xA;&lt;h2 id=&#34;chunk&#34;&gt;chunk&lt;/h2&gt;&#xA;&lt;h2 id=&#34;colorsys&#34;&gt;colorsys&lt;/h2&gt;&#xA;&lt;h2 id=&#34;imghdr&#34;&gt;imghdr&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sndhdr&#34;&gt;sndhdr&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ossaudiodev&#34;&gt;ossaudiodev&lt;/h2&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>PSL_Network</title>
      <link>https://canuxcheng.com/post/psl_network/</link>
      <pubDate>Fri, 12 Aug 2016 14:21:36 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_network/</guid>
      <description>&lt;h1 id=&#34;internet-protocols-and-support&#34;&gt;Internet Protocols and Support&lt;/h1&gt;&#xA;&lt;p&gt;socketserver/http/ftp参考&lt;a href=&#34;https://super-devops.readthedocs.io/en/latest/&#34;&gt;https://super-devops.readthedocs.io/en/latest/&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;pop,imap/smtp参考&lt;a href=&#34;https://super-devops.readthedocs.io/en/latest/&#34;&gt;https://super-devops.readthedocs.io/en/latest/&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;urllib&#34;&gt;urllib&lt;/h2&gt;&#xA;&lt;p&gt;urllib.request&lt;/p&gt;&#xA;&lt;p&gt;urllib.respponse&lt;/p&gt;&#xA;&lt;p&gt;urllib.parse&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;from urllib.parse import urlparse&#xA;from urllib.parse import urljoin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;urllib.error&lt;/p&gt;&#xA;&lt;p&gt;urllib.robotparser&lt;/p&gt;&#xA;&lt;h2 id=&#34;ipaddress&#34;&gt;ipaddress&lt;/h2&gt;&#xA;&lt;h2 id=&#34;webbrowser&#34;&gt;webbrowser&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cgi&#34;&gt;cgi&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cgitb&#34;&gt;cgitb&lt;/h2&gt;&#xA;&lt;h2 id=&#34;wsgiref&#34;&gt;wsgiref&lt;/h2&gt;&#xA;&lt;h2 id=&#34;xmlrpc&#34;&gt;xmlrpc&lt;/h2&gt;&#xA;&lt;h2 id=&#34;socketserver&#34;&gt;socketserver&lt;/h2&gt;&#xA;&lt;h2 id=&#34;nntplib&#34;&gt;nntplib&lt;/h2&gt;&#xA;&lt;p&gt;network news transfer protocol&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import nntplib&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;telnet&#34;&gt;telnet&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import telnetlib&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;structured-markup-processing-tools&#34;&gt;Structured Markup Processing Tools&lt;/h1&gt;&#xA;&lt;h2 id=&#34;html&#34;&gt;html&lt;/h2&gt;&#xA;&lt;h2 id=&#34;xml&#34;&gt;xml&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;internet-data-handling&#34;&gt;Internet Data Handling&lt;/h1&gt;&#xA;&lt;h2 id=&#34;json&#34;&gt;json&lt;/h2&gt;&#xA;&lt;p&gt;http api(restful)一般使用json格式的数据．&lt;/p&gt;&#xA;&lt;p&gt;python和json数据类型对应关系参考WEB/JSON.&lt;/p&gt;&#xA;&lt;p&gt;complex和class/def不能被编码.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import json&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 将转换后的json格式写入文件&#xA;dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding=&#39;utf-8&#39;, default=None, sort_keys=False, **kw)&#xA;with open(file, &#39;w&#39;) as f:&#xA;    json.dump(dict_data, f)&#xA;&#xA;# 将dict类型转换成json格式&#xA;dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding=&#39;utf-8&#39;, default=None, sort_keys=False, **kw)&#xA;json_data = json.dumps(dict_data)&#xA;&#xA;indent=4 # 写入自动缩进４个空格&#xA;&#xA;# 将读出的文件(json格式)转换成dict&#xA;load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)&#xA;with open(file, &#39;r&#39;) as f:&#xA;    dict_data = json.load(f)&#xA;&#xA;# json类型变成dict类型&#xA;loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)&#xA;response_dict = json.loads(response.content) # 使用requests获取的json数据,转化为dict类型&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;base64&#34;&gt;base64&lt;/h2&gt;&#xA;&lt;h2 id=&#34;mailcap&#34;&gt;mailcap&lt;/h2&gt;&#xA;&lt;h2 id=&#34;mailbox&#34;&gt;mailbox&lt;/h2&gt;&#xA;&lt;h2 id=&#34;minetypes&#34;&gt;minetypes&lt;/h2&gt;&#xA;&lt;h2 id=&#34;binhex&#34;&gt;binhex&lt;/h2&gt;&#xA;&lt;h2 id=&#34;binascii&#34;&gt;binascii&lt;/h2&gt;&#xA;&lt;h2 id=&#34;quopri&#34;&gt;quopri&lt;/h2&gt;&#xA;&lt;h2 id=&#34;uu&#34;&gt;uu&lt;/h2&gt;</description>
    </item>
    <item>
      <title>ReStructuredText</title>
      <link>https://canuxcheng.com/post/restructuredtext/</link>
      <pubDate>Mon, 08 Aug 2016 13:39:38 +0000</pubDate>
      <guid>https://canuxcheng.com/post/restructuredtext/</guid>
      <description>&lt;h1 id=&#34;restructuredtext&#34;&gt;reStructuredText&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://docutils.sourceforge.net/rst.html&#34;&gt;http://docutils.sourceforge.net/rst.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;reST是易读所见即所得的文本标记语言，格式类似markdown。&lt;/p&gt;&#xA;&lt;p&gt;python的reST参考pep12和pep287:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0012/&#34;&gt;https://www.python.org/dev/peps/pep-0012/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0287/&#34;&gt;https://www.python.org/dev/peps/pep-0287/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;主标题：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;title&#xA;=====&#xA;&#xA;=====&#xA;title&#xA;=====&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;副标题：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Subtitle&#xA;-----&#xA;&#xA;--------&#xA;Subtitle&#xA;--------&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;次级标题：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Content&#xA;^^^^^^^&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;星号斜体强调：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;*text*&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;双星号加粗重点强调：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;**text**&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;四个或以上的-表示分割线：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;----&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;参考式链接：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`hyperlink`_&#xA;&#xA;.. _hyperlink: http://hyperlink.org&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;行内式链接：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`link &amp;lt;https://link.com&amp;gt;`_&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;图片：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;.. image:: https://path/image.png&#xA;    :alt: HTTPie compared to cURL&#xA;    :width: 679&#xA;    :heigh: 781&#xA;    :align: center&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;原样引用块：&lt;/p&gt;&#xA;&lt;p&gt;双冒号加四个空格&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;source code::&#xA;&#xA;    print(&amp;quot;source&amp;quot;)&#xA;    return 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;文档测试块：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print doctest block.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;无序列表：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debug</title>
      <link>https://canuxcheng.com/post/python_debug/</link>
      <pubDate>Sat, 06 Aug 2016 16:54:08 +0000</pubDate>
      <guid>https://canuxcheng.com/post/python_debug/</guid>
      <description>&lt;h1 id=&#34;ide&#34;&gt;IDE&lt;/h1&gt;&#xA;&lt;p&gt;pycharm可以通过breakpoint和step调试.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;debug&#34;&gt;debug&lt;/h1&gt;&#xA;&lt;h2 id=&#34;bdb&#34;&gt;bdb&lt;/h2&gt;&#xA;&lt;h2 id=&#34;pdb&#34;&gt;pdb&lt;/h2&gt;&#xA;&lt;h2 id=&#34;hotshot&#34;&gt;hotshot&lt;/h2&gt;&#xA;&lt;h2 id=&#34;timeit&#34;&gt;timeit&lt;/h2&gt;&#xA;&lt;h2 id=&#34;trace&#34;&gt;trace&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cprofile&#34;&gt;cProfile&lt;/h2&gt;&#xA;&lt;h2 id=&#34;profile&#34;&gt;profile&lt;/h2&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>PEP</title>
      <link>https://canuxcheng.com/post/python_pep/</link>
      <pubDate>Sat, 06 Aug 2016 16:54:08 +0000</pubDate>
      <guid>https://canuxcheng.com/post/python_pep/</guid>
      <description>&lt;h1 id=&#34;pep-8--style-guide-for-python-code&#34;&gt;PEP 8 &amp;ndash; Style Guide for Python Code&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34;&gt;https://www.python.org/dev/peps/pep-0008/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;pep-257--docstring-conventions&#34;&gt;PEP 257 &amp;ndash; Docstring Conventions&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0257/&#34;&gt;https://www.python.org/dev/peps/pep-0257/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;pep-20pep-20--the-zen-of-python&#34;&gt;PEP-20PEP 20 &amp;ndash; The Zen of Python&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34;&gt;https://www.python.org/dev/peps/pep-0020/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 查看pep20&#xA;&amp;gt;import this&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Document</title>
      <link>https://canuxcheng.com/post/python_document/</link>
      <pubDate>Wed, 03 Aug 2016 21:57:26 +0000</pubDate>
      <guid>https://canuxcheng.com/post/python_document/</guid>
      <description>&lt;h1 id=&#34;document&#34;&gt;Document&lt;/h1&gt;&#xA;&lt;p&gt;python项目文档相关的工具．&lt;/p&gt;&#xA;&lt;h1 id=&#34;pydoc&#34;&gt;pydoc&lt;/h1&gt;&#xA;&lt;p&gt;python自带的文档命令行接口&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ pydoc --help&#xA;$ pydoc -p &amp;lt;port&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tpl&#34;&gt;TPL&lt;/h1&gt;&#xA;&lt;h2 id=&#34;sphinx&#34;&gt;Sphinx&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sphinx-doc/sphinx&#34;&gt;https://github.com/sphinx-doc/sphinx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh-sphinx-doc.readthedocs.io/en/latest/contents.html&#34;&gt;https://zh-sphinx-doc.readthedocs.io/en/latest/contents.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Sphinx就是python处理reStructuredText格式的工具。&lt;/p&gt;&#xA;&lt;p&gt;安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$pip install -U Sphinx&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;使用sphinx：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$cd your-project/docs&#xA;&#xA;$sphinx-quickstart&#xA;# 以下选项需要手动设定，其它都可以用默认值：&#xA;&amp;gt; Project name: pydeveloper&#xA;&amp;gt; Author name(s): Canux CHENG&#xA;&amp;gt; Project version: 1.0.0.0&#xA;&amp;gt; autodoc: automatically insert docstrings from modules (y/n) [n]: y&#xA;&amp;gt; doctest: automatically test code snippets in doctest blocks (y/n) [n]: y&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;配置文件conf.py包含刚才的所有配置，可以在这里手动修改。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.sphinx-doc.org/en/1.4.8/config.html#confval-locale_dirs&#34;&gt;http://www.sphinx-doc.org/en/1.4.8/config.html#confval-locale_dirs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;添加包的版本：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sys.path.insert(0, os.path.abspath(&amp;quot;..&amp;quot;))&#xA;from &amp;lt;project&amp;gt; import __version__&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;修改自己的配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ftp</title>
      <link>https://canuxcheng.com/post/ftp/</link>
      <pubDate>Thu, 28 Jul 2016 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/ftp/</guid>
      <description>&lt;h1 id=&#34;ftp&#34;&gt;FTP&lt;/h1&gt;&#xA;&lt;p&gt;ftp服务器有很多：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;vsftpd&lt;/li&gt;&#xA;&lt;li&gt;proftpd&lt;/li&gt;&#xA;&lt;li&gt;pyftpdlib&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;vsftpd&#34;&gt;vsftpd&lt;/h1&gt;&#xA;&lt;p&gt;安装vsftpd:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install vsftpd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;windows开启ftp服务和建立IIS站点即可。&lt;/p&gt;&#xA;&lt;p&gt;linux配置：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vim /etc/vsftpd.conf&#xA;local_root=/home/canux/FTP&#xA;anon_root=/home/canux/FTP&#xA;local_enable=YES&#xA;anonymous_enable=YES&#xA;chroot_local_user=YES&#xA;$ sudo service vsftpd restart&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;ftp的网页浏览格式：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ftp://host/path&#xA;ftp://username:password@host:port/path&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;ftp命令&#34;&gt;ftp命令&lt;/h1&gt;&#xA;&lt;h2 id=&#34;ftp-1&#34;&gt;ftp&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ ftp [-46pinegvd] [host [port]]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;python的ftp标准库&#34;&gt;python的FTP标准库&lt;/h1&gt;&#xA;&lt;h2 id=&#34;ftplib&#34;&gt;ftplib&lt;/h2&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Ldap</title>
      <link>https://canuxcheng.com/post/ldap/</link>
      <pubDate>Thu, 28 Jul 2016 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/ldap/</guid>
      <description>&lt;h1 id=&#34;ldap&#34;&gt;LDAP&lt;/h1&gt;&#xA;&lt;p&gt;LDAP占用tcp和udp的389端口。&lt;/p&gt;&#xA;&lt;p&gt;使用SSL的LDAP占用tcp和udp的636端口。&lt;/p&gt;&#xA;&lt;p&gt;Lightweight Directory Access Protocol.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.openldap.org/&#34;&gt;http://www.openldap.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LDAP的windows工具：LDAPSoft LDAP Browser&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Nfs</title>
      <link>https://canuxcheng.com/post/nfs/</link>
      <pubDate>Thu, 28 Jul 2016 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/nfs/</guid>
      <description>&lt;h1 id=&#34;nfs&#34;&gt;NFS&lt;/h1&gt;&#xA;&lt;p&gt;NFS: Network File System&lt;/p&gt;&#xA;&lt;p&gt;安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 在nfs服务器安装nfs服务&#xA;$ sudo apt-get install nfs-kernel-server&#xA;# 添加共享目录并授权&#xA;$ sudo vim /etc/exports&#xA;/home/user/share *(rw,no_root_squash)&#xA;$ sudo service nfs-kernel-server restart&#xA;&#xA;# 在nfs客户端安装nfs客户端&#xA;$ sudo apt-get install nfs-common&#xA;# 自动挂载&#xA;$ sudo vim /etc/fstab&#xA;nfs-server-ip:/home/user/share /home/user1/share nfs auto 0 0&#xA;$ sudo mount -a&#xA;# 手动挂载&#xA;$ sudo mount -t nfs nfs-server-ip:/home/user/share /home/user1/share&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;nfs-server&#34;&gt;nfs-server&lt;/h1&gt;&#xA;&lt;p&gt;配置/etc/exports&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/etc/exports  文件格式&#xA;&amp;lt;输出目录&amp;gt; [客户端1 选项（访问权限,用户映射,其他）] [客户端2 选项（访问权限,用户映射,其他）]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;nfs-client&#34;&gt;nfs-client&lt;/h1&gt;&#xA;&lt;p&gt;配置/etc/fstab&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ntp</title>
      <link>https://canuxcheng.com/post/ntp/</link>
      <pubDate>Thu, 28 Jul 2016 16:08:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/ntp/</guid>
      <description>&lt;h1 id=&#34;ntp&#34;&gt;NTP&lt;/h1&gt;&#xA;&lt;p&gt;NFS: Network Time Protocol&lt;/p&gt;&#xA;&lt;p&gt;UTC: Coordinated Universal Time, 世界统一时间&lt;/p&gt;&#xA;&lt;p&gt;GMT: Greenwich Mean Time, 格林尼治标准时间, = UTC&lt;/p&gt;&#xA;&lt;p&gt;CET: Central European Time, 欧洲中部时间, = UTC+1, 下令时=UTC+2&lt;/p&gt;&#xA;&lt;p&gt;CST: Chinese Standard Time, 中国标准时间, = UTC+8&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;时区管理&#34;&gt;时区管理&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ timedatectl list-timezones # 查看所有时区&#xA;$ sudo timedatectl set-timezone Asia/Shanghai # 设置时区&#xA;$ sudo timedatectl set-timezone Etc/UTC&#xA;$ ls -l /etc/localtime # 应该是一个链接&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;ntp-1&#34;&gt;ntp&lt;/h1&gt;&#xA;&lt;p&gt;安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ntp&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;ntpdate&#34;&gt;ntpdate&lt;/h2&gt;&#xA;&lt;p&gt;从目标服务器同步.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ntpdate -u ip&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;ntpstat&#34;&gt;ntpstat&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ntpstat&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;chrony&#34;&gt;chrony&lt;/h1&gt;&#xA;&lt;p&gt;ntp的升级版.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ssh</title>
      <link>https://canuxcheng.com/post/ssh/</link>
      <pubDate>Thu, 28 Jul 2016 15:53:34 +0000</pubDate>
      <guid>https://canuxcheng.com/post/ssh/</guid>
      <description>&lt;h1 id=&#34;openssh&#34;&gt;OpenSSH&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.openssh.com/&#34;&gt;http://www.openssh.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;windows上支持ssh协议的客户端：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;putty&lt;/li&gt;&#xA;&lt;li&gt;xshell&lt;/li&gt;&#xA;&lt;li&gt;MobaXterm&lt;/li&gt;&#xA;&lt;li&gt;secureCRT&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install openssh-server&#xA;$ sudo apt-get install openssh-client&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;ssh命令&#34;&gt;SSH命令&lt;/h1&gt;&#xA;&lt;p&gt;ssh是openssh协议的客户端．&lt;/p&gt;&#xA;&lt;p&gt;远程操作的命令包括ssh, scp, sftp.&lt;/p&gt;&#xA;&lt;p&gt;ssh&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ ssh&#xA;# 远程执行命令需要用双引号，不能用单引号&#xA;$ ssh username@host &amp;quot;command/script&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;scp&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ scp&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;sftp&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sftp&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;常用选项：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;-C   compression&#xA;# 不需要输入yes来交互, 或者修改/etc/ssh/ssh_config&#xA;-o StrictHostKeyChecking=no&#xA;-o UserKnownHostsFile /dev/null&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;ssh也包括一些密钥管理的命令.&lt;/p&gt;&#xA;&lt;p&gt;ssh-keygen&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa -C &#39;canuxcheng@gmail.com&#39;&#xA;&#xA;# 通过将本机的公钥拷贝到远程机器实现无密码访问．&#xA;# 将本机的public-key拷贝到远程机器的authorized_keys.&#xA;$ ssh-copy-id -i ~/.ssh/id_rsa.pub user@remote&#xA;# 另外的拷贝方法&#xA;$ ssh user@host &amp;quot;cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;quot; &amp;lt; ~/.ssh/id_rsa.pub&#xA;$ sudo service ssh restart # 需要重启ssh服务&#xA;&#xA;非交互式通过命令行传密码的命令：&#xA;$ sshpass -p [password]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;ssh-add&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remote Management</title>
      <link>https://canuxcheng.com/post/ps_remote/</link>
      <pubDate>Mon, 18 Jul 2016 14:54:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/ps_remote/</guid>
      <description>&lt;h1 id=&#34;windows远程管理&#34;&gt;Windows远程管理&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;WinRM, 远程处理,在远程机器上执行命令&lt;/li&gt;&#xA;&lt;li&gt;WMI/CIM&lt;/li&gt;&#xA;&lt;li&gt;RPC, 远程连接,在发起远程连接的机器上执行命令&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;winrm&#34;&gt;WinRM&lt;/h1&gt;&#xA;&lt;p&gt;一对一远程处理:&lt;/p&gt;&#xA;&lt;p&gt;类似于linux的ssh。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter-PSSession -ComputerName name&#xA;...&#xA;Exit-PSSession&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;一对多远程处理:&lt;/p&gt;&#xA;&lt;p&gt;同时远程到多台机器执行命令或脚本。&lt;/p&gt;&#xA;&lt;p&gt;Invoke-Command一次创建一个连接对象，返回PSComputerName属性，执行完后就关闭连接。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Invoke-Command -ComputerName name1,name2 -ScriptBlock {command1;command2}&#xA;&#xA;Invoke-Command -ComputerName name1,name2 -FilePath filepath&#xA;&#xA;Invoke-Command -ComputerName (Get-Content hosts.txt) ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;通过argumentlist把本地的参数传给远程的命令:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$lvar1=&amp;quot;value1&amp;quot;&#xA;$lvar2=&amp;quot;value2&amp;quot;&#xA;Invoke-Command -ComputerName name&#xA;-ScriptBlock {&#xA;Param($var1, $var2)&#xA;...&#xA;}&#xA;-ArgumentList $lvar1, $lvar2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;通过$using:传本地参数到远程机器：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$var1=&amp;quot;value1&amp;quot;&#xA;Invoke-Command -ComputerName name&#xA;-ScriptBlock {&#xA;... $using:var1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建持久的远程处理：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$session1=New-PSSession -ComputerName server1&#xA;Enter-PSSession -Session $session1 ...&#xA;Invoke-Command -Session $session1 ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;wmi&#34;&gt;WMI&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Get-WmiObject&#xA;Remove-WmiObject&#xA;Invoke-WmiMethod&#xA;Register-WmiEvent&#xA;Set-WmiInstance&#xA;&#xA;# 用powershell跑一个wql。&#xA;Get-WmiObject -Query &amp;quot;select * from win32_service where name=&#39;winRM&#39;&amp;quot; | Format-List -Property Name,status&#xA;&#xA;# 远程管理&#xA;Get-WMIObject -ComputerName ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;cim&#34;&gt;CIM&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Get-CimClass&#xA;Get-CimInstance&#xA;Get-CimSession&#xA;Get-CimAssociatedInstance&#xA;Invoke-CimMethod&#xA;New-CimInstance&#xA;New-CimSession&#xA;New-CimSessionOption&#xA;Register-CimIndicationEvent&#xA;Remove-CimInstance&#xA;Remove-CimSession&#xA;Set-CimInstance&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;rpc&#34;&gt;RPC&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 远程连接&#xA;Get-Service -ComputerName ...&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WinRM</title>
      <link>https://canuxcheng.com/post/win_winrm/</link>
      <pubDate>Sun, 17 Jul 2016 08:36:36 +0000</pubDate>
      <guid>https://canuxcheng.com/post/win_winrm/</guid>
      <description>&lt;h1 id=&#34;winrm&#34;&gt;WinRM&lt;/h1&gt;&#xA;&lt;p&gt;Windows Remote Management&lt;/p&gt;&#xA;&lt;p&gt;WinRM是WSMAN(WS-Management Protocol)的增强版。&lt;/p&gt;&#xA;&lt;p&gt;WinRM是基于SOAP的防火墙友好的远程协议。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/aa384426(v=vs.85).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/aa384426(v=vs.85).aspx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;WinRM设置:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/aa384372(v=vs.85).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/aa384372(v=vs.85).aspx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;检查winrm所有配置：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;cmd&amp;gt; winrm get winrm/config&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;快速设置winrm：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;cmd&amp;gt; winrm quickconfig&#xA;cmd&amp;gt; winrm quickconfig -transport:https&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看listener配置：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;cmd&amp;gt; winrm enumerate winrm/config/listener&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;WinRM配置包括监听设置,协议设置,Client,Service和Winrs四部分.&lt;/p&gt;&#xA;&lt;p&gt;windows的三种网络安全协议。&lt;/p&gt;&#xA;&lt;p&gt;Basic是基本的明文协议, NTLM是早期的安全协议,Kerberos是最新的安全协议.&lt;/p&gt;&#xA;&lt;h1 id=&#34;service权限管理&#34;&gt;service权限管理&lt;/h1&gt;&#xA;&lt;p&gt;查看service的auth配置：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;cmd&amp;gt; winrm get winrm/config/service/auth&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;service只有Negotiate和Kerberos是默认开启的:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Basic = false&#xA;Kerberos = true&#xA;Negotiate = true&#xA;Certificate = false&#xA;CredSSP = false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Negotiate对domain用户选择kerberos,对local用户选择NTLM.&lt;/p&gt;&#xA;&lt;p&gt;设置service的Basic和Certificate和CredSSP(默认关闭)：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;#cmd&amp;gt; winrm set winrm/config/service/auth @{Basic=&amp;quot;true&amp;quot;}&#xA;#cmd&amp;gt; winrm set winrm/config/service/auth @{Certificate=&amp;quot;true&amp;quot;}&#xA;#cmd&amp;gt; winrm set winrm/config/service/auth @{CredSSP=&amp;quot;true&amp;quot;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;设置是否允许不加密：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Coreutils</title>
      <link>https://canuxcheng.com/post/ps_coreutils/</link>
      <pubDate>Tue, 12 Jul 2016 17:24:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/ps_coreutils/</guid>
      <description>&lt;h1 id=&#34;外部命令&#34;&gt;外部命令&lt;/h1&gt;&#xA;&lt;p&gt;powershell可以执行外部命令.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;C:\Windows\System32\*.exe&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;cmd&#34;&gt;cmd&lt;/h1&gt;&#xA;&lt;h1 id=&#34;ping&#34;&gt;ping&lt;/h1&gt;&#xA;&lt;h1 id=&#34;netstat&#34;&gt;netstat&lt;/h1&gt;&#xA;&lt;h1 id=&#34;ipconfig&#34;&gt;ipconfig&lt;/h1&gt;&#xA;&lt;h1 id=&#34;route&#34;&gt;route&lt;/h1&gt;&#xA;&lt;h1 id=&#34;arp&#34;&gt;arp&lt;/h1&gt;&#xA;&lt;h1 id=&#34;nslookup&#34;&gt;nslookup&lt;/h1&gt;&#xA;&lt;h1 id=&#34;ftp&#34;&gt;ftp&lt;/h1&gt;&#xA;&lt;h1 id=&#34;mstsc&#34;&gt;mstsc&lt;/h1&gt;&#xA;&lt;p&gt;RDP client.&lt;/p&gt;&#xA;&lt;h1 id=&#34;taskmgr&#34;&gt;taskmgr&lt;/h1&gt;&#xA;&lt;p&gt;任务管理器．&lt;/p&gt;&#xA;&lt;h1 id=&#34;tskill&#34;&gt;tskill&lt;/h1&gt;&#xA;&lt;h1 id=&#34;tree&#34;&gt;tree&lt;/h1&gt;&#xA;&lt;h1 id=&#34;whoami&#34;&gt;whoami&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;需要下载，然后放入环境变量的第三方命令.&lt;/p&gt;&#xA;&lt;h1 id=&#34;windump&#34;&gt;WinDump&lt;/h1&gt;&#xA;&lt;p&gt;Windows版本的tcpdump, 依赖WinPcap包．&lt;/p&gt;&#xA;&lt;p&gt;通过windump导出的*.pcap文件可以通过wireshark打开．&lt;/p&gt;</description>
    </item>
    <item>
      <title>Json</title>
      <link>https://canuxcheng.com/post/json/</link>
      <pubDate>Thu, 07 Jul 2016 16:43:15 +0000</pubDate>
      <guid>https://canuxcheng.com/post/json/</guid>
      <description>&lt;h1 id=&#34;json&#34;&gt;JSON&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.json.org/&#34;&gt;http://www.json.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;JSON: JavaScript Object Notation.&lt;/p&gt;&#xA;&lt;p&gt;json有两种数据结构.&lt;/p&gt;&#xA;&lt;h1 id=&#34;key-value键值对&#34;&gt;key-value/键值对&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    key: value,&#xA;    key1: value1,&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;列表数组&#34;&gt;列表/数组&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;[value, value1, ...]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;&#xA;&lt;p&gt;bool:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;python -&amp;gt; True/False&#xA;go -&amp;gt; true/false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;string:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; 只能用双引号.&#xA;&#xA;python -&amp;gt; str&#xA;go -&amp;gt; string&#xA;go -&amp;gt; []byte -&amp;gt; base64编码字符串&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;number:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;python -&amp;gt; int/float&#xA;go -&amp;gt; int64/float64&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;null:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;python -&amp;gt; None&#xA;go -&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;array&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;python -&amp;gt; tuple/list&#xA;go -&amp;gt; array/slice&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;object&lt;/p&gt;</description>
    </item>
    <item>
      <title>Yaml</title>
      <link>https://canuxcheng.com/post/yaml/</link>
      <pubDate>Thu, 07 Jul 2016 16:43:15 +0000</pubDate>
      <guid>https://canuxcheng.com/post/yaml/</guid>
      <description>&lt;h1 id=&#34;yaml&#34;&gt;YAML&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yaml.org&#34;&gt;https://yaml.org&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Yaml Ain&amp;rsquo;t Markup Language.&lt;/p&gt;&#xA;&lt;h2 id=&#34;yamllint&#34;&gt;yamllint&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/adrienverge/yamllint&#34;&gt;https://github.com/adrienverge/yamllint&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSS</title>
      <link>https://canuxcheng.com/post/css/</link>
      <pubDate>Thu, 23 Jun 2016 09:40:45 +0000</pubDate>
      <guid>https://canuxcheng.com/post/css/</guid>
      <description>&lt;h1 id=&#34;css&#34;&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;CSS是叠层样式表&lt;/p&gt;&#xA;&lt;h1 id=&#34;css3&#34;&gt;CSS3&lt;/h1&gt;&#xA;&lt;p&gt;CSS3是最新的CSS标准&lt;/p&gt;&#xA;&lt;h1 id=&#34;css创建&#34;&gt;CSS创建&lt;/h1&gt;&#xA;&lt;p&gt;优先级从上往下。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;内联样式， 在html中通过style属性定义，仅用于一个html元素。&lt;/li&gt;&#xA;&lt;li&gt;内部样式表，在html中通过style标签在头部定义,针对单个页面。&lt;/li&gt;&#xA;&lt;li&gt;外部样式表，在html中通过link标签在文档头部定义，方便将样式用于多个页面。&lt;/li&gt;&#xA;&lt;li&gt;浏览器的默认值。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;css基本语法&#34;&gt;&lt;strong&gt;CSS基本语法&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;CSS由两部分组成，选择器和声明，选择器是html元素，声明由属性和值组成。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;selector {&#xA;  property1: value1;&#xA;  property2: value2;&#xA;  ...;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;多个声明用分号隔开，属性的值有空格要用引号。&lt;/p&gt;&#xA;&lt;p&gt;CSS对大小写不敏感。&lt;/p&gt;&#xA;&lt;p&gt;CSS注释:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/* comment */&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;css选择器&#34;&gt;&lt;strong&gt;CSS选择器&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;最常见的选择器是元素选择器,html元素是最基本的选择器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;元素选择器&#34;&gt;元素选择器&lt;/h2&gt;&#xA;&lt;p&gt;html {color:black;}&lt;/p&gt;&#xA;&lt;h2 id=&#34;id选择器&#34;&gt;id选择器&lt;/h2&gt;&#xA;&lt;p&gt;id选择器可以为标有特定id的html元素指定特定样式。&lt;/p&gt;&#xA;&lt;p&gt;id选择器用#开头定义。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;#red {color: red;}&#xA;#green {color: green;}&#xA;&#xA;&amp;lt;p id=&amp;quot;red&amp;quot;&amp;gt;This is red.&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;id选择器常常用来建立派生选择器：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;#sidebar p {&#xA;  font-style: italic;&#xA;  text-align: right;&#xA;  margin-top: 0.5em;&#xA;}&#xA;&#xA;&amp;lt;div id=&amp;quot;sidebar&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;class选择器&#34;&gt;class选择器&lt;/h2&gt;&#xA;&lt;p&gt;和id选择器功能类似，类选择器以.开头。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;.center {text-align: center}&#xA;&#xA;&amp;lt;h1 class=&amp;quot;center&amp;quot;&amp;gt;...&amp;lt;/h1&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;类选择器用于建立派生选择器：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Html</title>
      <link>https://canuxcheng.com/post/html/</link>
      <pubDate>Thu, 23 Jun 2016 09:40:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/html/</guid>
      <description>&lt;h1 id=&#34;html&#34;&gt;HTML&lt;/h1&gt;&#xA;&lt;p&gt;HTML是超文本标记语言&lt;/p&gt;&#xA;&lt;h1 id=&#34;xhtml&#34;&gt;XHTML&lt;/h1&gt;&#xA;&lt;p&gt;XHTML是更严谨的更纯净的HTML&lt;/p&gt;&#xA;&lt;h1 id=&#34;html5&#34;&gt;HTML5&lt;/h1&gt;&#xA;&lt;p&gt;HTML5是下一代HTML&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;html元素和属性&#34;&gt;&lt;strong&gt;html元素和属性&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;html元素指从开始标签到结束标签的所有代码,包括元素内容：&lt;/p&gt;&#xA;&lt;p&gt;html元素可以嵌套。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt; This is paragrph &amp;lt;/p&amp;gt;&#xA;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; # 空内容的元素&#xA;&amp;lt;br /&amp;gt; # 空元素，在开始标签中关闭&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;html标签可以拥有属性，属性总是以name=&amp;lsquo;value&amp;rsquo;的形式出现，属性总是在html元素的开始标签中规定。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://www.test.com&amp;quot;&amp;gt;This is a link&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;html属性和值大小写不敏感，推荐使用小写,始终给属性值加引号。&lt;/p&gt;&#xA;&lt;h2 id=&#34;html的全局属性标准属性&#34;&gt;html的全局属性(标准属性)&lt;/h2&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.w3school.com.cn/tags/html_ref_standardattributes.asp&#34;&gt;http://www.w3school.com.cn/tags/html_ref_standardattributes.asp&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;html的事件属性&#34;&gt;html的事件属性&lt;/h2&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.w3school.com.cn/tags/html_ref_eventattributes.asp&#34;&gt;http://www.w3school.com.cn/tags/html_ref_eventattributes.asp&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;html字符实体&#34;&gt;html字符实体&lt;/h2&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.w3school.com.cn/tags/html_ref_entities.html&#34;&gt;http://www.w3school.com.cn/tags/html_ref_entities.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;html基本标签&#34;&gt;&lt;strong&gt;html基本标签&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;doctype&#34;&gt;DOCTYPE&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 文档类型&#xA;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;&#xA;&amp;lt;head&amp;gt;&#xA;...&#xA;&amp;lt;/head&amp;gt;&#xA;&#xA;&amp;lt;body&amp;gt;&#xA;...&#xA;&amp;lt;/body&amp;gt;&#xA;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;html-1&#34;&gt;html&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# html文档,支持全局属性&#xA;&amp;lt;html&amp;gt;&#xA;...&#xA;&amp;lt;/html&amp;gt;&#xA;&#xA;# mainfest属性，定义一个url，描述文档缓存信息&#xA;&#xA;# xmlns属性，定义XML的namespace属性&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 注释, 浏览器会忽略注释,没有任何属性&#xA;&amp;lt;!-- This is a comment --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;空格&#34;&gt;空格&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;amp;nbsp;    # 空格&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;head&#34;&gt;&lt;strong&gt;head&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;head-1&#34;&gt;head&lt;/h2&gt;&#xA;&lt;p&gt;可以在head标签中使用的标签： link, style, base, meta, script, title.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Package</title>
      <link>https://canuxcheng.com/post/python_package/</link>
      <pubDate>Wed, 22 Jun 2016 05:17:19 +0000</pubDate>
      <guid>https://canuxcheng.com/post/python_package/</guid>
      <description>&lt;h1 id=&#34;package&#34;&gt;Package&lt;/h1&gt;&#xA;&lt;p&gt;PEP426是python最新的打包标准，定义了wheel为最新的python包。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0426/&#34;&gt;https://www.python.org/dev/peps/pep-0426/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;ensurepip&#34;&gt;ensurepip&lt;/h2&gt;&#xA;&lt;p&gt;内置模块.提供使用pip从pypi安装模块。&lt;/p&gt;&#xA;&lt;h2 id=&#34;distutils&#34;&gt;distutils&lt;/h2&gt;&#xA;&lt;p&gt;内置的模块.处理简单的包安装,一般使用setuptools代替该模块。&lt;/p&gt;&#xA;&lt;h2 id=&#34;venv&#34;&gt;venv&lt;/h2&gt;&#xA;&lt;p&gt;python3新增了虚拟环境的包．python2中使用virtualenv.&lt;/p&gt;&#xA;&lt;h2 id=&#34;zipapp&#34;&gt;zipapp&lt;/h2&gt;&#xA;&lt;p&gt;python3新增管理可执行的python的zip包．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tpl&#34;&gt;TPL&lt;/h1&gt;&#xA;&lt;p&gt;相关的第三方库&lt;/p&gt;&#xA;&lt;h2 id=&#34;virtualenv&#34;&gt;virtualenv&lt;/h2&gt;&#xA;&lt;p&gt;python3.5开始并入了虚拟化标准库venv.&lt;/p&gt;&#xA;&lt;p&gt;分离的虚拟的python环境,自动安装setuptools和pip和wheel&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pypa/virtualenv&#34;&gt;https://github.com/pypa/virtualenv&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$cd project&#xA;&#xA;# 默认python2.7&#xA;$virtualenv .env&#xA;# 指定python3, 会安装pip/setuptools/wheel到当前环境.&#xA;$$virtualenv -p `which python3.6` --pip 21.0.1 --setuptools 51.1.2 --wheel 0.36.2 .env&#xA;&#xA;# 激活虚拟环境&#xA;$source .env/bin/activate&#xA;&#xA;# 先升级pip和setuptools&#xA;$pip install pip&#xA;$pip install setuptools&#xA;$pip install wheel&#xA;&#xA;# 导出项目用的所有依赖库．&#xA;$pip freeze &amp;gt; requirements.txt&#xA;# 在其它环境需要安装依赖：&#xA;$pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;virtualenvwrapper&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/virtualenvwrapper/virtualenvwrapper&#34;&gt;https://bitbucket.org/virtualenvwrapper/virtualenvwrapper&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;封装了virtualenv的工具:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ pip install virtualenvwrapper&#xA;&#xA;# 创建主目录&#xA;$ mkdir -p $WORKON_HOME&#xA;&#xA;# 最好写入到.bashrc/.zshrc:&#xA;$ export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python&#xA;$ export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv&#xA;$ export WORKON_HOME=~/.virtualenvs&#xA;$ source /usr/local/bin/virtualenvwrapper.sh&#xA;&#xA;# 为每个项目创建独立python环境：&#xA;$ mkvirtualenv -r requirementx.txt [project-name]&#xA;# 不安装setuotools/wheel/pip&#xA;$ mkvirtualenv --no-setuptools --no-wheel --no-pip [name]&#xA;# 指定查找pip/setuptools的路径&#xA;--extra-search-dir=/usr/local/lib/python2.7/dist-packages&#xA;--extra-search-dir=/usr/lib/python2.7/dist-packages&#xA;$ workon [project-name] # 切换到针对该项目的virtualenv&#xA;(pro)$ /path/to/pip install [package] # 安装第三方包&#xA;(pro)$ ~/.virtualenvs/[project-name]/bin/python setupt.py install # 源码安装&#xA;(pro)$ lssitepackages # 查看安装的第三方包&#xA;$ deactivate # 退出virtualenv&#xA;$ rmvirtualenv [project-name] # 删除环境&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;pipenv&lt;/p&gt;</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://canuxcheng.com/post/python_summary/</link>
      <pubDate>Tue, 21 Jun 2016 21:18:20 +0000</pubDate>
      <guid>https://canuxcheng.com/post/python_summary/</guid>
      <description>&lt;h1 id=&#34;python难点总结&#34;&gt;python难点总结&lt;/h1&gt;&#xA;&lt;h1 id=&#34;多线程&#34;&gt;多线程&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;GIL&lt;/p&gt;&#xA;&lt;p&gt;GIL: Global Interpretror Lock. 全局解释器锁．&lt;/p&gt;&#xA;&lt;p&gt;python不建议使用多线程，用多进程代替．&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;协程&#34;&gt;协程&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;coroutine&lt;/p&gt;&#xA;&lt;p&gt;协程就是同时开启两个任务，但一次只顺序执行一个．&#xA;如果执行的任务阻塞，就切换到下一个继续执行．节省时间．&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>OOP</title>
      <link>https://canuxcheng.com/post/python_oop/</link>
      <pubDate>Tue, 21 Jun 2016 21:18:09 +0000</pubDate>
      <guid>https://canuxcheng.com/post/python_oop/</guid>
      <description>&lt;h1 id=&#34;面向对象oop&#34;&gt;面向对象/OOP&lt;/h1&gt;&#xA;&lt;p&gt;OOD: Object Oriented Design.&lt;/p&gt;&#xA;&lt;p&gt;面向过程的设计支持任何语言，但是如果语言本身内置面向过程的结构，就会更容易编程．&lt;/p&gt;&#xA;&lt;p&gt;OOP: Object Oriented Programming.&lt;/p&gt;&#xA;&lt;p&gt;python内置OOP的结构，但是不必一定要使用类和OOP.&lt;/p&gt;&#xA;&lt;p&gt;面向对象的两个主题就是类和类实例．&lt;/p&gt;&#xA;&lt;p&gt;创建实例的过程叫实例化．&lt;/p&gt;&#xA;&lt;p&gt;属性就是属于另一个对象的数据或函数元素．属性分为数据属性和函数属性．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;类class&#34;&gt;类/Class&lt;/h1&gt;&#xA;&lt;p&gt;类是现实世界的抽象的实体以编程的形式出现，实例是这些对象的具体化．&lt;/p&gt;&#xA;&lt;p&gt;类是一种数据结构的定义，实例是申明了一个这种类型的变量．&lt;/p&gt;&#xA;&lt;p&gt;类的定义：&lt;/p&gt;&#xA;&lt;p&gt;Python 3 所有类默认继承自 object，即使不写 (object) 也是新式类。建议保留 (object) 以兼容性和可读性。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;class ClassName(object):&#xA;    &amp;quot;&amp;quot;&amp;quot;Doc string.&amp;quot;&amp;quot;&amp;quot;&#xA;    class_suite&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;类的初始化方法init(相当于构造器):&lt;/p&gt;&#xA;&lt;p&gt;如果定义了__init__方法在实例化的时候会首先调用该方法，进行一些初始化的工作。&lt;/p&gt;&#xA;&lt;p&gt;init方法的第一个参数必须是实例self，而且不能有return语句。&lt;/p&gt;&#xA;&lt;p&gt;init方法一般用来设置实例属性(也就是数据属性)。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;class ClassName(object):&#xA;    def __init__(self, *args, **kwargs):&#xA;        pass&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;特殊方法new:&lt;/p&gt;&#xA;&lt;p&gt;如果定义了__new__方法，会在init方法之前运行，并且返回一个实例，也就是__init__的self。&lt;/p&gt;&#xA;&lt;p&gt;new方法的第一个参数必须是类cls。并且需要返回一个实例。&lt;/p&gt;&#xA;&lt;p&gt;new方法在object中被定义为staticmethod。&lt;/p&gt;&#xA;&lt;p&gt;相当于析构器的特殊方法del:&lt;/p&gt;&#xA;&lt;p&gt;__del__特殊方法要在实例对象的所有引用都被清除后才会执行。&lt;/p&gt;&#xA;&lt;p&gt;不要在del中做与实例没有关系的事情，一般不建议实现该方法。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;class ClassName(object):&#xA;&#xA;    def __new__(cls, *args, **kwargs):&#xA;        ...&#xA;        return ...&#xA;&#xA;    def __del__(self):&#xA;        ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;类属性&#34;&gt;类属性&lt;/h2&gt;&#xA;&lt;p&gt;类属性分为数据属性和方法属性。&lt;/p&gt;&#xA;&lt;p&gt;类的数据属性仅仅是定义的类的变量。&lt;/p&gt;&#xA;&lt;p&gt;数据属性通常是静态变量, 也就是和类对象绑定, 与类的实例无关。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python</title>
      <link>https://canuxcheng.com/post/python/</link>
      <pubDate>Tue, 21 Jun 2016 21:18:09 +0000</pubDate>
      <guid>https://canuxcheng.com/post/python/</guid>
      <description>&lt;h1 id=&#34;python概述&#34;&gt;&lt;strong&gt;Python概述&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2.7/index.html&#34;&gt;https://docs.python.org/2.7/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://python.usyiyi.cn/translate/python_278/index.html&#34;&gt;http://python.usyiyi.cn/translate/python_278/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3.5/index.html&#34;&gt;https://docs.python.org/3.5/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://python.usyiyi.cn/translate/python_352/index.html&#34;&gt;http://python.usyiyi.cn/translate/python_352/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;python是一门优雅而健壮的语言.&lt;/p&gt;&#xA;&lt;p&gt;继承了编译语言(静态语言)的强大性和通用性.&lt;/p&gt;&#xA;&lt;p&gt;同时也借鉴了脚本语言(动态语言)的易用性．&lt;/p&gt;&#xA;&lt;p&gt;python特点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高级&lt;/li&gt;&#xA;&lt;li&gt;面向对象&lt;/li&gt;&#xA;&lt;li&gt;可升级&lt;/li&gt;&#xA;&lt;li&gt;可扩展&lt;/li&gt;&#xA;&lt;li&gt;可移植性&lt;/li&gt;&#xA;&lt;li&gt;易学&lt;/li&gt;&#xA;&lt;li&gt;易读&lt;/li&gt;&#xA;&lt;li&gt;易维护&lt;/li&gt;&#xA;&lt;li&gt;健壮性&lt;/li&gt;&#xA;&lt;li&gt;高效的快速原型开发工具&lt;/li&gt;&#xA;&lt;li&gt;内存管理器&lt;/li&gt;&#xA;&lt;li&gt;解释性和编译性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;python基本语法&#34;&gt;&lt;strong&gt;python基本语法&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;python源程序叫xxx.py&lt;/p&gt;&#xA;&lt;p&gt;python中一切皆对象．&lt;/p&gt;&#xA;&lt;p&gt;python大小写敏感．&lt;/p&gt;&#xA;&lt;p&gt;python通过缩进和冒号:区分语法块，而不是大括号{}.&lt;/p&gt;&#xA;&lt;p&gt;python中的表达式(条件/循环表达式等)不需要用小括号()括起来．&lt;/p&gt;&#xA;&lt;p&gt;python标识符(变量，函数，参数，类等)由字母和下划线开头，还可以包含数字．不能是关键字．&lt;/p&gt;&#xA;&lt;p&gt;python不支持方法或函数重载．&lt;/p&gt;&#xA;&lt;p&gt;python不支持char和type类型．&lt;/p&gt;&#xA;&lt;p&gt;python没有switch语句．&lt;/p&gt;&#xA;&lt;p&gt;python支持多继承．&lt;/p&gt;&#xA;&lt;p&gt;python不支持++/&amp;ndash;自增和自减运算符．&lt;/p&gt;&#xA;&lt;p&gt;python支持连续比较，a&amp;lt;b&amp;lt;c.&lt;/p&gt;&#xA;&lt;h2 id=&#34;lexical-analysis&#34;&gt;lexical analysis&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/reference/lexical_analysis.html&#34;&gt;https://docs.python.org/2/reference/lexical_analysis.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Logical lines and physical lines：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# python通过行尾的令牌NEWLINE表示逻辑行&#xA;expression&#xA;# 以操作系统的换行符表示物理行．&#xA;\n&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;encoding declarations:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# python脚本中的第一行或第二行的&#xA;coding[=:]\s*([-\w.]+)&#xA;# 注释与正则表达式匹配将被作为编码申明处理．&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;[Deprecated] explicit line joining:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 多个物理行通过反斜线backslash续行进行显示换行&#xA;# 推荐用隐式换行．&#xA;if a == b \&#xA;       and c ==d: # 只有续行的最后一行可以有注释．反斜线的行不能注释.&#xA;    print(&#39;more than one physical line.&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;implicit line joining：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tmux</title>
      <link>https://canuxcheng.com/post/devops_tmux/</link>
      <pubDate>Sun, 19 Jun 2016 11:17:53 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops_tmux/</guid>
      <description>&lt;h1 id=&#34;tmux&#34;&gt;tmux&lt;/h1&gt;&#xA;&lt;p&gt;tmux是终端复用工具，类似于gnu screen。&lt;/p&gt;&#xA;&lt;p&gt;tmux三个基本概念：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;会话（session）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;窗口（window）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;面板（pane）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;tmux使用c/s架构，tmux命令启动tmux服务器，一个tmux服务有多个session，&#xA;每个session就是tmux管理下的伪终端集合，一个session有多个window与之关联，&#xA;每个window就是一个伪终端，占据整个屏幕，一个window可以被分割成多个pane。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tmux安装和配置&#34;&gt;tmux安装和配置&lt;/h1&gt;&#xA;&lt;p&gt;tmux依赖libevent和ncurses库。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://libevent.org/&#34;&gt;http://libevent.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo yum install libevent-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://invisible-island.net/ncurses/&#34;&gt;http://invisible-island.net/ncurses/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo yum install ncurese-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://tmux.github.io/&#34;&gt;http://tmux.github.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install tmux&#xA;sudo yum install tmux&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;用户配置文件： ~/.tmux.conf&lt;/p&gt;&#xA;&lt;p&gt;系统配置文件： /etc/tmux.conf&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tmux相关项目&#34;&gt;tmux相关项目&lt;/h1&gt;&#xA;&lt;h2 id=&#34;tpm&#34;&gt;TPM&lt;/h2&gt;&#xA;&lt;p&gt;Tmux Plugins Manager.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tmux-plugins/tpm&#34;&gt;https://github.com/tmux-plugins/tpm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tmux用法&#34;&gt;tmux用法&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;man tmux&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;开启tmux：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;tmux&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;退出tmux：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;exit&#xA;ctrl + d&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;列出tmux会话：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;tmux ls&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;tmux快捷键&#34;&gt;tmux快捷键&lt;/h2&gt;&#xA;&lt;p&gt;tmux的prefix是ctrl-b&lt;/p&gt;&#xA;&lt;p&gt;按下ctrl-b然后松开，通知tmux下面的按键是快捷键。&lt;/p&gt;&#xA;&lt;p&gt;查看所有快捷键：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ctrl-b + ?&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;显示时间：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jaeger</title>
      <link>https://canuxcheng.com/post/tracing_jaeger/</link>
      <pubDate>Wed, 08 Jun 2016 09:46:47 +0000</pubDate>
      <guid>https://canuxcheng.com/post/tracing_jaeger/</guid>
      <description>&lt;h1 id=&#34;jaeger&#34;&gt;Jaeger&lt;/h1&gt;&#xA;&lt;p&gt;一款uber贡献给cncf的微服务tracing监控工具.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jaegertracing.io/&#34;&gt;https://www.jaegertracing.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jaegertracing/jaeger&#34;&gt;https://github.com/jaegertracing/jaeger&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;deploy-jaeger-on-k8s&#34;&gt;Deploy Jaeger on K8S&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jaegertracing/jaeger-operator&#34;&gt;https://github.com/jaegertracing/jaeger-operator&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Metrics</title>
      <link>https://canuxcheng.com/post/metrics/</link>
      <pubDate>Wed, 08 Jun 2016 09:46:47 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics/</guid>
      <description>&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;&#xA;&lt;p&gt;Tranditional monitoring is for Datacenter, like nagios, zabbix.&lt;/p&gt;&#xA;&lt;p&gt;Modern monitoring is for Cloud and Container.&lt;/p&gt;&#xA;&lt;p&gt;Modern monitoring based on metrics, logs and tracing.&lt;/p&gt;&#xA;&lt;h1 id=&#34;tick-stack&#34;&gt;TICK stack&lt;/h1&gt;&#xA;&lt;p&gt;influxdb: tsdb.&lt;/p&gt;&#xA;&lt;p&gt;kapacitor: alerting.&lt;/p&gt;&#xA;&lt;p&gt;chronograf: GUI.&lt;/p&gt;&#xA;&lt;p&gt;telegraf(agent): metrics collector.&lt;/p&gt;&#xA;&lt;h1 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;graphing&#34;&gt;Graphing&lt;/h1&gt;&#xA;&lt;p&gt;最流行的监控绘图软件是grafana, 支持influxdb,elasticsearch和prometheus.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monitoring</title>
      <link>https://canuxcheng.com/post/monitoring/</link>
      <pubDate>Wed, 08 Jun 2016 09:46:47 +0000</pubDate>
      <guid>https://canuxcheng.com/post/monitoring/</guid>
      <description>&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;&#xA;&lt;p&gt;Tranditional monitoring is for Datacenter, like nagios, zabbix.&lt;/p&gt;&#xA;&lt;p&gt;Modern monitoring is for Cloud and Container.&lt;/p&gt;&#xA;&lt;p&gt;Modern monitoring based on metrics, logs and tracing.&lt;/p&gt;&#xA;&lt;p&gt;现代的监控系统在DevOps的基础上，除了传统的metrics和logging的采集，还需要tracing应用。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;metrics&#34;&gt;metrics&lt;/h1&gt;&#xA;&lt;h2 id=&#34;tick-stack&#34;&gt;TICK stack&lt;/h2&gt;&#xA;&lt;p&gt;influxdb: tsdb.&lt;/p&gt;&#xA;&lt;p&gt;kapacitor: alerting.&lt;/p&gt;&#xA;&lt;p&gt;chronograf: GUI.&lt;/p&gt;&#xA;&lt;p&gt;telegraf(agent): metrics collector.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h2&gt;&#xA;&lt;h2 id=&#34;graphing&#34;&gt;Graphing&lt;/h2&gt;&#xA;&lt;p&gt;最流行的监控绘图软件是grafana, 支持influxdb,elasticsearch和prometheus.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;&#xA;&lt;h2 id=&#34;elk&#34;&gt;ELK&lt;/h2&gt;&#xA;&lt;h2 id=&#34;lokigrafana&#34;&gt;Loki+Grafana&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tracing&#34;&gt;Tracing&lt;/h1&gt;&#xA;&lt;h2 id=&#34;jeager&#34;&gt;Jeager&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Sentry</title>
      <link>https://canuxcheng.com/post/tracing_sentry/</link>
      <pubDate>Wed, 08 Jun 2016 09:46:47 +0000</pubDate>
      <guid>https://canuxcheng.com/post/tracing_sentry/</guid>
      <description>&lt;h1 id=&#34;sentry&#34;&gt;Sentry&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/getsentry/sentry&#34;&gt;https://github.com/getsentry/sentry&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;deploy-sentry-on-k8s&#34;&gt;Deploy Sentry on K8S&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/getsentry/onpremise&#34;&gt;https://github.com/getsentry/onpremise&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tracing</title>
      <link>https://canuxcheng.com/post/tracing/</link>
      <pubDate>Wed, 08 Jun 2016 09:46:47 +0000</pubDate>
      <guid>https://canuxcheng.com/post/tracing/</guid>
      <description>&lt;h1 id=&#34;tracing&#34;&gt;Tracing&lt;/h1&gt;&#xA;&lt;p&gt;APM 监控，也叫全链路监控。&lt;/p&gt;&#xA;&lt;h1 id=&#34;sentry&#34;&gt;sentry&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/getsentry/sentry&#34;&gt;https://github.com/getsentry/sentry&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;zipkin&#34;&gt;zipkin&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openzipkin/zipkin&#34;&gt;https://github.com/openzipkin/zipkin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;open-telemetry&#34;&gt;open-telemetry&lt;/h1&gt;&#xA;&lt;p&gt;opentracing和opencensus 合并成open-telemetry.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opentracing&#34;&gt;https://github.com/opentracing&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/census-instrumentation&#34;&gt;https://github.com/census-instrumentation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-telemetry&#34;&gt;https://github.com/open-telemetry&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;jaeger&#34;&gt;jaeger&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jaegertracing/jaeger&#34;&gt;https://github.com/jaegertracing/jaeger&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Package</title>
      <link>https://canuxcheng.com/post/linux_package/</link>
      <pubDate>Tue, 07 Jun 2016 16:57:45 +0000</pubDate>
      <guid>https://canuxcheng.com/post/linux_package/</guid>
      <description>&lt;h1 id=&#34;dpkg&#34;&gt;DPKG&lt;/h1&gt;&#xA;&lt;p&gt;debian的包管理机制。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;dpkg-1&#34;&gt;dpkg&lt;/h2&gt;&#xA;&lt;p&gt;dpkg的本地前端工具。&lt;/p&gt;&#xA;&lt;h3 id=&#34;deb---debian-binary-package-format&#34;&gt;deb - Debian binary package format&lt;/h3&gt;&#xA;&lt;h3 id=&#34;dpkg---package-manager-for-debian&#34;&gt;dpkg - package manager for Debian&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;dpkg&#xA;dpkg -X  ./xxx.deb  xxx  # 将deb包解压到xxx目录&#xA;dpkg -e  ./xxx.deb  xxx/DEBIAN # 将control信息解压&#xA;dpkg -l | grep pkg # 查看安装的包&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;dpkg-reconfigure---reconfigure-an-already-installed-package&#34;&gt;dpkg-reconfigure - reconfigure an already installed package&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;dpkg-reconfigure&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;dpkg-deb---debian-package-archive-deb-manipulation-tool&#34;&gt;dpkg-deb - Debian package archive (.deb) manipulation tool&lt;/h3&gt;&#xA;&lt;p&gt;目录结构, DEBIAN/control是必需的&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;|- debian_root&#xA;   |- DEBIAN&#xA;      |- control&#xA;      |- preinst/preinstallation # 解压deb包之前执行&#xA;      |- prerm/preremove&#xA;      |- postinst/postinstallation # 解压完成之后执行，通常用来配置&#xA;      |- postrm/postremove&#xA;      |- copyright&#xA;      |- changelog&#xA;      |- conffiles&#xA;   |- etc&#xA;      |- init.d/systemd&#xA;         |- &amp;lt;service&amp;gt;&#xA;      |- logrotate.d&#xA;         |- &amp;lt;service&amp;gt;&#xA;   |- user/local/...&#xA;   |- opt/...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;control:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle</title>
      <link>https://canuxcheng.com/post/oracle/</link>
      <pubDate>Wed, 01 Jun 2016 22:40:22 +0000</pubDate>
      <guid>https://canuxcheng.com/post/oracle/</guid>
      <description>&lt;h1 id=&#34;oracle&#34;&gt;Oracle&lt;/h1&gt;&#xA;&lt;p&gt;oracle的GUI：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;oracle sql developer(officer)&lt;/li&gt;&#xA;&lt;li&gt;pl/sql&lt;/li&gt;&#xA;&lt;li&gt;toad&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;oracle的CLI：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;sqlplus&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;oracle命令&#34;&gt;Oracle命令&lt;/h1&gt;&#xA;&lt;p&gt;sys是oracle默认管理员权限&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sqlplus / as sysdba&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;system是oracle的默认最高权限，默认密码是manager，需要sys授权才能登陆&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sqlplus / as sysdba&#xA;&amp;gt; alter user system account unlock;&#xA;&amp;gt; alter user system identified by manager;&#xA;&amp;gt; conn system/manager&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;scott是oracle的默热你的普通用户，默认密码是tiger，需要sys授权才能登陆&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sqlplus / as sysdba&#xA;&amp;gt; alter user scott account unlock;&#xA;&amp;gt; alter user scott identified by tiger;&#xA;&amp;gt; conn scott/tiger&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;本地命令行执行sql语句：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ &amp;lt;sql query&amp;gt; | &amp;lt;sqlplus&amp;gt; &amp;lt;db user&amp;gt;/&amp;lt;db password&amp;gt;@&amp;lt;db sid&amp;gt; | sudo ORACLE_HOME=&amp;lt;oracle home&amp;gt; -i -u &amp;lt;oracle user&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;dbsnmp是oracle的用户智能代理用户，用来监控和管理数据库相关性能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL</title>
      <link>https://canuxcheng.com/post/sql/</link>
      <pubDate>Wed, 25 May 2016 22:06:13 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sql/</guid>
      <description>&lt;h1 id=&#34;sql&#34;&gt;SQL&lt;/h1&gt;&#xA;&lt;p&gt;sql是结构化查询语言。&lt;/p&gt;&#xA;&lt;p&gt;sql是一种标准，几乎所有关系型数据库都遵守。&lt;/p&gt;&#xA;&lt;p&gt;但是不同的数据库又有自己的扩展。&lt;/p&gt;&#xA;&lt;p&gt;SQL分为两部分，DML和DDL。&lt;/p&gt;&#xA;&lt;p&gt;SQL大小写敏感，文本使用单引号，数值不需要引号。&lt;/p&gt;&#xA;&lt;h1 id=&#34;sql语法&#34;&gt;sql语法&lt;/h1&gt;&#xA;&lt;p&gt;sql注释:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 多行注释&#xA;/*&#xA;comment multi lines&#xA;in a sql file.&#xA;*/&#xA;&#xA;# 单行注释&#xA;/* comment single line */&#xA;&#xA;# 单行注释还可以直接用 -- 表示&#xA;select * from table -- where condition;&#xA;-- select * from table where condition;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;ddl&#34;&gt;DDL&lt;/h1&gt;&#xA;&lt;p&gt;DDL: 数据定义语言&lt;/p&gt;&#xA;&lt;h2 id=&#34;create&#34;&gt;create&lt;/h2&gt;&#xA;&lt;p&gt;创建数据库：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;CREATE DATABASE database_name;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;建表：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;CREATE TABLE table(&#xA;    column1 type1,&#xA;    column2 type2,&#xA;    ...&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;create也可以用来创建索引和视图．&lt;/p&gt;&#xA;&lt;h2 id=&#34;drop&#34;&gt;drop&lt;/h2&gt;&#xA;&lt;p&gt;删除数据库：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;DROP DATABASE database_name;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;删表：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mysql</title>
      <link>https://canuxcheng.com/post/mysql/</link>
      <pubDate>Wed, 25 May 2016 12:14:59 +0000</pubDate>
      <guid>https://canuxcheng.com/post/mysql/</guid>
      <description>&lt;h1 id=&#34;mysql&#34;&gt;Mysql&lt;/h1&gt;&#xA;&lt;p&gt;安装mysql服务器&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install mysql-server&#xA;$ sudo yum install mysql-community-server&#xA;&#xA;$ sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf&#xA;# 注意mysql的/etc/mysql/my.cnf和相关文件如果设置了bind-address = 127.0.0.1就无法远程访问，需要注释掉．&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;安装mysql客户端&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install mysql-client&#xA;$ sudo yum install mysql-community-client&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;安装开发工具：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libmysqlclient-dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;CLI工具： mysql&lt;/p&gt;&#xA;&lt;p&gt;GUI工具： mysql workbench&lt;/p&gt;&#xA;&lt;p&gt;安装完成默认的数据库是 mysql。&lt;/p&gt;&#xA;&lt;p&gt;mysqld的默认端口是3306.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;mysql命令&#34;&gt;mysql命令&lt;/h1&gt;&#xA;&lt;p&gt;tips: 用户名密码有特殊字符用引号.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ mysql [OPTIONS] [database]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;初始化时需要用root用户进入mysql命令行&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ mysql -uroot -p&#xA;$ mysql -h&amp;lt;host&amp;gt; -P&amp;lt;port&amp;gt; -uroot -p&amp;lt;password&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建用户后用其它用户操作：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ mysql -u&amp;lt;user&amp;gt; -p&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;本地执行sql语句或mysql客户端命令:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Builtins</title>
      <link>https://canuxcheng.com/post/ps_builtins/</link>
      <pubDate>Tue, 24 May 2016 10:44:44 +0000</pubDate>
      <guid>https://canuxcheng.com/post/ps_builtins/</guid>
      <description>&lt;h1 id=&#34;get-help和help&#34;&gt;Get-Help和Help:&lt;/h1&gt;&#xA;&lt;p&gt;get-help查看帮助信息,help分页查看帮助信息，man是help的别名&lt;/p&gt;&#xA;&lt;p&gt;命令说明：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Get-Help&#xA;Help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看所有命令和概念：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Get-Help *&#xA;Help *&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;模糊查找命令和概念：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Get-Help *&amp;lt;name&amp;gt;*&#xA;Help *&amp;lt;name&amp;gt;*&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看具体命令帮助：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Get-Help {&amp;lt;CmdletName&amp;gt; | &amp;lt;TopicName&amp;gt;}&#xA;Help {&amp;lt;CmdletName&amp;gt; | &amp;lt;TopicName&amp;gt;}&#xA;&amp;lt;CmdletName&amp;gt; -?&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;get-help/help的选项:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;get-help get-help&#xA;-examples # 查看示例&#xA;-full # 查看所有帮助&#xA;-parameter # 查看选项的帮助&#xA;-detailed # 查看详细信息&#xA;-online # 打开文档中的link&#xA;-showwindow # 用窗口打开&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;helpfile&#34;&gt;Helpfile&lt;/h1&gt;&#xA;&lt;p&gt;3.0/4.0 需要先下载帮助手册：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;update-help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;所有helpfile：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Get-Help/Help about_*&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看具体helpfile：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Get-Help/Help about_&amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cmdlets&#34;&gt;Cmdlets&lt;/h1&gt;&#xA;&lt;p&gt;cmdlets是powershell的内置命令,类型是System.Management.Automation.CmdletInfo&lt;/p&gt;&#xA;&lt;p&gt;cmdlets的方法：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Equals&#xA;GetHashCode&#xA;GetType&#xA;ToString&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;cmdlets的属性：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Snmp</title>
      <link>https://canuxcheng.com/post/snmp/</link>
      <pubDate>Tue, 26 Apr 2016 09:56:04 +0000</pubDate>
      <guid>https://canuxcheng.com/post/snmp/</guid>
      <description>&lt;h1 id=&#34;snmp&#34;&gt;SNMP&lt;/h1&gt;&#xA;&lt;p&gt;Simple Network Management Protocol, 简单网络管理协议&lt;/p&gt;&#xA;&lt;p&gt;MIB&lt;/p&gt;&#xA;&lt;p&gt;SMI&lt;/p&gt;&#xA;&lt;p&gt;安装和配置snmp:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$sudo apt-get install snmp snmpd snmp-mibs-downloader&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;snmp命令&#34;&gt;snmp命令&lt;/h1&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Admin</title>
      <link>https://canuxcheng.com/post/win_admin/</link>
      <pubDate>Tue, 26 Apr 2016 09:54:45 +0000</pubDate>
      <guid>https://canuxcheng.com/post/win_admin/</guid>
      <description></description>
    </item>
    <item>
      <title>PowerShell</title>
      <link>https://canuxcheng.com/post/ps/</link>
      <pubDate>Tue, 26 Apr 2016 09:52:02 +0000</pubDate>
      <guid>https://canuxcheng.com/post/ps/</guid>
      <description>&lt;h1 id=&#34;powershell&#34;&gt;PowerShell&lt;/h1&gt;&#xA;&lt;p&gt;Console: command line interface&lt;/p&gt;&#xA;&lt;p&gt;ISE: script editor and console combination&lt;/p&gt;&#xA;&lt;p&gt;Version:&lt;/p&gt;&#xA;&lt;p&gt;2.0,3.0,4.0,5.0&lt;/p&gt;&#xA;&lt;p&gt;C:\Windows\System32\powershell 存放64位powershell&lt;/p&gt;&#xA;&lt;p&gt;C:\Windows\SysWOW64\powershell 存放32位powershell&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;$PSVersionTable&#xA;&amp;gt;$HOST&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Install/Update:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/zh-CN/download/details.aspx?id=40855&#34;&gt;https://www.microsoft.com/zh-CN/download/details.aspx?id=40855&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装Windows Management Framework4.0即可。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;$PSHOME&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;多版本时切换版本:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;powershell -version 2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;powershell相关项目&#34;&gt;powershell相关项目&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft&#34;&gt;https://github.com/Microsoft&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PowerShell&#34;&gt;https://github.com/PowerShell&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PowerShellOrg&#34;&gt;https://github.com/PowerShellOrg&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;win32-openssh&#34;&gt;win32-openssh&lt;/h2&gt;&#xA;&lt;p&gt;windows的SSH。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PowerShell/Win32-OpenSSH&#34;&gt;https://github.com/PowerShell/Win32-OpenSSH&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;powershell命令&#34;&gt;powershell命令&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;powershell -?&#xA;&amp;gt;powershell /?&#xA;&amp;gt;powershell -help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;powershell-script&#34;&gt;powershell script&lt;/h1&gt;&#xA;&lt;p&gt;powershell是默认大小写不敏感的。&lt;/p&gt;&#xA;&lt;p&gt;同一行多个命令需要用分号;隔开。&lt;/p&gt;&#xA;&lt;p&gt;powershell的安全策略：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;restricted(default)&lt;/li&gt;&#xA;&lt;li&gt;allsigned&lt;/li&gt;&#xA;&lt;li&gt;remotesigned&lt;/li&gt;&#xA;&lt;li&gt;unrestricted&lt;/li&gt;&#xA;&lt;li&gt;bypass&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;注释&#34;&gt;注释&lt;/h1&gt;&#xA;&lt;p&gt;单行注释：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# comment&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;多行注释(文档注释)：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;#&#xA;comment1&#xA;comment2&#xA;...&#xA;#&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;帮助文档:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Utils</title>
      <link>https://canuxcheng.com/post/ps_utils/</link>
      <pubDate>Tue, 26 Apr 2016 09:52:02 +0000</pubDate>
      <guid>https://canuxcheng.com/post/ps_utils/</guid>
      <description>&lt;h1 id=&#34;windows相关项目&#34;&gt;windows相关项目：&lt;/h1&gt;&#xA;&lt;h2 id=&#34;choco&#34;&gt;choco&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chocolatey&#34;&gt;https://github.com/chocolatey&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;windows的apt/yum。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chocolatey/choco&#34;&gt;choco&lt;/a&gt; is replacement of &lt;a href=&#34;https://github.com/chocolatey/chocolatey&#34;&gt;chocolatey&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;choco install openssh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cmder&#34;&gt;cmder&lt;/h2&gt;&#xA;&lt;p&gt;cmd的升级版。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cmderdev/cmder&#34;&gt;https://github.com/cmderdev/cmder&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;babun&#34;&gt;babun&lt;/h2&gt;&#xA;&lt;p&gt;a linux-shell like on windows.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/babun/babun&#34;&gt;https://github.com/babun/babun&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;flinux&#34;&gt;flinux&lt;/h2&gt;&#xA;&lt;p&gt;run unmodified linux applications inside windows&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wishstudio/flinux&#34;&gt;https://github.com/wishstudio/flinux&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tivoli</title>
      <link>https://canuxcheng.com/post/metrics_tivoli/</link>
      <pubDate>Wed, 20 Apr 2016 13:57:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics_tivoli/</guid>
      <description>&lt;h1 id=&#34;itm&#34;&gt;ITM&lt;/h1&gt;&#xA;&lt;p&gt;ITM: IBM Tivoli Monitoring&lt;/p&gt;&#xA;&lt;p&gt;是IBM的Cloud &amp;amp; Smart Infrastructure监控解决方案。&lt;/p&gt;&#xA;&lt;p&gt;Architecture Overview:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/tivoli.png&#34; alt=&#34;pic&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;ITM主要由管理组件和可选组件组成。&lt;/p&gt;&#xA;&lt;p&gt;Tivoli Management Services:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;TEMS&lt;/li&gt;&#xA;&lt;li&gt;TEPS&lt;/li&gt;&#xA;&lt;li&gt;TEP client&lt;/li&gt;&#xA;&lt;li&gt;Historical data collection(warehouse agent)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;warehouse proxy&lt;/li&gt;&#xA;&lt;li&gt;summarization and pruning agent&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;OS agent&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Optional components:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Dashboard Application Services Hub&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tivoli Monitoring dashboards(Infrastructure Management Dashboards for Servers)&lt;/li&gt;&#xA;&lt;li&gt;Tivoli Common Reporting&lt;/li&gt;&#xA;&lt;li&gt;Tivoli Enterprise Monitoring Automation Server&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Tivoli Event Synchronization component&lt;/li&gt;&#xA;&lt;li&gt;Authorization Policy Components(tivcmd)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ibm.com/support/knowledgecenter/SSTFXA_6.3.0/com.ibm.itm.doc_6.3/welcome_63.htm&#34;&gt;http://www.ibm.com/support/knowledgecenter/SSTFXA_6.3.0/com.ibm.itm.doc_6.3/welcome_63.htm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装itm&#34;&gt;安装ITM&lt;/h2&gt;&#xA;&lt;p&gt;Windows: C:\IBM\ITM&lt;/p&gt;&#xA;&lt;p&gt;Linux/Unix: /opt/IBM/ITM&lt;/p&gt;&#xA;&lt;p&gt;分为本地安装和分布式安装。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;需要先为TEPS和TDW安装DB(ODBC/JDBC)。&lt;/p&gt;&#xA;&lt;p&gt;DB2&lt;/p&gt;&#xA;&lt;p&gt;MSSQL&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find</title>
      <link>https://canuxcheng.com/post/shell_find/</link>
      <pubDate>Wed, 20 Apr 2016 13:55:36 +0800</pubDate>
      <guid>https://canuxcheng.com/post/shell_find/</guid>
      <description>&lt;h1 id=&#34;find&#34;&gt;find&lt;/h1&gt;&#xA;&lt;p&gt;Find     查找，用于在目录中查找。&#xA;find  path  options  tests  actions&#xA;path 路径&#xA;options 选项&#xA;tests 测试&#xA;actions 动作&lt;/p&gt;&#xA;&lt;p&gt;optioins选项:&#xA;-follow&#xA;-depth&#xA;-maxdepth&#xA;-mindepth&#xA;find   dir  -mindepth  n     指定最小的目录深度，至少从dir往下n级目录开始往下搜索，dir和n级之间的忽略。&#xA;find   dir   -maxdepth  n      指定最大目录深度，不搜索n级之后的目录。&lt;/p&gt;&#xA;&lt;p&gt;test选项很多：&#xA;-newer   pattern   比pattern文件要新&#xA;-user    pattern      文件属主是pattern&#xA;-name   pattern    查找和type匹配的&#xA;-iname  pattern    查找和type匹配的，会忽略大小写&#xA;-iwholename&#xA;-path   pattern     按照文件路径匹配&#xA;-type   c           c是文件类型，按照文件类型匹配文件&#xA;-size   +/-    nk/c/w/k/b/M/G    匹配大于或小于n  kb/..  的文件&#xA;-perm   XXX       基于文件权限的匹配&#xA;find dir  –atime/mtime/ctime    +/-n    根据时间累匹配，atime表示访问时间，mtime表示修改时间，ctime表示变化时间，+表示大于，-表示小于，单位是天。&#xA;-a/-and   pattern&#xA;-o/-or     pattern&#xA;！/-not    pattern&#xA;find  dir  !  test   pattern   列出所有没有按照-options  pattern模式的项&#xA;(&amp;hellip;)    使用括号需要用引号来引用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grep</title>
      <link>https://canuxcheng.com/post/shell_grep/</link>
      <pubDate>Wed, 20 Apr 2016 13:55:36 +0800</pubDate>
      <guid>https://canuxcheng.com/post/shell_grep/</guid>
      <description>&lt;h1 id=&#34;grep&#34;&gt;grep&lt;/h1&gt;&#xA;&lt;p&gt;grep相关的命令：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;grep&#xA;egrep == grep -E&#xA;fgrep == grep -F&#xA;rgrep == grep -r&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;grep:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;grep [OPTIONS] PATTERN [FILE/DIR...]&#xA;grep [OPTIONS] [-e PATTERN | -f FILE] [FILE/DIR...]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;options:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Matcher Selection&#xA;-G, --basic-regexp grep默认只支持BRE, 只能使用基本的RE&#xA;-E, --extended-regexp 选择ERE, 可以使用扩展的RE&#xA;# grep -E &amp;quot;pattern1|pattern2&amp;quot; 比如支持或运算&#xA;-F, --fixed-strings&#xA;-P, --perl-regexp perl RE&#xA;&#xA;# Matching Control&#xA;-e PATTERN, --regexp=PATTERN    可以指定多个pattern&#xA;# grep -e pattern1 -e pattern2 filename 相当于或运算，满足一个就被过滤出来&#xA;-f FILE, --file=FILE    文件的每一行就是一个pattern.&#xA;-i, --ignore-case    忽略大小写&#xA;-v, --invert-match   忽略含有pattern的行&#xA;-w, --word-regexp    精确匹配一个单词&#xA;-x, --line-regexp    精确匹配一行&#xA;-y&#xA;&#xA;# General Output Control&#xA;-c, --count    统计匹配到的行数&#xA;--color[=WHEN], --colour[=WHEN]    输出匹配的pattern高亮&#xA;-L, --files-without-match    列出没有匹配到的文件名&#xA;-l, --files-with-matches    列出匹配到的文件的文件名&#xA;# grep -rl pattern1 | xargs grep -r pattern2    相当于与运算，过滤同时满足两个pattern&#xA;-m NUM, --max-count=NUM&#xA;-o, --only-matching    只输出匹配的部分&#xA;# grep -o pattern filename | wc -l 统计匹配的行数&#xA;-q, --quiet, --silent    不打印查找的结果&#xA;-s, --no-messages&#xA;&#xA;# Output Line Prefix Control&#xA;-b, --byte-offset    打印匹配的字符数或偏移量&#xA;-H, --with-filename&#xA;-h, --no-filename&#xA;--label=LABEL&#xA;-n, --line-number    打印匹配的行的行号&#xA;-T, --initial-tab&#xA;-u, --unix-byte-offsets&#xA;-Z, --null&#xA;&#xA;# Context Line Control&#xA;-A NUM, --after-context=NUM    打印匹配到的行的后NUM行&#xA;-B NUM, --before-context=NUM    打印匹配到的行的前NUM行j&#xA;-C NUM, -NUM, --context=NUM    打印匹配到的行的前NUM行和后NUM行&#xA;&#xA;# File and Directory Selection&#xA;-a, --text&#xA;--binary-files=TYPE&#xA;-D ACTION, --devices=ACTION&#xA;-d ACTION, --directories=ACTION&#xA;--exclude=GLOB    排除查找指定的文件&#xA;--exclude-from=FILE&#xA;--exclude-dir=DIR   排除查找指定的目录&#xA;-I&#xA;--include=GLOB     指定查找的文件&#xA;-r, --recursive    递归查找&#xA;-R, --dereference-recursive    递归查找&#xA;# grep -nR/-nr pattern filename    阅读源码可以递归查找并打印行号&#xA;&#xA;# Other Options&#xA;--line-buffered&#xA;--mmap&#xA;-U, --binary&#xA;-z, --null-data&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;ack&#34;&gt;ack&lt;/h1&gt;&#xA;&lt;p&gt;ack/ack2是grep的升级版&lt;/p&gt;</description>
    </item>
    <item>
      <title>Development</title>
      <link>https://canuxcheng.com/post/devops_dev/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops_dev/</guid>
      <description>&lt;h1 id=&#34;development&#34;&gt;Development&lt;/h1&gt;&#xA;&lt;p&gt;开发相关的工具&lt;/p&gt;&#xA;&lt;p&gt;传统的软件开发采用的是瀑布式开发流程．&lt;/p&gt;&#xA;&lt;p&gt;现代的软件开发采用的是敏捷开发流程(Agile development).&lt;/p&gt;&#xA;&lt;p&gt;Alpha: inner test version.&lt;/p&gt;&#xA;&lt;p&gt;Beta: outer test version.&lt;/p&gt;&#xA;&lt;p&gt;RC: release candidate. 最终版本之前的最后一个版本．也叫gamma.&lt;/p&gt;&#xA;&lt;p&gt;RTM: release to manufacture, 最终版&lt;/p&gt;&#xA;&lt;p&gt;GA: generally avaliable. stable/production.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;怎样选择licenses&#34;&gt;怎样选择Licenses&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://choosealicense.com/licenses/&#34;&gt;http://choosealicense.com/licenses/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/&#34;&gt;https://choosealicense.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://canuxcheng.com/images/license.jpeg&#34; alt=&#34;pic&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;semver&#34;&gt;semver&lt;/h1&gt;&#xA;&lt;p&gt;语义化版本．&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://semver.org/lang/zh-CN/&#34;&gt;http://semver.org/lang/zh-CN/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mojombo/semver&#34;&gt;https://github.com/mojombo/semver&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;主版本号.次版本号.修订号&#xA;Major.Minor.Patch&#xA;&#xA;Major: 做了不兼容的API修改&#xA;Minor: 做了向下兼容的功能性新增&#xA;Patch: 做了向下兼容的问题修正&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;文档阅读工具&#34;&gt;文档阅读工具&lt;/h1&gt;&#xA;&lt;h2 id=&#34;zeal&#34;&gt;zeal&lt;/h2&gt;&#xA;&lt;h2 id=&#34;dash&#34;&gt;dash&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cookiecutter&#34;&gt;cookiecutter&lt;/h1&gt;&#xA;&lt;p&gt;一个快速建立工程模板的命令行工具．&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/audreyr/cookiecutter&#34;&gt;https://github.com/audreyr/cookiecutter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/audreyr/cookiecutter-pypackage&#34;&gt;https://github.com/audreyr/cookiecutter-pypackage&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$sudo -E pip install cookiecutter&#xA;# 创建python项目&#xA;$cookiecutter https://github.com/audreyr/cookiecutter-pypackage.git&#xA;# 创建django格式的python项目&#xA;$cookiecutter https://github.com/pydanny/cookiecutter-django&#xA;# 创建openstack格式的python项目&#xA;$cookiecutter https://git.openstack.org/openstack-dev/cookiecutter.git&#xA;$cookiecutter https://github.com/openstack-dev/cookiecutter.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;bumpversion&#34;&gt;bumpversion&lt;/h1&gt;&#xA;&lt;p&gt;版本管理工具&lt;/p&gt;</description>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://canuxcheng.com/post/devops/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops/</guid>
      <description>&lt;h1 id=&#34;devops&#34;&gt;DevOps&lt;/h1&gt;&#xA;&lt;p&gt;DevOps包括ChatOps, 敏捷开发，持续集成,持续交付,持续发布/部署，QA(自动化测试），智能监控和日志管理等内容．&lt;/p&gt;&#xA;&lt;p&gt;DevOps涉及到三个部门：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Development&lt;/li&gt;&#xA;&lt;li&gt;Operations&lt;/li&gt;&#xA;&lt;li&gt;Quality Assurance&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;ci&#34;&gt;CI&lt;/h1&gt;&#xA;&lt;p&gt;Continuous Integration.&lt;/p&gt;&#xA;&lt;p&gt;持续集成包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编译代码.&lt;/li&gt;&#xA;&lt;li&gt;静态代码分析.&lt;/li&gt;&#xA;&lt;li&gt;自动化测试，例如selenium.&lt;/li&gt;&#xA;&lt;li&gt;代码覆盖率分析.&lt;/li&gt;&#xA;&lt;li&gt;构建，例如docker.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;cd&#34;&gt;CD&lt;/h1&gt;&#xA;&lt;p&gt;Continuous Delivery.&lt;/p&gt;&#xA;&lt;p&gt;持续交付包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将通过测试的代码部署到Staging.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;continuous-releasedeploy&#34;&gt;Continuous Release/Deploy&lt;/h1&gt;&#xA;&lt;p&gt;持续部署/发布包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将通过评审的交付代码部署到Production.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cicd的工具&#34;&gt;CI/CD的工具&lt;/h1&gt;&#xA;&lt;p&gt;持续集成和部署&lt;/p&gt;&#xA;&lt;h2 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h2&gt;&#xA;&lt;h2 id=&#34;travis-ci&#34;&gt;travis CI&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;https://travis-ci.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;travis CI是基于github的CI工具, 部署代码然后运行测试代码.&lt;/p&gt;&#xA;&lt;p&gt;在github项目添加.travis.yml文件：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;language: python&#xA;python:&#xA;  - &amp;quot;2.7&amp;quot;&#xA;install:&#xA;  - pip install -r requirements.txt&#xA;  - pip install coveralls&#xA;script:&#xA;  - coverage run --source=pymonitoringplugins setup.py test&#xA;after_success:&#xA;  - coveralls&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;circleci&#34;&gt;circleci&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/&#34;&gt;https://circleci.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;coverage的工具&#34;&gt;coverage的工具&lt;/h1&gt;&#xA;&lt;p&gt;统计单元测试的覆盖率&lt;/p&gt;&#xA;&lt;h2 id=&#34;coveralls&#34;&gt;coveralls&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/&#34;&gt;https://coveralls.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;codecov&#34;&gt;codecov&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/&#34;&gt;https://codecov.io/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gitlab</title>
      <link>https://canuxcheng.com/post/devops_gitlab/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops_gitlab/</guid>
      <description>&lt;h1 id=&#34;gitlab&#34;&gt;Gitlab&lt;/h1&gt;&#xA;&lt;p&gt;gitlab是开源的有web界面的git服务器．&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://about.gitlab.com/&#34;&gt;https://about.gitlab.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装gitlab:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install -y curl openssh-server ca-certificates&#xA;sudo apt-get install -y postfix&#xA;curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash&#xA;sudo EXTERNAL_URL=&amp;quot;http://gitlab.example.com&amp;quot; apt-get install gitlab-ce&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;配置:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/etc/gitlab/gitlab.rb&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;升级gitlab:&lt;/p&gt;&#xA;&lt;p&gt;需要先升级到下个major版本的最后一个稳定版.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;current:   9.4.7&#xA;patch: gitlab-ce=9.5.10&#xA;patch: gitlab-ce_10.8.7&#xA;patch: gitlab-ce=11.11.8&#xA;patch: gitlab-ce=12.0.12&#xA;target: 12.10.14&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;runner:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;#sudo curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64&#xA;sudo chmod +x /usr/local/bin/gitlab-runner&#xA;sudo gitlab-runner install --user=canux --working-directory=/home/canux/gitlab&#xA;sudo gitlab-runner register&#xA;sudo gitlab-runner start&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;&#xA;&lt;p&gt;备份：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jenkins</title>
      <link>https://canuxcheng.com/post/devops_jenkins/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops_jenkins/</guid>
      <description>&lt;h1 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h1&gt;&#xA;&lt;p&gt;Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks such as building, testing, and deploying software.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jenkinsci/jenkins&#34;&gt;https://github.com/jenkinsci/jenkins&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装好Jenkins后安装需要的插件．&lt;/p&gt;&#xA;&lt;p&gt;安装jenkins:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# download jenkins.war and install java8.&#xA;$ java -jar jenkins.war --httpPort=8080&#xA;$ firefox http://localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;设置开机自动启动，不用每次从终端启动:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vim /etc/systemd/system/jenkins.service&#xA;$ systemctl daemon-reload&#xA;$ systemctl enable jenkins.service&#xA;$ systemctl start jenkins&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;jinkens主目录:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 默认主目录在/home/canux/.jenkins&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;nodes&#34;&gt;nodes&lt;/h1&gt;&#xA;&lt;p&gt;添加节点需要安装和master版本一样的java.&lt;/p&gt;&#xA;&lt;p&gt;on jenkins agent:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;install java.&lt;/li&gt;&#xA;&lt;li&gt;create folder and grant permission. (/home/jenkins)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;on jenkins:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Operations</title>
      <link>https://canuxcheng.com/post/devops_ops/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops_ops/</guid>
      <description>&lt;h1 id=&#34;operations&#34;&gt;Operations&lt;/h1&gt;&#xA;&lt;p&gt;运维相关的工具．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;批量配置管理&#34;&gt;批量配置管理&lt;/h1&gt;&#xA;&lt;h2 id=&#34;puppet&#34;&gt;puppet&lt;/h2&gt;&#xA;&lt;h2 id=&#34;chef&#34;&gt;chef&lt;/h2&gt;&#xA;&lt;h2 id=&#34;salt&#34;&gt;salt&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ansible&#34;&gt;ansible&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;密码管理工具&#34;&gt;密码管理工具&lt;/h1&gt;&#xA;&lt;h2 id=&#34;keepass&#34;&gt;keepass&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://keepass.info/&#34;&gt;http://keepass.info/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;keepassx&#34;&gt;KeePassX&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.keepassx.org/&#34;&gt;https://www.keepassx.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/keepassx/keepassx&#34;&gt;https://github.com/keepassx/keepassx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Admin</title>
      <link>https://canuxcheng.com/post/linux_admin/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/linux_admin/</guid>
      <description>&lt;h1 id=&#34;linux-admin&#34;&gt;Linux Admin&lt;/h1&gt;&#xA;&lt;p&gt;dpkg: ubuntu, debian.&lt;/p&gt;&#xA;&lt;p&gt;rpm: fedora, centos, redhat.&lt;/p&gt;&#xA;&lt;p&gt;zypper: suse.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;linux系统常用的安装和配置&#34;&gt;Linux系统常用的安装和配置&lt;/h1&gt;&#xA;&lt;h2 id=&#34;terminalizer&#34;&gt;terminalizer&lt;/h2&gt;&#xA;&lt;p&gt;终端录制工具&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/faressoft/terminalizer&#34;&gt;https://github.com/faressoft/terminalizer&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;virtualbox&#34;&gt;virtualbox&lt;/h2&gt;&#xA;&lt;p&gt;开机自动挂载共享文件夹&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 手动挂在命令, 需要安装增强功能&#xA;$ mount -t vboxsf FolderNameOnWindows /path/on/linux&#xA;&#xA;# 实现开机自动挂载&#xA;$ sudo vim /etc/rc.local&#xA;mount.vboxsf -w ShareFolderNameOnWindows MountPointOnLinux&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;xrdp&#34;&gt;xrdp&lt;/h2&gt;&#xA;&lt;p&gt;从windows的RDP远程连接linux.&lt;/p&gt;&#xA;&lt;p&gt;use RDP on windows to connect to ubuntu16.04.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sudo dpkg -i tigervncserver_1.6...deb # download and install tigervncserver first.&#xA;sudo apt-get install -f&#xA;sudo apt-get instal xrdp -y&#xA;echo unity &amp;gt; ~/.xsession&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;use RDP on windows to connect to ubuntu14.04.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Agile</title>
      <link>https://canuxcheng.com/post/devops_agile/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/devops_agile/</guid>
      <description>&lt;h1 id=&#34;agile-methodologies&#34;&gt;Agile methodologies&lt;/h1&gt;&#xA;&lt;p&gt;Agile的具体方法有Scrum, XP和kanban.&lt;/p&gt;&#xA;&lt;p&gt;ThoughtWorks公司的Martin Fowler提出的敏捷方法．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;scrum&#34;&gt;Scrum&lt;/h1&gt;&#xA;&lt;p&gt;Scrum方法由Ken Schwaber和Jeff Sutherland 提出.&lt;/p&gt;&#xA;&lt;p&gt;scrum是一个用于开发和维护复杂产品的框架，是一个增量的，迭代的开发过程．&lt;/p&gt;&#xA;&lt;p&gt;sprint: 一个短的迭代周期．一般２到４周．&lt;/p&gt;&#xA;&lt;p&gt;backlog: 按商业价值排序的需求列表．&lt;/p&gt;&#xA;&lt;h2 id=&#34;scrum框架的三个角色&#34;&gt;scrum框架的三个角色&lt;/h2&gt;&#xA;&lt;p&gt;product owner: 产品负责人&lt;/p&gt;&#xA;&lt;p&gt;scrum master: 敏捷教练和领导者&lt;/p&gt;&#xA;&lt;p&gt;scrum team：developer&lt;/p&gt;&#xA;&lt;h2 id=&#34;scrum框架的三个工件&#34;&gt;scrum框架的三个工件&lt;/h2&gt;&#xA;&lt;p&gt;Product backlog: 整个产品待开发需求列表&lt;/p&gt;&#xA;&lt;p&gt;sprint backlog: 一次迭代的待开发需求列表&lt;/p&gt;&#xA;&lt;p&gt;increment: 产品增量&lt;/p&gt;&#xA;&lt;h2 id=&#34;scrum框架的五个事件&#34;&gt;scrum框架的五个事件&lt;/h2&gt;&#xA;&lt;p&gt;sprint planning meeting: sprint计划会议&lt;/p&gt;&#xA;&lt;p&gt;Daily Scrum Meeting/DSM: 每日站立会议&lt;/p&gt;&#xA;&lt;p&gt;sprint review meeting: sprint评审会议&lt;/p&gt;&#xA;&lt;p&gt;sprint retrospective meeting: sprint回顾会议&lt;/p&gt;&#xA;&lt;p&gt;product backlog refinement: 产品backlog梳理会议&lt;/p&gt;&#xA;&lt;h2 id=&#34;scrum框架的五个价值观&#34;&gt;scrum框架的五个价值观&lt;/h2&gt;&#xA;&lt;p&gt;承诺&lt;/p&gt;&#xA;&lt;p&gt;专注&lt;/p&gt;&#xA;&lt;p&gt;开放&lt;/p&gt;&#xA;&lt;p&gt;尊重&lt;/p&gt;&#xA;&lt;p&gt;勇气&lt;/p&gt;&#xA;&lt;h2 id=&#34;scrum框架的四大支柱&#34;&gt;scrum框架的四大支柱&lt;/h2&gt;&#xA;&lt;p&gt;迭代开发&lt;/p&gt;&#xA;&lt;p&gt;增量交付&lt;/p&gt;&#xA;&lt;p&gt;自组织团队&lt;/p&gt;&#xA;&lt;p&gt;高优先级的需求驱动&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;xp&#34;&gt;XP&lt;/h1&gt;&#xA;&lt;p&gt;Extreme Programming&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ansible</title>
      <link>https://canuxcheng.com/post/devops_ansible/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/devops_ansible/</guid>
      <description>&lt;h1 id=&#34;ansible&#34;&gt;Ansible&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ansible/ansible&#34;&gt;https://github.com/ansible/ansible&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ansible.com.cn/index.html&#34;&gt;http://www.ansible.com.cn/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ansible通过SSH来远程管理Linux/Unix机器．&lt;/p&gt;&#xA;&lt;p&gt;ansible通过winrm+powershell来远程管理Windows机器．&lt;/p&gt;&#xA;&lt;p&gt;安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo pip install ansible&#xA;$ sudo apt-get install ansible&#xA;$ sudo yum install ansible&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;配置：&lt;/p&gt;&#xA;&lt;p&gt;参考Network-SSH实现从controller到所有node的无密码登陆&lt;/p&gt;&#xA;&lt;p&gt;配置文件执行顺序:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ANSIBLE_CONFIG&#xA;ansible.cfg&#xA;.ansible.cfg&#xA;/etc/ansible/ansible.cfg&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;手动配置:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/ansible/ansible.cfg&#xA;[defaults]&#xA;ask_pass = False&#xA;host_key_checking = False&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;ansible命令&#34;&gt;ansible命令&lt;/h1&gt;&#xA;&lt;p&gt;ansible运行命令的两种方式：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Ad-hoc相当于直接运行shell命令&lt;/li&gt;&#xA;&lt;li&gt;playbooks相当于运行shell脚本&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;ansible:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ ansible -i inventory group1:group1:group3/all ...&#xA;&#xA;$ansible --help&#xA;-m MODULE_NAME, --module-name=MODULE_NAME # 执行模块，默认是command&#xA;-M MODULE_PATH, --module-path=MODULE_PATH # 指定模块的路径&#xA;-a MODULE_ARGS, --args=MODULE_ARGS # 模块的参数&#xA;-i INVENTORY, --inventory INVENTORY # 默认/etc/ansible/hosts, 需要指定hosts分组&#xA;-f FORKS, --forks=FORKS # 指定并发进程的数量&#xA;-C, --check&#xA;-D, --diff&#xA;-l SUBSET, --limit=SUBSET&#xA;--syntax-check&#xA;--list-hosts&#xA;-v, --verbose # -v, -vvv, -vvvv&#xA;&#xA;# 提权选项&#xA;-b, --become&#xA;--become-method=BECOME_METHOD # sudo(default)/su/pbrun/pfexec/runas/doas&#xA;--become-user=BECOME_USER # root(default)&#xA;-K, --ask-become-pass&#xA;&#xA;# 连接选项&#xA;-u REMOTE_USER&#xA;--ssh-common-args&#xA;--ssh-extra-args&#xA;-T TIMEOUT # default 10s&#xA;-K, --ask-pass&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;inventory&#34;&gt;inventory&lt;/h1&gt;&#xA;&lt;p&gt;inventory包括主机和分组,以及主机变量和分组变量.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Terraform</title>
      <link>https://canuxcheng.com/post/cloud_terraform/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/cloud_terraform/</guid>
      <description>&lt;h1 id=&#34;terraform&#34;&gt;Terraform&lt;/h1&gt;&#xA;&lt;p&gt;install:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://learn.hashicorp.com/tutorials/terraform/install-cli&#34;&gt;https://learn.hashicorp.com/tutorials/terraform/install-cli&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;&#xA;&lt;p&gt;操作工作目录&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 初始化目录，会根据配置下载和安装provider.&#xA;terraform init&#xA;&#xA;terraform get&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;操作tf文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 格式化文件&#xA;terraform fmt -recursive&#xA;&#xA;// 验证文件&#xA;terraform validate &#xA;&#xA;// 可以通过终端验证函数.&#xA;terraform console&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;操作基础设施:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;terraform plan&#xA;terraform plan -out test.tfplan&#xA;&#xA;terraform apply -auto-approve&#xA;terraform apply test.tfplan&#xA;&#xA;terraform destroy&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;检查基础设施:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;terraform show&#xA;terraform graph&#xA;terraform output&#xA;terraform state list/show&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;认证:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;terraform login&#xA;terraform logout&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;tf&#34;&gt;TF&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/language&#34;&gt;https://www.terraform.io/language&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;注释:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# comment &#xA;// comment&#xA;/* comment */&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;backend-and-state&#34;&gt;backend and state&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/language/settings/backends&#34;&gt;https://www.terraform.io/language/settings/backends&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vault</title>
      <link>https://canuxcheng.com/post/devops_vault/</link>
      <pubDate>Fri, 15 Apr 2016 09:41:39 +0800</pubDate>
      <guid>https://canuxcheng.com/post/devops_vault/</guid>
      <description>&lt;h1 id=&#34;vault&#34;&gt;Vault&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hashicorp/vault&#34;&gt;https://github.com/hashicorp/vault&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Install:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://learn.hashicorp.com/tutorials/vault/getting-started-install&#34;&gt;https://learn.hashicorp.com/tutorials/vault/getting-started-install&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;cli&#34;&gt;CLI&lt;/h1&gt;&#xA;&lt;p&gt;可以通过环境变量或者命令行参数指定server:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;-address VAULT_ADDR&#xA;-namespace VAULT_NAMESPACE&#xA;vault [subcommand] -address=&amp;quot;https://server:8200&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;server:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 启动vault&#xA;$ vault server -config=/etc/vault/config.hcl&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;agent:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vault agent&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;login:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 跟据token登陆.&#xA;$ vault login&#xA;&#xA;$vault login -token-only -method=oidc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;operator:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// init生成keys和token.&#xA;$ vault operator init&#xA;&#xA;// 通过keys  unseal&#xA;$ vault operator unseal&#xA;&#xA;// 通过token seal&#xA;$ vault operator seal&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;auth:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 查看auth&#xA;$ vault auth list&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;secrets&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// 查看secrets engine&#xA;$ vault secrets list&#xA;&#xA;// enable kv&#xA;$ vault secrets enable -path=&amp;lt;ns&amp;gt;/&amp;lt;name&amp;gt; kv&#xA;$ vault secrets enable kv&#xA;&#xA;// disable kv&#xA;$ vault secrets disable kv&#xA;&#xA;// 创建一个database engine&#xA;vault secrets enable -path &amp;lt;ns&amp;gt;/mysql database&#xA;// 创建rabbitmq engine&#xA;vault secrets enable -path &amp;lt;ns&amp;gt;/rabbitmq rabbitmq&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;policy&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSL_Test</title>
      <link>https://canuxcheng.com/post/psl_test/</link>
      <pubDate>Mon, 11 Apr 2016 22:58:13 +0000</pubDate>
      <guid>https://canuxcheng.com/post/psl_test/</guid>
      <description>&lt;h1 id=&#34;development-tools&#34;&gt;Development Tools&lt;/h1&gt;&#xA;&lt;h2 id=&#34;typing&#34;&gt;typing&lt;/h2&gt;&#xA;&lt;h2 id=&#34;2to3&#34;&gt;2to3&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;$2to3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;pydoc&#34;&gt;pydoc&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import pydoc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;test&#34;&gt;test&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;import test&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;doctest&#34;&gt;doctest&lt;/h2&gt;&#xA;&lt;p&gt;python内置的文档测试库．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import doctest&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;unittest&#34;&gt;unittest&lt;/h2&gt;&#xA;&lt;p&gt;python内置的单元测试库．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import unittest&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;tpl&#34;&gt;TPL&lt;/h1&gt;&#xA;&lt;p&gt;相关的第三方库&lt;/p&gt;&#xA;&lt;h2 id=&#34;unittest2&#34;&gt;unittest2&lt;/h2&gt;&#xA;&lt;p&gt;unittest2是unittest的升级版．&lt;/p&gt;&#xA;&lt;p&gt;python3集成了unittest2到unittest,像使用unittest一样使用即可．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# python2.7&#xA;$pip install unittest2&#xA;import unittest2&#xA;&#xA;# python3&#xA;import unittest&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;unittest也叫pyunit，类似于Junit(java)都是基于Kent Beck和Erich Gamma的XUnit框架．&lt;/p&gt;&#xA;&lt;p&gt;测试结果：&lt;/p&gt;&#xA;&lt;p&gt;OK 表示测试通过&lt;/p&gt;&#xA;&lt;p&gt;FAIL 表示测试没有通过，并引发一个AssertionError异常．&lt;/p&gt;&#xA;&lt;p&gt;ERROR 表示测试过程引发一个不是AssertionError的异常．&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Python2.7 此处用的是标准库的unittest.&#xA;import unittest&#xA;import MyClass&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;classes:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;unittest.TestCase: 每个实例就是一个test case. 使用TestCase.assert* 系列方法进行测试．&#xA;unittest.TestSuite: 每个实例就是一个test suite. 多个test case放在一起就是一个test suite.&#xA;unittest.TestLoader/unittest.defaultTestLoader: 用来加载TestCase到TestSuite.&#xA;unittest.TestResult: 用来保存测试的结果．&#xA;&#xA;unittest.TestProgram/unittest.main(): 搜索该模块下所有test开头的测试用例方法并执行．&#xA;fixtures对一个测试用例的环境的搭建和销毁，通过重载TestCase的setUp()和teaeDown()方法．&#xA;&#xA;unittest.TextTestRunner: 用来执行测试用例．&#xA;unittest.TextTestResult: 用来打印格式化的测试结果．&#xA;&#xA;# unittest.TestCase&#xA;# methods:&#xA;assertXXX　系列方法．&#xA;failXXX 系列方法&#xA;fail(self, msg=None) # test立即失败&#xA;addCleanup(self, function, *args, **kwargs)&#xA;addTypeEqualityFunc(self, typeobj, function)&#xA;countTestCases(self)&#xA;debug(self)&#xA;defaultTestResult() # return unittest.TestResult()&#xA;doCleanups(self)&#xA;id(self)&#xA;run(self, result=None) # 可以在子类覆盖该方法．&#xA;shortDescription(self)&#xA;skipTest(self, reason)&#xA;setUp(self) # 重写之后，每个case运行之前都会调用一次．&#xA;tearDown(self) # 同上&#xA;&#xA;# classmethods:&#xA;setUpClass(cls) # 通过@classmethod重写，这样所有的case运行之前只调用一次，而不是每个case运行之前都调用．&#xA;tearDownClass(cls) # 同上&#xA;&#xA;# data:&#xA;failureException = AssertionError&#xA;longMessage = False&#xA;maxDiff = 640&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;functions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://canuxcheng.com/post/c_devops/</link>
      <pubDate>Mon, 11 Apr 2016 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/c_devops/</guid>
      <description>&lt;h1 id=&#34;ide&#34;&gt;IDE&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Visual Studio&lt;/li&gt;&#xA;&lt;li&gt;VSCode&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;compilers&#34;&gt;Compilers&lt;/h2&gt;&#xA;&lt;p&gt;编译器组成：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;frontend&lt;/li&gt;&#xA;&lt;li&gt;optimizer&lt;/li&gt;&#xA;&lt;li&gt;backend&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh.cppreference.com/w/cpp/compiler_support&#34;&gt;https://zh.cppreference.com/w/cpp/compiler_support&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;windows:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;llvm clang&lt;/li&gt;&#xA;&lt;li&gt;Mingw&lt;/li&gt;&#xA;&lt;li&gt;Msvc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;linux:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;llvm clang&lt;/li&gt;&#xA;&lt;li&gt;gcc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;mac:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;llvm clang&lt;/li&gt;&#xA;&lt;li&gt;gcc&lt;/li&gt;&#xA;&lt;li&gt;apple clang&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;gcc&#34;&gt;gcc&lt;/h3&gt;&#xA;&lt;p&gt;gnu gcc,g++&lt;/p&gt;&#xA;&lt;h3 id=&#34;llvm-clang&#34;&gt;llvm clang&lt;/h3&gt;&#xA;&lt;p&gt;llvm: low level virtual machine. (backend)&lt;/p&gt;&#xA;&lt;p&gt;clang: c language.(frontend)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;tools&#34;&gt;tools&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CMake&lt;/li&gt;&#xA;&lt;li&gt;MSBuild&lt;/li&gt;&#xA;&lt;li&gt;Makefile&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;gcc-1&#34;&gt;GCC&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;-ansi&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;for c: == -std=c90&#xA;for cpp: ==-std=c++98&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;-std&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;c++17, gnu++17, gnu17,c17&#xA;gnu2x: 下个ISO C标准。&#xA;c2x:下个ISO C标准。&#xA;c++2a: 下个ISO C++标准&#xA;gnu+2a:下个ISO C++标准&lt;/p&gt;&#xA;&lt;p&gt;gcc8 开始支持c++20.&#xA;gcc11开始支持c++23.&lt;/p&gt;&#xA;&lt;h2 id=&#34;vscode&#34;&gt;vscode&lt;/h2&gt;&#xA;&lt;p&gt;for macOS:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Document</title>
      <link>https://canuxcheng.com/post/c_document/</link>
      <pubDate>Mon, 11 Apr 2016 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/c_document/</guid>
      <description>&lt;h1 id=&#34;document&#34;&gt;Document&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;doxygen&#34;&gt;Doxygen&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Hadoop</title>
      <link>https://canuxcheng.com/post/hadoop/</link>
      <pubDate>Mon, 11 Apr 2016 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/hadoop/</guid>
      <description>&lt;h1 id=&#34;hadoop&#34;&gt;Hadoop&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/hadoop&#34;&gt;https://github.com/apache/hadoop&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;apache hadoop是一个框架，允许使用简单的编程模型在大量计算机上对大型数据集进行分布式处理．&lt;/p&gt;&#xA;&lt;p&gt;hadoop1只有HDFS和MapReduce两个模块，hadoop2开始分为HDFS, YARN, MapReduce三个模块．&lt;/p&gt;&#xA;&lt;p&gt;hadoop的版本:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;apache hadoop&lt;/li&gt;&#xA;&lt;li&gt;hortonworks hadoop (HDP)&lt;/li&gt;&#xA;&lt;li&gt;cloudera hadoop (CDH)&lt;/li&gt;&#xA;&lt;li&gt;mapr&lt;/li&gt;&#xA;&lt;li&gt;transwarp&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;安装hadoop&#34;&gt;安装hadoop&lt;/h1&gt;&#xA;&lt;p&gt;hadoop有三种安装模式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单节点模式&lt;/li&gt;&#xA;&lt;li&gt;伪分布式模式&lt;/li&gt;&#xA;&lt;li&gt;分布式模式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;参考Linux Admin和Network SSH如何安装多台centos，并且配置局域网，让本地多台机器相互访问．&lt;/p&gt;&#xA;&lt;p&gt;下载hadoop的二进制安装包，然后放到/home/hadoop/目录下并解压．&lt;/p&gt;&#xA;&lt;p&gt;推荐的cluster node:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;NameNode(hdfs)&#xA;Secondary NameNode(hdfs)&#xA;DataNode(hdfs)&#xA;ResourceManager server(yarn)&#xA;NodeManager server(yarn)&#xA;WebAppProxy server(yarn)&#xA;MapReduceJobHistory server(mapreduce)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;设置环境变量：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vim ~/.bash_profile&#xA;export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-.../jre&#xA;export HADOOP_HOME=/home/hadoop/hadoop-3.0.0-alpha2&#xA;export PATH=$JAVA_HOME/bin:$HADOOP_HOME/bin:$PATH&#xA;$ source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;修改hadoop的环境变量：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ cd hadoop-3.0.0-alpha2/etc/hadoop&#xA;$ vim hadoop-env.sh&#xA;export JAVA_HOME=&#39;/usr/lib/jvm/java-1.8.0-openjdk-.../jre&#xA;&#xA;# 测试java和hadoop的环境是否可用：&#xA;$ hadoop&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;分布式环境搭建：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hadoop HDFS</title>
      <link>https://canuxcheng.com/post/hadoop_hdfs/</link>
      <pubDate>Mon, 11 Apr 2016 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/hadoop_hdfs/</guid>
      <description>&lt;h1 id=&#34;hdfs&#34;&gt;HDFS&lt;/h1&gt;&#xA;&lt;p&gt;Hadoop Distributed File System: hadoop分布式文件系统&lt;/p&gt;&#xA;&lt;p&gt;hadoop hdfs分为三部分:&lt;/p&gt;&#xA;&lt;p&gt;NameNode -&amp;gt; JobTracker&lt;/p&gt;&#xA;&lt;p&gt;secondary NameNode&lt;/p&gt;&#xA;&lt;p&gt;DataNode -&amp;gt; TaskTracker&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;hdfs-commands&#34;&gt;hdfs commands&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;hdfs [SHELL_OPTIONS] COMMAND [GENERIC_OPTIONS] [COMMAND_OPTIONS]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;user commands:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ hdfs classpath&#xA;&#xA;$ hdfs dfs # 参考 hadoop fs命令&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;admin commands:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ hdfs balancer&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;debug commands:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ hdfs verify&#xA;&#xA;$ hdfs recoverLease&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Hadoop YARN</title>
      <link>https://canuxcheng.com/post/hadoop_yarn/</link>
      <pubDate>Mon, 11 Apr 2016 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/hadoop_yarn/</guid>
      <description>&lt;h1 id=&#34;yarn&#34;&gt;YARN&lt;/h1&gt;&#xA;&lt;p&gt;作业调度和集群资源管理的框架．&lt;/p&gt;&#xA;&lt;p&gt;yarn的两个组件：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;resourcemanager&lt;/li&gt;&#xA;&lt;li&gt;nodemanager&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;yarn-commands&#34;&gt;yarn commands&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;yarn [--config confdir] COMMAND [--loglevel loglevel] [GENERIC_OPTIONS] [COMMAND_OPTIONS]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;user commands:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ yarn application&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;admin commands:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ yarn daemonlog&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;resource-manager&#34;&gt;resource manager&lt;/h1&gt;&#xA;&lt;p&gt;resource manager由两部分组成：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;scheduler&lt;/li&gt;&#xA;&lt;li&gt;applicationmanager&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ResourceManager功能：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;处理客户请求&lt;/li&gt;&#xA;&lt;li&gt;启动／监控applicationmaster&lt;/li&gt;&#xA;&lt;li&gt;监控nodemanager&lt;/li&gt;&#xA;&lt;li&gt;资源分配与调度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ApplicationMaster功能：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据切分&lt;/li&gt;&#xA;&lt;li&gt;为应用申请资源, 并分配给内部任务&lt;/li&gt;&#xA;&lt;li&gt;任务监控与容错&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;node-manager&#34;&gt;node manager&lt;/h1&gt;&#xA;&lt;p&gt;node manager功能：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单个节点的资源管理&lt;/li&gt;&#xA;&lt;li&gt;处理来自resourcemanager的命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Package</title>
      <link>https://canuxcheng.com/post/c_package/</link>
      <pubDate>Mon, 11 Apr 2016 22:57:37 +0000</pubDate>
      <guid>https://canuxcheng.com/post/c_package/</guid>
      <description>&lt;h1 id=&#34;package&#34;&gt;Package&lt;/h1&gt;</description>
    </item>
    <item>
      <title>BigData</title>
      <link>https://canuxcheng.com/post/bigdata/</link>
      <pubDate>Mon, 11 Apr 2016 22:57:37 +0800</pubDate>
      <guid>https://canuxcheng.com/post/bigdata/</guid>
      <description>&lt;h1 id=&#34;bigdata&#34;&gt;BigData&lt;/h1&gt;&#xA;&lt;p&gt;大数据最流行的框架是hadoop.&lt;/p&gt;&#xA;&lt;p&gt;大部分工具都属于Apache基金会的项目．&lt;/p&gt;&#xA;&lt;h1 id=&#34;mpp&#34;&gt;MPP&lt;/h1&gt;&#xA;&lt;p&gt;Massive Parallel Process&lt;/p&gt;&#xA;&lt;p&gt;大规模并行处理数据库包括impala, hawq&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;分布式存储&#34;&gt;分布式存储&lt;/h1&gt;&#xA;&lt;h2 id=&#34;hadoop-hdfs&#34;&gt;hadoop hdfs&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;资源调度&#34;&gt;资源调度&lt;/h1&gt;&#xA;&lt;h2 id=&#34;hadoop-yarn&#34;&gt;hadoop yarn&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;分布式计算框架&#34;&gt;分布式计算框架&lt;/h1&gt;&#xA;&lt;h2 id=&#34;hadoop-mapreduce&#34;&gt;hadoop mapreduce&lt;/h2&gt;&#xA;&lt;h2 id=&#34;spark&#34;&gt;Spark&lt;/h2&gt;&#xA;&lt;h1 id=&#34;流式计算框架&#34;&gt;流式计算框架&lt;/h1&gt;&#xA;&lt;h2 id=&#34;storm&#34;&gt;Storm&lt;/h2&gt;&#xA;&lt;h2 id=&#34;flink&#34;&gt;Flink&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;部署工具&#34;&gt;部署工具&lt;/h1&gt;&#xA;&lt;h2 id=&#34;ambari&#34;&gt;Ambari&lt;/h2&gt;&#xA;&lt;p&gt;用于配置，管理，监控hadoop集群的web工具．&lt;/p&gt;&#xA;&lt;h2 id=&#34;bigtop&#34;&gt;Bigtop&lt;/h2&gt;&#xA;&lt;p&gt;对hadoop相关软件打包，分发，测试的工具．&lt;/p&gt;&#xA;&lt;h2 id=&#34;whirr&#34;&gt;whirr&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cloudera-hue&#34;&gt;Cloudera Hue&lt;/h2&gt;&#xA;&lt;h2 id=&#34;hortonworks-hoya&#34;&gt;Hortonworks hoya&lt;/h2&gt;&#xA;&lt;h1 id=&#34;服务编程&#34;&gt;服务编程&lt;/h1&gt;&#xA;&lt;h2 id=&#34;zookeeper&#34;&gt;Zookeeper&lt;/h2&gt;&#xA;&lt;p&gt;分布式应用程序的高性能协调服务&lt;/p&gt;&#xA;&lt;h2 id=&#34;curator&#34;&gt;Curator&lt;/h2&gt;&#xA;&lt;h2 id=&#34;avro&#34;&gt;Avro&lt;/h2&gt;&#xA;&lt;h2 id=&#34;chuckwa&#34;&gt;chuckwa&lt;/h2&gt;&#xA;&lt;p&gt;用于监控大型分布式系统的数据收集系统．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;交互式分析框架sql-on-hadoop&#34;&gt;交互式分析框架(Sql On Hadoop)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;facebook-presto&#34;&gt;Facebook Presto&lt;/h2&gt;&#xA;&lt;h2 id=&#34;hive&#34;&gt;Hive&lt;/h2&gt;&#xA;&lt;h2 id=&#34;hawqpivotal&#34;&gt;Hawq(Pivotal)&lt;/h2&gt;&#xA;&lt;p&gt;Hortonworks的HDP集成了HAWQ.&lt;/p&gt;&#xA;&lt;h2 id=&#34;impalacloudera&#34;&gt;Impala(Cloudera)&lt;/h2&gt;&#xA;&lt;p&gt;Cloudera的CHD集成了Impala.&lt;/p&gt;&#xA;&lt;h1 id=&#34;交互式分析框架nosql-on-hadoop&#34;&gt;交互式分析框架(NoSQL On Hadoop)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;hbase&#34;&gt;HBase&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cassandra&#34;&gt;Cassandra&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;数据管理工具&#34;&gt;数据管理工具&lt;/h1&gt;&#xA;&lt;h2 id=&#34;sqoop&#34;&gt;Sqoop&lt;/h2&gt;&#xA;&lt;h2 id=&#34;flume&#34;&gt;Flume&lt;/h2&gt;&#xA;&lt;h1 id=&#34;消息队列&#34;&gt;消息队列&lt;/h1&gt;&#xA;&lt;h2 id=&#34;kafka&#34;&gt;Kafka&lt;/h2&gt;&#xA;&lt;h2 id=&#34;pivotal-rabbitmq&#34;&gt;Pivotal RabbitMQ&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;dsl&#34;&gt;DSL&lt;/h1&gt;&#xA;&lt;h2 id=&#34;pig&#34;&gt;Pig&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;workflow-and-lifecycle&#34;&gt;Workflow and Lifecycle&lt;/h1&gt;&#xA;&lt;h2 id=&#34;oozie&#34;&gt;Oozie&lt;/h2&gt;&#xA;&lt;h2 id=&#34;aurora&#34;&gt;aurora&lt;/h2&gt;&#xA;&lt;h2 id=&#34;falcon&#34;&gt;falcon&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;security&#34;&gt;Security&lt;/h1&gt;&#xA;&lt;h2 id=&#34;sentry&#34;&gt;Sentry&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-search&#34;&gt;Data search&lt;/h1&gt;&#xA;&lt;h2 id=&#34;solr&#34;&gt;Solr&lt;/h2&gt;&#xA;&lt;h2 id=&#34;nutch&#34;&gt;Nutch&lt;/h2&gt;&#xA;&lt;h2 id=&#34;lucene&#34;&gt;Lucene&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-analytics&#34;&gt;Data Analytics&lt;/h1&gt;&#xA;&lt;h2 id=&#34;mahout&#34;&gt;Mahout&lt;/h2&gt;&#xA;&lt;h2 id=&#34;kuducloudera&#34;&gt;Kudu(Cloudera)&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;misc&#34;&gt;Misc&lt;/h1&gt;&#xA;&lt;h2 id=&#34;hama&#34;&gt;hama&lt;/h2&gt;&#xA;&lt;h2 id=&#34;giraph&#34;&gt;giraph&lt;/h2&gt;&#xA;&lt;h2 id=&#34;crunch&#34;&gt;crunch&lt;/h2&gt;&#xA;&lt;h2 id=&#34;hcatalog&#34;&gt;hcatalog&lt;/h2&gt;</description>
    </item>
    <item>
      <title>France</title>
      <link>https://canuxcheng.com/post/travel_france/</link>
      <pubDate>Sun, 10 Apr 2016 17:49:15 +0000</pubDate>
      <guid>https://canuxcheng.com/post/travel_france/</guid>
      <description>&lt;h1 id=&#34;法国之旅&#34;&gt;法国之旅&lt;/h1&gt;&#xA;&lt;p&gt;看照片：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://user.qzone.qq.com/1085694641&#34;&gt;http://user.qzone.qq.com/1085694641&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;戴高乐机场&lt;/p&gt;&#xA;&lt;p&gt;雅高集团的宜必思酒店&lt;/p&gt;&#xA;&lt;p&gt;SNCF的TVG火车&lt;/p&gt;&#xA;&lt;p&gt;法国有22个大区。&lt;/p&gt;&#xA;&lt;h1 id=&#34;法兰西岛&#34;&gt;法兰西岛&lt;/h1&gt;&#xA;&lt;h2 id=&#34;巴黎省&#34;&gt;巴黎省&lt;/h2&gt;&#xA;&lt;p&gt;巴黎是法国首都，大区首府和该省省会。&lt;/p&gt;&#xA;&lt;p&gt;埃菲尔铁塔&lt;/p&gt;&#xA;&lt;p&gt;凯旋门&lt;/p&gt;&#xA;&lt;p&gt;塞纳河&lt;/p&gt;&#xA;&lt;p&gt;卢浮宫&lt;/p&gt;&#xA;&lt;p&gt;巴黎圣母院&lt;/p&gt;&#xA;&lt;h2 id=&#34;伊夫林省&#34;&gt;伊夫林省&lt;/h2&gt;&#xA;&lt;p&gt;凡尔赛是该省省会。&lt;/p&gt;&#xA;&lt;p&gt;著名景点凡尔赛宫。&lt;/p&gt;&#xA;&lt;h2 id=&#34;塞纳-马恩省&#34;&gt;塞纳-马恩省&lt;/h2&gt;&#xA;&lt;p&gt;著名景点枫丹白露。&lt;/p&gt;&#xA;&lt;h1 id=&#34;弗朗什-孔泰&#34;&gt;弗朗什-孔泰&lt;/h1&gt;&#xA;&lt;h2 id=&#34;杜省&#34;&gt;杜省&lt;/h2&gt;&#xA;&lt;p&gt;贝桑松是大区首府和省会。&lt;/p&gt;&#xA;&lt;p&gt;蒙贝利亚尔是杜省的一个区。&lt;/p&gt;&#xA;&lt;h2 id=&#34;贝尔福地区&#34;&gt;贝尔福地区&lt;/h2&gt;&#xA;&lt;p&gt;贝尔福是省会驻地,与瑞士相邻。&lt;/p&gt;&#xA;&lt;p&gt;景点有贝尔福雄狮。&lt;/p&gt;&#xA;&lt;p&gt;Eurockéennes法国最大的摇滚音乐节。&lt;/p&gt;&#xA;&lt;h1 id=&#34;阿尔萨斯&#34;&gt;阿尔萨斯&lt;/h1&gt;&#xA;&lt;p&gt;斯特拉斯堡是省会。&lt;/p&gt;&#xA;&lt;h2 id=&#34;下莱茵省&#34;&gt;下莱茵省&lt;/h2&gt;&#xA;&lt;p&gt;斯特拉斯堡是大区首府和省会。&lt;/p&gt;&#xA;&lt;h2 id=&#34;上莱茵省&#34;&gt;上莱茵省&lt;/h2&gt;&#xA;&lt;p&gt;科尔马是该省的首府,是童话小镇。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MSSql</title>
      <link>https://canuxcheng.com/post/mssql/</link>
      <pubDate>Wed, 06 Apr 2016 15:33:42 +0000</pubDate>
      <guid>https://canuxcheng.com/post/mssql/</guid>
      <description>&lt;h1 id=&#34;mssql&#34;&gt;MSSQL&lt;/h1&gt;&#xA;&lt;p&gt;商业版：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;企业版&lt;/li&gt;&#xA;&lt;li&gt;商业智能版&lt;/li&gt;&#xA;&lt;li&gt;标准版&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;免费版：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Express&lt;/li&gt;&#xA;&lt;li&gt;Developer&lt;/li&gt;&#xA;&lt;li&gt;Compact&lt;/li&gt;&#xA;&lt;li&gt;Web&lt;/li&gt;&#xA;&lt;li&gt;SQL Azure&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;system databases:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;master 主数据库&lt;/li&gt;&#xA;&lt;li&gt;model  模板数据库&lt;/li&gt;&#xA;&lt;li&gt;msdb   自动机数据库&lt;/li&gt;&#xA;&lt;li&gt;tempdb 零时交换数据库,不需要备份,挂载到独立的子系统。&lt;/li&gt;&#xA;&lt;li&gt;resource&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;default port：1433&lt;/p&gt;&#xA;&lt;p&gt;2008: max instance 16&lt;/p&gt;&#xA;&lt;p&gt;2012: max instance 256&lt;/p&gt;&#xA;&lt;p&gt;Client -&amp;gt; SNAC(OLE DB/ODBC) -&amp;gt; Network Libraries -&amp;gt; TDS &amp;lt;=&amp;gt; Server -&amp;gt; Endpoints -&amp;gt; SQL OS(relational engine/storage engine)&lt;/p&gt;&#xA;&lt;h2 id=&#34;gui&#34;&gt;GUI&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SSMS&lt;/p&gt;&#xA;&lt;p&gt;SQL Server Management Studio是mssql的图形化管理界面。&lt;/p&gt;&#xA;&lt;p&gt;从模板中获取常用的SQL：&lt;/p&gt;&#xA;&lt;p&gt;view -&amp;gt; template explorer + query -&amp;gt; specify values for template parameters.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudComputing</title>
      <link>https://canuxcheng.com/post/cloud_computing/</link>
      <pubDate>Tue, 05 Apr 2016 22:02:31 +0000</pubDate>
      <guid>https://canuxcheng.com/post/cloud_computing/</guid>
      <description>&lt;h1 id=&#34;cloudcomputing&#34;&gt;CloudComputing&lt;/h1&gt;&#xA;&lt;p&gt;IAAS: Infrastructure as a service&lt;/p&gt;&#xA;&lt;p&gt;PAAS: Platform as a service&lt;/p&gt;&#xA;&lt;p&gt;SAAS: Software as a service&lt;/p&gt;&#xA;&lt;h1 id=&#34;serverless&#34;&gt;Serverless&lt;/h1&gt;&#xA;&lt;p&gt;Faas: Function as a service.&lt;/p&gt;&#xA;&lt;p&gt;Baas: Backend as a service.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Esxi</title>
      <link>https://canuxcheng.com/post/esxi/</link>
      <pubDate>Tue, 05 Apr 2016 21:47:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/esxi/</guid>
      <description>&lt;h1 id=&#34;vmware&#34;&gt;VMware&lt;/h1&gt;&#xA;&lt;p&gt;vSphere是vmware的虚拟化平台,包括ESXi和vSphere Client.&lt;/p&gt;&#xA;&lt;p&gt;vSphere Hypervisor(也叫ESXi)是vSphere的免费裸机hypervisor. 把物理机虚拟出多个虚拟机．&lt;/p&gt;&#xA;&lt;p&gt;vSphere client是vSphere的简单管理工具．只能管理一台ESXi物理机和上面的虚拟机．&lt;/p&gt;&#xA;&lt;p&gt;vCenter Server是vSphere的高级管理系统．需单独购买．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;配置管理&#34;&gt;配置管理&lt;/h1&gt;&#xA;&lt;p&gt;开启虚拟机copy/paste功能：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 通过vsphere client&#xA;edit properties -&amp;gt; Options -&amp;gt; Advanced -&amp;gt; General -&amp;gt; configuration Parameters&#xA;# isolation.tools.copy.disable    false&#xA;# isolation.tools.paste.disable    false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;开启虚拟机的虚拟化功能：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 通过ssh到esxi服务器&#xA;$ vim /vmfs/volumes/datastore1/Ubuntu1604/Ubuntu1604.vmx&#xA;vhv.enable = &amp;quot;TRUE&amp;quot; # 添加到最后一行&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建的vm命名不能带小数点.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;命令&#34;&gt;命令&lt;/h1&gt;&#xA;&lt;p&gt;vim-cmd:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;vim-cmd vmsvc/getallvms # 获取所有虚拟机&#xA;vim-cmd vmsvc/reload&#xA;vim-cmd vmsvc/power.on vmid&#xA;vim-cmd vmsvc/power.shutdown vimid&#xA;vim-cmd vmsvc/power.off vimid&#xA;vim-cmd vmsvc/power.reboot vimid&#xA;&#xA;# power on all vms&#xA;for vm in `vim-cmd vmsvc/getallvms | awk &#39;{if (NR&amp;gt;1) {print $1}}&#39;`;&#xA;do&#xA;    echo &amp;quot;power on ${vm}...&amp;quot;;&#xA;    vim-cmd vmsvc/power.on ${vm}&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;esxcli:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Virtualization</title>
      <link>https://canuxcheng.com/post/virtualization/</link>
      <pubDate>Tue, 05 Apr 2016 21:47:54 +0000</pubDate>
      <guid>https://canuxcheng.com/post/virtualization/</guid>
      <description>&lt;h1 id=&#34;virtualization&#34;&gt;Virtualization&lt;/h1&gt;&#xA;&lt;p&gt;虚拟化技术的发展：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;DataCenter, 最原始的数据中心&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Virtualization, 虚拟化技术，包括Kvm, Xen(Citrix), HyperV(MicroSoft), ESXi(VMware)等&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Monitoring</title>
      <link>https://canuxcheng.com/post/network_monitoring/</link>
      <pubDate>Sun, 03 Apr 2016 14:46:19 +0000</pubDate>
      <guid>https://canuxcheng.com/post/network_monitoring/</guid>
      <description>&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;&#xA;&lt;p&gt;network usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;bytes_sent(out)&#xA;bytes_recv(in)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;packets:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;packets_sent(out)&#xA;packets_recv(in)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;error_in/out:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;SELECT non_negative_derivative(mean(&amp;quot;err_in&amp;quot;), 1s) AS &amp;quot;recv&amp;quot;, non_negative_derivative(mean(&amp;quot;err_out&amp;quot;), 1s) AS &amp;quot;send&amp;quot;&#xA;FROM &amp;quot;net&amp;quot;&#xA;WHERE &amp;quot;interface&amp;quot; =~ /^(vlan|eth|ens|bond).*/ AND $timeFilter&#xA;GROUP BY time($__interval), &amp;quot;host&amp;quot;, &amp;quot;interface&amp;quot; fill(none)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;drop_in/out:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;SELECT non_negative_derivative(mean(&amp;quot;drop_in&amp;quot;), 1s) AS &amp;quot;recv&amp;quot;, non_negative_derivative(mean(&amp;quot;drop_out&amp;quot;), 1s) AS &amp;quot;send&amp;quot;&#xA;FROM &amp;quot;net&amp;quot;&#xA;WHERE &amp;quot;interface&amp;quot; =~ /^(vlan|eth|ens|bond).*/ AND $timeFilter&#xA;GROUP BY time($__interval), &amp;quot;host&amp;quot;, &amp;quot;interface&amp;quot; fill(none)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Network</title>
      <link>https://canuxcheng.com/post/network/</link>
      <pubDate>Sun, 03 Apr 2016 14:46:19 +0000</pubDate>
      <guid>https://canuxcheng.com/post/network/</guid>
      <description>&lt;h1 id=&#34;网络基础&#34;&gt;网络基础&lt;/h1&gt;&#xA;&lt;p&gt;小端： 低字节在起始地址，高字节在高地址&lt;/p&gt;&#xA;&lt;p&gt;大端： 高字节在起始地址，低字节在高地址&lt;/p&gt;&#xA;&lt;p&gt;linux一般是小端，unix一般是大端&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.rfc-editor.org/&#34;&gt;https://www.rfc-editor.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;网络模型&#34;&gt;网络模型&lt;/h2&gt;&#xA;&lt;p&gt;OSI七层模型:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;应用层&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;表示层&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;会话层&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;传输层&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;网络层&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;链路层&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;物理层&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;TCP/IP四层模型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;应用层&lt;/li&gt;&#xA;&lt;li&gt;传输层&lt;/li&gt;&#xA;&lt;li&gt;网络层&lt;/li&gt;&#xA;&lt;li&gt;链路层&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;应用层&#34;&gt;应用层&lt;/h3&gt;&#xA;&lt;p&gt;0-1024是系统保留端口, 1024-65535是可用自定义端口&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml&#34;&gt;https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;8443:  tcp/udp - https port&#xA;9443: tcp/udp tungsten-https&#xA;4443: tcp/udp pharos&lt;/p&gt;&#xA;&lt;p&gt;基于TCP的应用层&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;FTP: 21,&#xA;SSH: 22,&#xA;Telnet: 23,&#xA;SMTP: 25,&#xA;DNS: 53,&#xA;HTTP: 80,&#xA;HTTPS: 443,&#xA;POP3: 110,&#xA;POP3 SSL: 995&#xA;IMAP: 143,&#xA;IMAP SSL: 993,&#xA;NNTP: 119,&#xA;NNTP SSL: 563,&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;基于UDP的应用层&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;SMTP: 25,&#xA;DNS: 53,&#xA;DHCP: 67,&#xA;TFTP：69,简单文件传输协议。&#xA;NTP/SNTP: 123,&#xA;SNMP：161,简单网络管理协议。&#xA;SNMPtrap: 162,&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看端口&lt;/p&gt;</description>
    </item>
    <item>
      <title>Samba</title>
      <link>https://canuxcheng.com/post/samba/</link>
      <pubDate>Sun, 03 Apr 2016 14:46:19 +0000</pubDate>
      <guid>https://canuxcheng.com/post/samba/</guid>
      <description>&lt;h1 id=&#34;smbcifs&#34;&gt;SMB/CIFS&lt;/h1&gt;&#xA;&lt;p&gt;SMB/CIFS占用TCP和UDP的139和445端口。&lt;/p&gt;&#xA;&lt;p&gt;SMB: server message block.&lt;/p&gt;&#xA;&lt;p&gt;CIFS: common internet file system, 是SMB的升级版本。&lt;/p&gt;&#xA;&lt;h1 id=&#34;samba&#34;&gt;Samba&lt;/h1&gt;&#xA;&lt;p&gt;Samba: Linux/Unix上的SBM/CIFS,用于跨平台的共享。&lt;/p&gt;&#xA;&lt;p&gt;安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get insall samba&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;配置：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ vim /etc/samba/smb.conf&#xA;[shared]&#xA;comment = share this folder&#xA;path = /home/canux/Share&#xA;public = yes&#xA;guest ok = yes&#xA;browsable = yes&#xA;writable = no&#xA;read only = yes&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;重启：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo service smbd restart&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;windows访问：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;\\ip\folder&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;linux访问：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;connect to server -&amp;gt; smb://ip/folder&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Postgresql</title>
      <link>https://canuxcheng.com/post/postgre/</link>
      <pubDate>Sun, 03 Apr 2016 14:46:14 +0000</pubDate>
      <guid>https://canuxcheng.com/post/postgre/</guid>
      <description>&lt;h1 id=&#34;postgresql&#34;&gt;PostgreSQL&lt;/h1&gt;&#xA;&lt;p&gt;安装postgresql：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install postgresql&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;安装第三方库：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install postgresql-contrib-9.3 libpg-dev postgresql-server-dev-9.3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;GUI工具： pgAdminIII&lt;/p&gt;&#xA;&lt;p&gt;CLI工具： psql&lt;/p&gt;&#xA;&lt;p&gt;postgresql的端口是5432．&lt;/p&gt;&#xA;&lt;h1 id=&#34;postgresql命令&#34;&gt;postgresql命令&lt;/h1&gt;&#xA;&lt;p&gt;安装完成后默认的admin就是postgres, postgres里有默认数据库postgres.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$passwd postgres # 修改默认管理员用户postgres的密码&#xA;$su - postgres # 切换到默认的postgres用户&#xA;&#xA;$ psql [OPTION]... [DBNAME [USERNAME]]&#xA;&#xA;$createuser &amp;lt;username&amp;gt; -P # 在命令行添加用户&#xA;$dropuser &amp;lt;username&amp;gt; # 在命令行删除用户&#xA;&#xA;$createdb &amp;lt;database&amp;gt; -O &amp;lt;username&amp;gt; # 在命令行添加数据库&#xA;$dropdb &amp;lt;database&amp;gt; # 在命令行删除数据库&#xA;&#xA;# 交互式:&#xA;$ psql -U [username] [database]&#xA;&#xA;# 非交互式：&#xA;$ PGPASSWORD=&#39;password&#39;;psql -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; -U &amp;lt;username&amp;gt; -d [database] -c &amp;quot;[psql command]&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;导出数据：&lt;/p&gt;</description>
    </item>
    <item>
      <title>WMI</title>
      <link>https://canuxcheng.com/post/win_wmi/</link>
      <pubDate>Sun, 03 Apr 2016 14:15:47 +0000</pubDate>
      <guid>https://canuxcheng.com/post/win_wmi/</guid>
      <description>&lt;h1 id=&#34;wmicim&#34;&gt;WMI/CIM&lt;/h1&gt;&#xA;&lt;p&gt;WMI: windows management instrumentation.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/aa394582(v=vs.85).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/aa394582(v=vs.85).aspx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;CIM: common information model.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/aa389234(v=vs.85).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/aa389234(v=vs.85).aspx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;DCOM: distributed COM.&lt;/p&gt;&#xA;&lt;p&gt;wmi通过DCOM远程连接，但是DCOM不能绕过防火墙。&lt;/p&gt;&#xA;&lt;p&gt;命名空间:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;root\cimv2&#xA;root\microsoftdns&#xA;root\securitycenter&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;WMI工具：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;windows自带wmi测试工具wbemtest.&lt;/li&gt;&#xA;&lt;li&gt;WMI Explorer用于查找wmi和cim的Class和Properties.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ks-soft.net/hostmon.eng/wmi/index.htm#SysReq&#34;&gt;http://www.ks-soft.net/hostmon.eng/wmi/index.htm#SysReq&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;windows怎样设置wmi：&lt;/p&gt;&#xA;&lt;p&gt;135 (Microsoft RPC), 137-139 (NetBIOS) and 445 (Microsoft DS). These are TCP ports.&lt;/p&gt;&#xA;&lt;p&gt;设置的用户需要是管理员组。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://technet.microsoft.com/en-us/library/cc771551(v=ws.11).aspx&#34;&gt;https://technet.microsoft.com/en-us/library/cc771551(v=ws.11).aspx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给wmi设置fix port(server in DMZ)：&lt;/p&gt;&#xA;&lt;p&gt;使用过程中不需要指定端口。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/zh-cn/library/bb219447(v=vs.85).aspx&#34;&gt;https://msdn.microsoft.com/zh-cn/library/bb219447(v=vs.85).aspx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;wmic&#34;&gt;wmic&lt;/h1&gt;&#xA;&lt;p&gt;wmic是wmi的客户端命令。&lt;/p&gt;&#xA;&lt;p&gt;windows的wmic：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;wmic # 进入wmi的交互模式&#xA;&amp;gt;wmic -? # 查看帮助&#xA;&amp;gt;wmic /? # 查看帮助&#xA;&amp;gt;wmic ... # 非交互模式运行命令&#xA;&amp;gt;wmic process call create shutdown.exe # 本地关机&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;linux的wmic：&lt;/p&gt;</description>
    </item>
    <item>
      <title>FileSystem</title>
      <link>https://canuxcheng.com/post/win_filesystem/</link>
      <pubDate>Sun, 03 Apr 2016 14:15:40 +0000</pubDate>
      <guid>https://canuxcheng.com/post/win_filesystem/</guid>
      <description></description>
    </item>
    <item>
      <title>Monitoring</title>
      <link>https://canuxcheng.com/post/win_monitoring/</link>
      <pubDate>Sun, 03 Apr 2016 14:15:40 +0000</pubDate>
      <guid>https://canuxcheng.com/post/win_monitoring/</guid>
      <description>&lt;h1 id=&#34;windows的services和process&#34;&gt;windows的services和process&lt;/h1&gt;&#xA;&lt;p&gt;services是windows的服务，有Name(Display Name)，Service Name，Description等属性。&lt;/p&gt;&#xA;&lt;p&gt;process是以.exe为后缀的application，有Name(product name)、original filename(Image Name)、file description(description)等属性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows</title>
      <link>https://canuxcheng.com/post/win/</link>
      <pubDate>Sun, 03 Apr 2016 14:15:40 +0000</pubDate>
      <guid>https://canuxcheng.com/post/win/</guid>
      <description>&lt;h1 id=&#34;windows的ide&#34;&gt;windows的IDE&lt;/h1&gt;&#xA;&lt;p&gt;VS Enterprise: 收费企业版&#xA;VS Professional: 收费个人版&#xA;VS Community: 免费社区版&lt;/p&gt;&#xA;&lt;p&gt;windows的引导程序是ntloader。&lt;/p&gt;&#xA;&lt;p&gt;DOS和NT是windows系统的内核。&lt;/p&gt;&#xA;&lt;p&gt;BIOS和MBR基本输入输出系统和主引导记录。&lt;/p&gt;&#xA;&lt;p&gt;UEFI和GPT是统一的可扩展接口和GUID分区表。&lt;/p&gt;&#xA;&lt;p&gt;FAT是msdos的文件系统&lt;/p&gt;&#xA;&lt;p&gt;NTFS是msnt的文件系统&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;ad&#34;&gt;AD&lt;/h1&gt;&#xA;&lt;p&gt;AD: Active Directory&lt;/p&gt;&#xA;&lt;p&gt;管理工具：LDAPSoft AD Browser&lt;/p&gt;</description>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://canuxcheng.com/post/python_devops/</link>
      <pubDate>Sun, 03 Apr 2016 10:49:21 +0000</pubDate>
      <guid>https://canuxcheng.com/post/python_devops/</guid>
      <description>&lt;h1 id=&#34;python&#34;&gt;Python&lt;/h1&gt;&#xA;&lt;p&gt;python2的最后一个版本是python2.7, 2020年停止更新.&lt;/p&gt;&#xA;&lt;p&gt;Windows安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Python2.7.9之后的版本直接下载msi安装即可．&#xA;选择自动设置PATH，默认安装pip和setuptools.&#xA;可以使用IDLE或python命令行或cmd执行python命令&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Linux安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$sudo apt-get install python&#xA;$sudo yum install python&#xA;&#xA;$sudo apt-get install python-dev&#xA;$sudo apt-get install python3-dev&#xA;$sudo yum install python-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;标准库的路径：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;C:\Python*\Lib&#xA;/usr/lib/python*/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;python的IDE：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Windows: IDLE&lt;/li&gt;&#xA;&lt;li&gt;Linux: Vim&lt;/li&gt;&#xA;&lt;li&gt;Pycharm/VS&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;python命令&#34;&gt;python命令&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ python/ipython     # 进入python解释器&#xA;&amp;gt;&amp;gt;&amp;gt;exit()/Ctrl+d     # 退出python解释器&#xA;&amp;gt;&amp;gt;&amp;gt;help()            # 进入help工具&#xA;help&amp;gt;quit            # 退出help工具&#xA;$ pydoc --help        # 文档工具&#xA;&#xA;# -c　cmd, __name__ != &#39;__main__&#39;&#xA;$ python -c &#39;import module/package; expressions&#39;&#xA;# -m mod, __name__ == &#39;__main__&#39;&#xA;$ python -m &#39;module/package&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;python的可用接口&#34;&gt;python的可用接口&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;python内置常量，函数，类和异常．&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git</title>
      <link>https://canuxcheng.com/post/devops_git/</link>
      <pubDate>Sat, 02 Apr 2016 21:11:33 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops_git/</guid>
      <description>&lt;h1 id=&#34;git&#34;&gt;Git&lt;/h1&gt;&#xA;&lt;p&gt;GIT: 分布式版本控制系统。&lt;/p&gt;&#xA;&lt;p&gt;SVN: subversion并发式版本控制系统。&lt;/p&gt;&#xA;&lt;p&gt;Mercurial: hg分布式版本控制。&lt;/p&gt;&#xA;&lt;p&gt;和git相关的产品：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;github&lt;/li&gt;&#xA;&lt;li&gt;bitbucket&lt;/li&gt;&#xA;&lt;li&gt;sourceForge&lt;/li&gt;&#xA;&lt;li&gt;gitlab&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Git安装：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install git&#xA;$ yum install git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;git-config-git配置&#34;&gt;git config (Git配置)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;https://git-scm.com/book/zh/v2&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;git配置文件：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;/etc/gitconfig 系统级的配置文件，通过git config &amp;ndash;system设置&lt;/li&gt;&#xA;&lt;li&gt;~/.gitconfig 用户级的配置文件，通过git config &amp;ndash;global设置&lt;/li&gt;&#xA;&lt;li&gt;.git/config 仓库级的配置文件，通过git config &amp;ndash;local设置&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;git配置：&lt;/p&gt;&#xA;&lt;p&gt;使用git config &amp;ndash;global命令配置,或者直接修改~/.gitconfig文件。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 查看帮助&#xA;git help config&#xA;man git-config&#xA;git config --help&#xA;git config -l/--list # 查看所有配置&#xA;git config --system&#xA;git config --global&#xA;git config --local&#xA;git config --global user.name &amp;quot;your_name&amp;quot;&#xA;git config --global user.email &amp;quot;your_email&amp;quot;&#xA;git config --global core.editor vim&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;多配置文件：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vim</title>
      <link>https://canuxcheng.com/post/devops_vim/</link>
      <pubDate>Sat, 02 Apr 2016 21:11:26 +0000</pubDate>
      <guid>https://canuxcheng.com/post/devops_vim/</guid>
      <description>&lt;h1 id=&#34;vim&#34;&gt;vim&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.vim.org&#34;&gt;http://www.vim.org&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vim/vim&#34;&gt;https://github.com/vim/vim&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;类似编辑器:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;emacs&lt;/li&gt;&#xA;&lt;li&gt;Atom(github的开源跨平台编辑器，支持插件。)&lt;/li&gt;&#xA;&lt;li&gt;VSCode(微软的开源跨平台的编辑器，支持插件。)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;vim安装和配置&#34;&gt;Vim安装和配置&lt;/h1&gt;&#xA;&lt;p&gt;查看vim版本和编译信息：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;vim --version&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;安装vim：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install vim&#xA;$ yum install vim&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;源码安装vim：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get build-dep vim&#xA;$ cd vim/src&#xA;&#xA;$ ./configure \&#xA;--with-features=huge \&#xA;--with-compiledby=&amp;quot;Canux&amp;quot; \&#xA;--enable-multibyte \&#xA;--enable-gui=gtk2 \&#xA;--enable-gpm \&#xA;--prefix=/usr \&#xA;--enable-cscope \&#xA;--enable-fontset \&#xA;--enable-xim \&#xA;--enable-fail-if-missing \&#xA;--enable-mzschemeinterp \&#xA;--enable-perlinterp \&#xA;--enable-luainterp \&#xA;--enable-tclinterp\&#xA;--enable-rubyinterp \&#xA;--enable-pythoninterp \&#xA;--with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu \&#xA;--enable-python3interp \&#xA;--with-python3-config-dir=/usr/lib/python3.4/config-3.4m-x86_64-linux-gnu&#xA;&#xA;$ make VIMRUNTIMEDIR=/usr/share/vim/vim74&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;vim相关项目&#34;&gt;Vim相关项目&lt;/h1&gt;&#xA;&lt;h2 id=&#34;neovim&#34;&gt;neovim&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;https://github.com/neovim/neovim&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://canuxcheng.com/post/c_summary/</link>
      <pubDate>Sat, 02 Apr 2016 16:06:14 +0000</pubDate>
      <guid>https://canuxcheng.com/post/c_summary/</guid>
      <description>&lt;h1 id=&#34;c标准&#34;&gt;C标准&lt;/h1&gt;&#xA;&lt;p&gt;ISO C89(ANSI C89) -&amp;gt; ISO C99 -&amp;gt; ISO C11&lt;/p&gt;&#xA;&lt;p&gt;ANSI C 和 ISO C是对通用C语言的接口的定义。&lt;/p&gt;&#xA;&lt;p&gt;符合这种标准的实现为C语言标准库,也叫libc。&lt;/p&gt;&#xA;&lt;p&gt;Unix/Linux的POSIX包含libc。&lt;/p&gt;&#xA;&lt;p&gt;Linux的glibc包含libc及其扩展.&lt;/p&gt;&#xA;&lt;p&gt;Windows的msvcrt包含libc及其扩展.&lt;/p&gt;&#xA;&lt;p&gt;其它和C相关的标准：&lt;/p&gt;&#xA;&lt;p&gt;BSD&lt;/p&gt;&#xA;&lt;p&gt;System V&lt;/p&gt;&#xA;&lt;p&gt;XPG&lt;/p&gt;&#xA;&lt;p&gt;SUS&lt;/p&gt;&#xA;&lt;h1 id=&#34;glibc&#34;&gt;glibc&lt;/h1&gt;&#xA;&lt;p&gt;Linux的标准C库glibc&lt;/p&gt;&#xA;&lt;p&gt;遵循ISO C11 和 POSIX.1-2008, 还包括一些其它标准。&lt;/p&gt;&#xA;&lt;p&gt;关于ISO C 和 POSIX参考另外两篇博文。&lt;/p&gt;&#xA;&lt;h1 id=&#34;msvcrt&#34;&gt;msvcrt&lt;/h1&gt;&#xA;&lt;p&gt;windows的标准c库msvcrt.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;c注释&#34;&gt;C注释&lt;/h1&gt;&#xA;&lt;p&gt;单行注释：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// comment&#xA;&#xA;/* comment */&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;多行注释：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/*&#xA; * comment1&#xA; * commenet2&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;文档&#34;&gt;文档&lt;/h1&gt;&#xA;&lt;p&gt;C程序可以用doxygen从程序中提取文档。&lt;/p&gt;&#xA;&lt;p&gt;文档注释：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * @file&#xA; * @brief&#xA; * @author&#xA; * @date&#xA; * @version&#xA; * @copyright&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;编译和链接&#34;&gt;编译和链接&lt;/h1&gt;&#xA;&lt;p&gt;编译只检查语法错误和函数以及变量是否申明．将*.c源文件编译成*.o目标文件．&lt;/p&gt;</description>
    </item>
    <item>
      <title>Posix</title>
      <link>https://canuxcheng.com/post/c_posix/</link>
      <pubDate>Sat, 02 Apr 2016 11:18:05 +0000</pubDate>
      <guid>https://canuxcheng.com/post/c_posix/</guid>
      <description>&lt;h1 id=&#34;posix标准&#34;&gt;POSIX标准&lt;/h1&gt;&#xA;&lt;p&gt;Portable Operating System Interface&lt;/p&gt;&#xA;&lt;p&gt;可移植性操作系统接口, POSIX兼容ISO C。&lt;/p&gt;&#xA;&lt;p&gt;所有Unix都遵循，几乎所有Linux都遵循，Windows部分支持。&lt;/p&gt;&#xA;&lt;p&gt;POSIX.1/IEEE 1003.1-1990&lt;/p&gt;&#xA;&lt;p&gt;POSIX.2/IEEE Std 1003.2-1992/ISO IEC 9945-2:1993)&lt;/p&gt;&#xA;&lt;p&gt;POSIX.1.b/IEEE Std 1003.1b-1993/ISO IEC 9945-1:1996)&lt;/p&gt;&#xA;&lt;p&gt;POSIX.1.c/IEEE Std 1003.1c-1995&lt;/p&gt;&#xA;&lt;p&gt;POSIX.1.d/IEEE  Std  1003.1c-1999&lt;/p&gt;&#xA;&lt;p&gt;POSIX.1.g/IEEE Std 1003.1g-2000&lt;/p&gt;&#xA;&lt;p&gt;POSIX.1.j/IEEE  Std  1003.1j-2000&lt;/p&gt;&#xA;&lt;p&gt;POSIX.1-2001/SUSv3(包括了所有C99的API)&lt;/p&gt;&#xA;&lt;p&gt;POSIX.1-2008/SUSv4&lt;/p&gt;&#xA;&lt;p&gt;官方网站：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.opengroup.org/austin/&#34;&gt;http://www.opengroup.org/austin/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;cygwin&#34;&gt;Cygwin&lt;/h1&gt;&#xA;&lt;p&gt;提供POSIX的API用于windows上开发Linux/Unix程序。&lt;/p&gt;&#xA;&lt;p&gt;源代码不能在windows运行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cygwin.com/index.html&#34;&gt;https://cygwin.com/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;posix标准定义的必须头文件&#34;&gt;POSIX标准定义的必须头文件&lt;/h1&gt;&#xA;&lt;h2 id=&#34;direnth&#34;&gt;&amp;lt;dirent.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;fcntlh&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;globh&#34;&gt;&amp;lt;glob.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;netdbh&#34;&gt;&amp;lt;netdb.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;pwdh&#34;&gt;&amp;lt;pwd.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;regexh&#34;&gt;&amp;lt;regex.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;tarh&#34;&gt;&amp;lt;tar.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;termiosh&#34;&gt;&amp;lt;termios.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;unistdh&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;utimeh&#34;&gt;&amp;lt;utime.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;utimeh-1&#34;&gt;&amp;lt;utime.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;wordexph&#34;&gt;&amp;lt;wordexp.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;arpaineth&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;netifh&#34;&gt;&amp;lt;net/if.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;netinetinh&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;netinettcph&#34;&gt;&amp;lt;netinet/tcp.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sysmmanh&#34;&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sysselecth&#34;&gt;&amp;lt;sys/select.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;syssocketh&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sysstath&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;systimesh&#34;&gt;&amp;lt;sys/times.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;systypesh&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sysunh&#34;&gt;&amp;lt;sys/un.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sysutsnameh&#34;&gt;&amp;lt;sys/utsname.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;waith&#34;&gt;&amp;lt;wait.h&amp;gt;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;posix标准定义的可选头文件&#34;&gt;POSIX标准定义的可选头文件&lt;/h1&gt;&#xA;&lt;h2 id=&#34;aioh&#34;&gt;&amp;lt;aio.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;pthreadh&#34;&gt;&amp;lt;pthread.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;semaphoreh&#34;&gt;&amp;lt;semaphore.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;mqueueh&#34;&gt;&amp;lt;mqueue.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;schedh&#34;&gt;&amp;lt;sched.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;spawnh&#34;&gt;&amp;lt;spawn.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;stropsh&#34;&gt;&amp;lt;strops.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;traceh&#34;&gt;&amp;lt;trace.h&amp;gt;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;posix标准定义的xsi扩展头文件&#34;&gt;POSIX标准定义的XSI扩展头文件&lt;/h1&gt;&#xA;&lt;h2 id=&#34;sysipch&#34;&gt;&amp;lt;sys/ipc.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sysmsgh&#34;&gt;&amp;lt;sys/msg.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;syssemh&#34;&gt;&amp;lt;sys/sem.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sysshmh&#34;&gt;&amp;lt;sys/shm.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cpioh&#34;&gt;&amp;lt;cpio.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;dlfcnh&#34;&gt;&amp;lt;dlfcn.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;fmtmsgh&#34;&gt;&amp;lt;fmtmsg.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ftwh&#34;&gt;&amp;lt;ftw.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;iconvh&#34;&gt;&amp;lt;iconv.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;langinfoh&#34;&gt;&amp;lt;langinfo.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;libgenh&#34;&gt;&amp;lt;libgen.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;monetaryh&#34;&gt;&amp;lt;monetary.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ndbmh&#34;&gt;&amp;lt;ndbm.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;nl_typesh&#34;&gt;&amp;lt;nl_types.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;pollh&#34;&gt;&amp;lt;poll.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;searchh&#34;&gt;&amp;lt;search.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;stringsh&#34;&gt;&amp;lt;strings.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;syslogh&#34;&gt;&amp;lt;syslog.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ucontexth&#34;&gt;&amp;lt;ucontext.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ulimith&#34;&gt;&amp;lt;ulimit.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;utmpxh&#34;&gt;&amp;lt;utmpx.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sysresourceh&#34;&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sysstatvfsh&#34;&gt;&amp;lt;sys/statvfs.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;systimeh&#34;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;systimebh&#34;&gt;&amp;lt;sys/timeb.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sysuioh&#34;&gt;&amp;lt;sys/uio.h&amp;gt;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Regular Expression</title>
      <link>https://canuxcheng.com/post/regularexpression/</link>
      <pubDate>Sat, 02 Apr 2016 11:16:16 +0000</pubDate>
      <guid>https://canuxcheng.com/post/regularexpression/</guid>
      <description>&lt;h1 id=&#34;re&#34;&gt;RE&lt;/h1&gt;&#xA;&lt;p&gt;在线检测：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.regexpal.com/&#34;&gt;https://www.regexpal.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;RE分为BRE(basic RE), ERE(extended RE), SRE(simpla RE).&lt;/p&gt;&#xA;&lt;p&gt;在BRE中+?(){}|没有特殊含义，除非用\转义．&lt;/p&gt;&#xA;&lt;p&gt;在ERE中+?(){}被保留有特殊含义，除非用\转义才表示普通字符．&lt;/p&gt;&#xA;&lt;p&gt;命令find, grep, sed, awk等都可以使用正则表达式．&lt;/p&gt;&#xA;&lt;p&gt;特殊字符含义：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;()      对正则表达式分组, ERE&#xA;\n      再匹配前面的分组n次&#xA;&#xA;.       匹配任意单个字符, 换行符除外&#xA;^tux    匹配以tux开始的行&#xA;tux$    匹配以tux结束的行&#xA;&#xA;*+?{}特殊字符是贪婪匹配模式,也就是尽可能多的匹配&#xA;*           匹配前面一个字符0次或多次，包括前面这个字符本身&#xA;+           匹配前面一个字符1次或多次，包括前面这个字符, ERE&#xA;?           匹配前面一个字符0次或1次，包括前面这个字符, ERE&#xA;{n}         匹配前面一个字符n次，包括前面这个字符, ERE&#xA;{min,}      匹配前面一个字符至少min次，包括前面这个字符, ERE&#xA;{min,max}   匹配前面一个字符至少min次，最多max次，包括前面这个字符, ERE&#xA;&#xA;下面是非贪婪匹配模式&#xA;*?    匹配0个或多个&#xA;+?    匹配1个或多个&#xA;??    匹配０个或１个&#xA;{n}?        只匹配n个&#xA;{min,}?     至少min个&#xA;{min,max}?  至少min个，最多max个&#xA;&#xA;[abc]   匹配包含在[]中的任意一个字符，除了\, ^, -三个特殊字符&#xA;[^abc]  匹配不包含在[]中的任意一个字符(和上面相反)&#xA;[a-z]   匹配[]中指定范围内的任意一个字符&#xA;[abc\?] 用＼转义[]中的特殊字符&#xA;&#xA;|       表示逻辑或, ERE&#xA;&#xA;\       转义字符，将特殊字符转义成普通字符&#xA;&#xA;小括号表示分组&#xA;(...)&#xA;(?...)&#xA;(?iLmsux)&#xA;(?:...)&#xA;(?P&amp;lt;name&amp;gt;...)&#xA;(?P=name)&#xA;(?#...)&#xA;(?=...)&#xA;(?!...)&#xA;(?&amp;lt;=...)&#xA;(?&amp;lt;!...)&#xA;(?(id/name)yes-pattern|no-pattern)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;匹配前面一个字符０次，包括前面这个字符，也就是说０次表示不匹配前面这个字符．&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sed</title>
      <link>https://canuxcheng.com/post/shell_sed/</link>
      <pubDate>Sat, 02 Apr 2016 11:15:57 +0000</pubDate>
      <guid>https://canuxcheng.com/post/shell_sed/</guid>
      <description>&lt;h1 id=&#34;sed&#34;&gt;sed&lt;/h1&gt;&#xA;&lt;p&gt;sed：stream editor  流编辑器 ，主要用于文本处理。&lt;/p&gt;&#xA;&lt;p&gt;sed命令格式：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sed   -options   ’expression1;expression2’     file           执行多个命令&#xA;sed   -options   [-e ‘expression1’] [-e ‘expression2’]  file  执行多个命令&#xA;sed   -options   [-f   scriptfile]   file                     通过脚本执行命令&#xA;sed   -options   [-f   scriptfile]   file  &amp;gt;  newfile  #sed修改后重定向到新文件。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;sed指令需要用单引号包围。使用双引号“”可以传递变量。&#xA;Sed默认并没有修改文件file中的数据。&#xA;sed默认在stdout输出文件的所有行。&#xA;Sed地址需要使用/address/来包围。&#xA;sed使用正则表达式可以用\BRE\包围，如果模式包含/，那么可以使用除了换行符之外的所有字符包围。&lt;/p&gt;&#xA;&lt;p&gt;options：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;-e：指定多个命令或脚本&#xA;-f：指定执行命令的脚本&#xA;-n：阻止自动输出，p可以打印匹配的行。&#xA;-i: 直接修改读入的文件的内容.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;experssion：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;expression：指令由模式和过程组成。&#xA;[address]/[line-address][!]command[arguments]&#xA;[address]表示地址，一般用模式进行寻址，address缺省表示整个文件寻址，两个地址用，隔开。&#xA;[line-address]表示只能是一个地址。&#xA;[!] 表示不匹配该地址的所有行&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Command:&lt;/p&gt;&#xA;&lt;p&gt;sed有25个命令。&lt;/p&gt;&#xA;&lt;p&gt;使用大括号{}在一个地址中做嵌套操作：例如：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/address1/,/address2/{&#xA;    /^$/d&#xA;    s/string1/string2/&#xA;    …&#xA;}             // 单独一行，后面不能有空格&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;s命令：替换，替换模式空间中的行。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sed &#39;[address]s/oldpattern/newpattern/[flag]&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;flag:&lt;/p&gt;</description>
    </item>
    <item>
      <title>ISO</title>
      <link>https://canuxcheng.com/post/c_iso/</link>
      <pubDate>Fri, 01 Apr 2016 21:54:16 +0000</pubDate>
      <guid>https://canuxcheng.com/post/c_iso/</guid>
      <description>&lt;h1 id=&#34;c标准库&#34;&gt;C标准库&lt;/h1&gt;&#xA;&lt;p&gt;ISO C89(ANSI C89) -&amp;gt; ISO C95 -&amp;gt; ISO C99 -&amp;gt;&lt;/p&gt;&#xA;&lt;p&gt;-&amp;gt; ISO C11 -&amp;gt; ISO C17 -&amp;gt; ISO C23&lt;/p&gt;&#xA;&lt;p&gt;ANSI C 和 ISO C是对通用C语言的接口的定义。&lt;/p&gt;&#xA;&lt;p&gt;符合这种标准的实现为C语言标准库,也叫libc。&lt;/p&gt;&#xA;&lt;p&gt;官方网站：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg14/www/standards&#34;&gt;http://www.open-std.org/jtc1/sc22/wg14/www/standards&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;c89和c99支持的头文件和函数&#34;&gt;C89和C99支持的头文件和函数&lt;/h1&gt;&#xA;&lt;h2 id=&#34;asserth&#34;&gt;&amp;lt;assert.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;ctypeh&#34;&gt;&amp;lt;ctype.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;complexh&#34;&gt;&amp;lt;complex.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;errnoh&#34;&gt;&amp;lt;errno.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;floath&#34;&gt;&amp;lt;float.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;fenvh&#34;&gt;&amp;lt;fenv.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;inttypeh&#34;&gt;&amp;lt;inttype.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;iso646h&#34;&gt;&amp;lt;iso646.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;limitsh&#34;&gt;&amp;lt;limits.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;localeh&#34;&gt;&amp;lt;locale.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;mathh&#34;&gt;&amp;lt;math.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;setjmph&#34;&gt;&amp;lt;setjmp.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;signalh&#34;&gt;&amp;lt;signal.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;stdargh&#34;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;stddefh&#34;&gt;&amp;lt;stddef.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;stdioh&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;stdlibh&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;stringh&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;stdboolh&#34;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;stdinth&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;timeh&#34;&gt;&amp;lt;time.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;tgmathh&#34;&gt;&amp;lt;tgmath.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;wcharh&#34;&gt;&amp;lt;wchar.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;wctypeh&#34;&gt;&amp;lt;wctype.h&amp;gt;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;c11支持的头文件和函数&#34;&gt;C11支持的头文件和函数&lt;/h1&gt;&#xA;&lt;h2 id=&#34;stdalignh&#34;&gt;&amp;lt;stdalign.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;stdatomich&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;threadsh&#34;&gt;&amp;lt;threads.h&amp;gt;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;c标准&#34;&gt;C++标准&lt;/h1&gt;&#xA;&lt;p&gt;C++98, C++11, C++14, C++17, C++20, C++23&lt;/p&gt;&#xA;&lt;p&gt;c++ 头文件不带.h用来和C区分。&lt;/p&gt;&#xA;&lt;h2 id=&#34;核心功能&#34;&gt;核心功能&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh.cppreference.com/w/cpp/language&#34;&gt;https://zh.cppreference.com/w/cpp/language&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;标准库&#34;&gt;标准库&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh.cppreference.com/w/cpp/standard_library&#34;&gt;https://zh.cppreference.com/w/cpp/standard_library&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shell</title>
      <link>https://canuxcheng.com/post/shell/</link>
      <pubDate>Fri, 01 Apr 2016 20:42:59 +0000</pubDate>
      <guid>https://canuxcheng.com/post/shell/</guid>
      <description>&lt;h1 id=&#34;shell&#34;&gt;Shell&lt;/h1&gt;&#xA;&lt;p&gt;Linux的shell有很多种,大多数linux发行版的默认登录shell是BASH。&lt;/p&gt;&#xA;&lt;p&gt;查看当前使用的shell：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;echo $SHELL&#xA;echo $0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看安装了哪些shell：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;cat /etc/shells&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;设置登陆shell:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$chsh -s $(which shellname)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;shell分为登陆shell和交互式shell:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 输出有i的就是交互shell&#xA;$echo $-&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;非交互登陆shell:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;先运行系统配置文件/etc/profile(调用/etc/bash.bashrc和/etc/profile.d/*.sh)&lt;/li&gt;&#xA;&lt;li&gt;然后运行用户配置文件~/.profile(调用~/.bashrc和~/bin)&lt;/li&gt;&#xA;&lt;li&gt;最后退出用户登陆~/.bash_logout&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;交互非登陆shell:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;先运行/etc/bash.bashrc(调用/etc/bash_completion(调用/etc/bash_completion.d/*.sh))&lt;/li&gt;&#xA;&lt;li&gt;然后运行~/.bashrc(调用~/.bash_aliases和~/bash.d和~/bin)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;shell相关项目&#34;&gt;shell相关项目&lt;/h1&gt;&#xA;&lt;h2 id=&#34;bash-it&#34;&gt;bash-it&lt;/h2&gt;&#xA;&lt;p&gt;大部分发行版默认使用bash,无需额外安装。&lt;/p&gt;&#xA;&lt;p&gt;bash的优化项目bash-it：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Bash-it/bash-it&#34;&gt;https://github.com/Bash-it/bash-it&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;zsh&#34;&gt;zsh&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.zsh.org/&#34;&gt;http://www.zsh.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;oh-my-zsh&#34;&gt;oh-my-zsh&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;https://github.com/robbyrussell/oh-my-zsh&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;fish-shell&#34;&gt;fish-shell&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fish-shell/fish-shell&#34;&gt;https://github.com/fish-shell/fish-shell&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;oh-my-fish&#34;&gt;oh-my-fish&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oh-my-fish/oh-my-fish&#34;&gt;https://github.com/oh-my-fish/oh-my-fish&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;thefuck&#34;&gt;thefuck&lt;/h2&gt;&#xA;&lt;p&gt;一个纠正shell命令输错的命令&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvbn/thefuck&#34;&gt;https://github.com/nvbn/thefuck&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;shellcheck&#34;&gt;shellcheck&lt;/h2&gt;&#xA;&lt;p&gt;一个debug脚本的工具．&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;https://github.com/koalaman/shellcheck&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;shell-script&#34;&gt;shell script&lt;/h1&gt;&#xA;&lt;p&gt;基本语法&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash&#xA;&#xA;command1 &amp;amp;&amp;amp; command2    # 当command1执行成功（返回0)才会执行command2&#xA;command1 || command2    # 当command1执行失败（返回非0)才会执行command2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;shell注释&#34;&gt;shell注释&lt;/h2&gt;&#xA;&lt;p&gt;单行注释：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# comment&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;多行注释：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Coreutils</title>
      <link>https://canuxcheng.com/post/shell_coreutils/</link>
      <pubDate>Thu, 31 Mar 2016 21:51:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/shell_coreutils/</guid>
      <description>&lt;h1 id=&#34;linux的外部命令&#34;&gt;Linux的外部命令&lt;/h1&gt;&#xA;&lt;p&gt;Linux外部命令的项目是coreutils。&lt;/p&gt;&#xA;&lt;p&gt;外部命令在coreutils目录中&lt;/p&gt;&#xA;&lt;p&gt;查看外部命令所在目录：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;echo $PATH&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;外部命令在下列目录中：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;~/bin # 用户自定义&#xA;&#xA;/sbin&#xA;&#xA;/bin&#xA;&#xA;/usr/sbin&#xA;&#xA;/usr/bin&#xA;&#xA;/usr/local/sbin&#xA;&#xA;/usr/local/bin&#xA;&#xA;/usr/games&#xA;&#xA;/usr/local/games&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看外部命令手册的在线手册：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;man [command]&#xA;info [command]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;自定义外部命令：&lt;/p&gt;&#xA;&lt;p&gt;添加$PATH变量，然后放到该目录。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;系统管理&#34;&gt;系统管理&lt;/h1&gt;&#xA;&lt;p&gt;cpu/mem/load&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 查看cpu/mem/swap/system信息&#xA;vmstat&#xA;vmstat 1&#xA;&#xA;# 查看进程消耗的cpu/mem/swap/system等系统信息&#xA;top&#xA;top -H  # 查看线程&#xA;%cpu = cputime/realtime * 100%&#xA;cpu_usage = %cpu/cpu-number&#xA;%mem = RES/physicalMem * 100%&#xA;&#xA;htop&#xA;$ sudo apt-get install htop&#xA;&#xA;$ sudo apt-get install sysstat (包括pidstat)&#xA;pidstat -u -p pid // cpu&#xA;pidstat -r -p pid //mem&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;cpu/load:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Utils</title>
      <link>https://canuxcheng.com/post/shell_utils/</link>
      <pubDate>Thu, 31 Mar 2016 21:51:25 +0000</pubDate>
      <guid>https://canuxcheng.com/post/shell_utils/</guid>
      <description>&lt;h1 id=&#34;linux的第三方命令&#34;&gt;Linux的第三方命令&lt;/h1&gt;&#xA;&lt;p&gt;Linux外部命令的项目是coreutils.&lt;/p&gt;&#xA;&lt;p&gt;外部命令在coreutils目录中.&lt;/p&gt;&#xA;&lt;p&gt;第三方命令(相当于外部命令)．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;文件和目录管理&#34;&gt;文件和目录管理&lt;/h1&gt;&#xA;&lt;p&gt;autojump:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wting/autojump&#34;&gt;https://github.com/wting/autojump&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;fasd:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/clvv/fasd&#34;&gt;https://github.com/clvv/fasd&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;fzf:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;https://github.com/junegunn/fzf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;压缩备份&#34;&gt;压缩备份&lt;/h1&gt;&#xA;&lt;h1 id=&#34;磁盘管理&#34;&gt;磁盘管理&lt;/h1&gt;&#xA;&lt;h1 id=&#34;设备管理&#34;&gt;设备管理&lt;/h1&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Builtins</title>
      <link>https://canuxcheng.com/post/shell_builtins/</link>
      <pubDate>Thu, 31 Mar 2016 21:51:03 +0000</pubDate>
      <guid>https://canuxcheng.com/post/shell_builtins/</guid>
      <description>&lt;h1 id=&#34;linux内置命令&#34;&gt;Linux内置命令&lt;/h1&gt;&#xA;&lt;p&gt;内置命令在bash/builtins目录中&lt;/p&gt;&#xA;&lt;p&gt;shell命令分为内置命令和外部命令.&lt;/p&gt;&#xA;&lt;p&gt;查看一个命令是内置命令还是外部命令：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type -a [command]&#xA;&#xA;提示&amp;quot;[command] is a shell builtin&amp;quot;就表示是内置命令，否则就是外部命令。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看所有内置命令：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;help&#xA;enable -a&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看内置命令的帮助：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;help [command]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;pre&gt;&lt;code&gt;type&#xA;enable&#xA;help&#xA;&#xA;caller&#xA;alias&#xA;bg&#xA;bind&#xA;break&#xA;builtin&#xA;command&#xA;compgen&#xA;complete&#xA;compopt&#xA;continue&#xA;declare&#xA;disown&#xA;let&#xA;local&#xA;logout&#xA;mapfile&#xA;popd&#xA;printf&#xA;pushd&#xA;read&#xA;readarray&#xA;readonly&#xA;return&#xA;shift&#xA;shopt&#xA;source&#xA;suspend&#xA;times&#xA;trap&#xA;true&#xA;typeset&#xA;ulimit&#xA;umask&#xA;unalias&#xA;unset&#xA;wait&#xA;eval&#xA;exec&#xA;exit&#xA;export&#xA;false&#xA;fc&#xA;fg&#xA;getopts&#xA;hash&#xA;history&#xA;jobs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;路径相关:&lt;/p&gt;</description>
    </item>
    <item>
      <title>FileSystem</title>
      <link>https://canuxcheng.com/post/linux_filesystem/</link>
      <pubDate>Thu, 31 Mar 2016 21:48:59 +0000</pubDate>
      <guid>https://canuxcheng.com/post/linux_filesystem/</guid>
      <description>&lt;h1 id=&#34;vfs&#34;&gt;VFS&lt;/h1&gt;&#xA;&lt;p&gt;Linux采用虚拟文件系统，支持多个文件系统协议．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;extext2ext3ext4&#34;&gt;ext/ext2/ext3/ext4&lt;/h1&gt;&#xA;&lt;h1 id=&#34;jfs2&#34;&gt;JFS2&lt;/h1&gt;&#xA;&lt;h1 id=&#34;ramfs&#34;&gt;ramfs&lt;/h1&gt;&#xA;&lt;p&gt;linux的VM(虚拟内存)包括ramfs和swap.&lt;/p&gt;&#xA;&lt;p&gt;对内存的支持&lt;/p&gt;&#xA;&lt;h1 id=&#34;swap&#34;&gt;swap&lt;/h1&gt;&#xA;&lt;p&gt;交换分区，当内存不足，会把内存上暂时不运行的程序保存到swap，获取部分内存空间运行．&lt;/p&gt;&#xA;&lt;h1 id=&#34;tmpfs&#34;&gt;tmpfs&lt;/h1&gt;&#xA;&lt;p&gt;临时文件系统, 优先使用ramfs,　其次使用swap.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 挂载tmpfs&#xA;mount -t tmpfs -o size=1024m tmpfs /path/to/mount&#xA;# /etc/fstab　&#xA;tmpfs /dev/shm tmpfs,defaults,size=512m 0 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;vfatfatntfs&#34;&gt;vfat/fat/ntfs&lt;/h1&gt;&#xA;&lt;p&gt;windows文件系统&lt;/p&gt;&#xA;&lt;h1 id=&#34;cifssmbfs&#34;&gt;cifs/smbfs&lt;/h1&gt;&#xA;&lt;h1 id=&#34;nfs&#34;&gt;nfs&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Firewall</title>
      <link>https://canuxcheng.com/post/linux_firewall/</link>
      <pubDate>Thu, 31 Mar 2016 21:48:59 +0000</pubDate>
      <guid>https://canuxcheng.com/post/linux_firewall/</guid>
      <description>&lt;h1 id=&#34;firewall&#34;&gt;Firewall&lt;/h1&gt;&#xA;&lt;p&gt;UFW: linux防火墙配置工具，底层还是调用iptables.&lt;/p&gt;&#xA;&lt;p&gt;filewall: centos的防火墙命令, 底层还是调用iptables.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;selinux&#34;&gt;SELinux&lt;/h1&gt;&#xA;&lt;p&gt;Security-Enhanced-Linux&lt;/p&gt;&#xA;&lt;p&gt;本地安全&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;netfilter&#34;&gt;Netfilter&lt;/h1&gt;&#xA;&lt;p&gt;网络安全&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;iptables&#34;&gt;iptables&lt;/h1&gt;&#xA;&lt;p&gt;通过iptables操作Netfilter实现应用层安全.&lt;/p&gt;&#xA;&lt;p&gt;table:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;filter 默认表&#xA;nat&#xA;mangle&#xA;raw&#xA;security&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;filter&#34;&gt;filter&lt;/h2&gt;&#xA;&lt;p&gt;chain:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;INPUT&#xA;FORWARD&#xA;OUTPUT&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;nat&#34;&gt;nat&lt;/h2&gt;&#xA;&lt;p&gt;chain:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;INPUT&#xA;OUTPUT&#xA;PREROUTING&#xA;POSTROUTING&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;postrouting:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;snat: 内网主机访问外网经过路由时，源ip会发生变化。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;prerouting:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;dnat:  外网访问内网经过路由时，目的ip会发生变化。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;iptables命令&#34;&gt;iptables命令&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;-L/--list  [chain [ rulenum]]&#xA;-S/--list-rules [chain [rulenum]]&#xA;-Z/--zero [chain [rulenum]]&#xA;&#xA;-A/--append chain&#xA;-C/--check chain&#xA;-N/--new chain&#xA;&#xA;-F/--flush [chain] // 删除chain中的rules.&#xA;-X/--delete-chain [chain] // 删除自定义chain.&#xA;&#xA;-R/--replace chain rulenum&#xA;-D/--delete chain [rulenum]&#xA;-I/--insert chain [rulenum]&#xA;&#xA;-P/--policy chain target&#xA;&#xA;-E/--rename-chain old-chain new-chain&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;tables:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grub</title>
      <link>https://canuxcheng.com/post/linux_grub/</link>
      <pubDate>Thu, 31 Mar 2016 21:48:59 +0000</pubDate>
      <guid>https://canuxcheng.com/post/linux_grub/</guid>
      <description>&lt;h1 id=&#34;grub&#34;&gt;Grub&lt;/h1&gt;&#xA;&lt;p&gt;引导程序。&lt;/p&gt;&#xA;&lt;p&gt;linux/unix的引导程序有lilo和grub。&lt;/p&gt;&#xA;&lt;h1 id=&#34;配置&#34;&gt;配置&lt;/h1&gt;&#xA;&lt;p&gt;修改grub:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo vim /boot/grub/grub.cfg&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Linux</title>
      <link>https://canuxcheng.com/post/linux/</link>
      <pubDate>Thu, 31 Mar 2016 21:48:59 +0000</pubDate>
      <guid>https://canuxcheng.com/post/linux/</guid>
      <description>&lt;h1 id=&#34;linux&#34;&gt;Linux&lt;/h1&gt;&#xA;&lt;p&gt;Linux严格讲指的是Linux这一类操作系统的内核。&lt;/p&gt;&#xA;&lt;p&gt;Linux内核的github：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/torvalds/linux&#34;&gt;https://github.com/torvalds/linux&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Linux内核的站点：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/&#34;&gt;https://www.kernel.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;商业化的linux系统：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;redhat enterprise linux&lt;/li&gt;&#xA;&lt;li&gt;suse enterprise linux&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;免费的服务器版本：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;centos (rhel的免费版服务器版)&lt;/li&gt;&#xA;&lt;li&gt;open suse&lt;/li&gt;&#xA;&lt;li&gt;debian/ubuntu&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;免费的桌面版本：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;fedora (原来的redhat desktop linux)&lt;/li&gt;&#xA;&lt;li&gt;open suse&lt;/li&gt;&#xA;&lt;li&gt;debian/ubuntu&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;linux桌面环境&#34;&gt;Linux桌面环境&lt;/h1&gt;&#xA;&lt;p&gt;X windows&lt;/p&gt;&#xA;&lt;p&gt;KDE&lt;/p&gt;&#xA;&lt;p&gt;GNOME2(Mate)&lt;/p&gt;&#xA;&lt;p&gt;GNOME3(Mate/Cinnamon)&lt;/p&gt;&#xA;&lt;p&gt;Unity&lt;/p&gt;&#xA;&lt;p&gt;xface&lt;/p&gt;&#xA;&lt;p&gt;lxde&lt;/p&gt;&#xA;&lt;p&gt;enlightenment(&lt;a href=&#34;https://www.enlightenment.org/start&#34;&gt;https://www.enlightenment.org/start&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;h1 id=&#34;linux桌面管理器&#34;&gt;Linux桌面管理器：&lt;/h1&gt;&#xA;&lt;p&gt;xDM&lt;/p&gt;&#xA;&lt;p&gt;gDM(gnome)&lt;/p&gt;&#xA;&lt;p&gt;kDM(kde)&lt;/p&gt;&#xA;&lt;p&gt;lightDM&lt;/p&gt;&#xA;&lt;h1 id=&#34;linux编程&#34;&gt;Linux编程&lt;/h1&gt;&#xA;&lt;h2 id=&#34;linux程序调用结构&#34;&gt;Linux程序调用结构：&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;应用程序(包括shell外部命令)/Shell命令(也就是shell内部命令)&lt;/li&gt;&#xA;&lt;li&gt;C标准库glibc(包括ISO C和POSIC封装的系统系统调用)&lt;/li&gt;&#xA;&lt;li&gt;Linux系统调用&lt;/li&gt;&#xA;&lt;li&gt;Linux内核&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;查看手册&#34;&gt;查看手册：&lt;/h2&gt;&#xA;&lt;p&gt;查看man帮助:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ man man&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;手册章节:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Executable programs or shell commands&lt;/li&gt;&#xA;&lt;li&gt;System calls (functions provided by the kernel)&lt;/li&gt;&#xA;&lt;li&gt;Library calls (functions within program libraries)&lt;/li&gt;&#xA;&lt;li&gt;Special files (usually found in /dev)&lt;/li&gt;&#xA;&lt;li&gt;File formats and conventions eg /etc/passwd&lt;/li&gt;&#xA;&lt;li&gt;Games&lt;/li&gt;&#xA;&lt;li&gt;Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)&lt;/li&gt;&#xA;&lt;li&gt;System administration commands (usually only for root)&lt;/li&gt;&#xA;&lt;li&gt;Kernel routines [Non standard]&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;查看shell命令&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monitoring</title>
      <link>https://canuxcheng.com/post/linux_monitoring/</link>
      <pubDate>Thu, 31 Mar 2016 21:48:59 +0000</pubDate>
      <guid>https://canuxcheng.com/post/linux_monitoring/</guid>
      <description>&lt;h1 id=&#34;inode&#34;&gt;inode&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Markdown</title>
      <link>https://canuxcheng.com/post/markdown/</link>
      <pubDate>Mon, 28 Mar 2016 22:03:15 +0000</pubDate>
      <guid>https://canuxcheng.com/post/markdown/</guid>
      <description>&lt;h1 id=&#34;markdown&#34;&gt;Markdown&lt;/h1&gt;&#xA;&lt;h2 id=&#34;markdown简介&#34;&gt;Markdown简介&lt;/h2&gt;&#xA;&lt;p&gt;Markdown是一种轻量级文本标记语言, Markdown的目标是实现易读易写。&#xA;Markdown和html有很大区别，html是一种发布格式，markdown是一种书写格式。&lt;/p&gt;&#xA;&lt;p&gt;Markdown 中文手册：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/index.html&#34;&gt;http://wowubuntu.com/markdown/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Markdown 英文手册：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax&#34;&gt;http://daringfireball.net/projects/markdown/syntax&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Markdown文件的扩展名是md。&lt;/p&gt;&#xA;&lt;h2 id=&#34;两个需要特殊处理的字符&#34;&gt;两个需要特殊处理的字符&lt;/h2&gt;&#xA;&lt;p&gt;&amp;lt; 的表示方法：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;amp; l t ;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&amp;amp; 的表示方法：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;amp; a m p ;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;区块元素&#34;&gt;区块元素&lt;/h1&gt;&#xA;&lt;h2 id=&#34;段落和换行&#34;&gt;段落和换行&lt;/h2&gt;&#xA;&lt;p&gt;段落前后要有一个或以上的空行（空格或制表符都可以）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;标题&#34;&gt;标题&lt;/h2&gt;&#xA;&lt;p&gt;markdown支持两个语法格式的标题&lt;/p&gt;&#xA;&lt;h3 id=&#34;setext格式&#34;&gt;setext格式&lt;/h3&gt;&#xA;&lt;p&gt;任意个数下等号=表示大标题:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Title&#xA;======&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;任意个数下减号表示副标题：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Subtitle&#xA;--------&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;atx格式&#34;&gt;atx格式&lt;/h3&gt;&#xA;&lt;p&gt;一到六个#表示一到六阶标题,#后面有空格&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 一阶标题&#xA;&#xA;## 二阶标题&#xA;&#xA;### 三阶标题&#xA;&#xA;#### 四阶标题&#xA;&#xA;##### 五阶标题&#xA;&#xA;###### 六阶标题&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;区块引用&#34;&gt;区块引用&lt;/h2&gt;&#xA;&lt;p&gt;使用&amp;gt;表示单层区块引用：&lt;/p&gt;&#xA;&lt;p&gt;&amp;gt; block&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;block&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;使用多个&amp;gt;嵌套使用：&lt;/p&gt;&#xA;&lt;p&gt;&amp;gt;&amp;gt; block&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;block&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;区块内也可以用标题，列表和代码区块等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;列表&#34;&gt;列表&lt;/h2&gt;&#xA;&lt;h3 id=&#34;无序列表&#34;&gt;无序列表&lt;/h3&gt;&#xA;&lt;p&gt;无序列表使用星号、加号或是减号作为列表标记,符号和字符之间有空格：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nagios</title>
      <link>https://canuxcheng.com/post/metrics_nagios/</link>
      <pubDate>Fri, 25 Mar 2016 11:15:48 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics_nagios/</guid>
      <description>&lt;h1 id=&#34;nagios&#34;&gt;Nagios&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Nagios is the industry standard in IT infrastructure monitoring&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Nagios offers complete monitoring and alerting for servers, switches, applications, and services.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Nagios官方宣称nagios是IT基础监控的工业标准。&lt;/p&gt;&#xA;&lt;p&gt;Nagios提供对服务器，交换机，应用和服务的完整的监控和警报。&lt;/p&gt;&#xA;&lt;p&gt;Nagios是无agent的，nagios的plugin通过协议远程获取信息。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.nagios.org/&#34;&gt;https://www.nagios.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.nagios.com/&#34;&gt;https://www.nagios.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://exchange.nagios.org/&#34;&gt;https://exchange.nagios.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NagiosEnterprises&#34;&gt;https://github.com/NagiosEnterprises&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nagios-plugins&#34;&gt;https://github.com/nagios-plugins&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;nagios安装配置&#34;&gt;Nagios安装配置&lt;/h1&gt;&#xA;&lt;h2 id=&#34;nagios发展&#34;&gt;Nagios发展&lt;/h2&gt;&#xA;&lt;p&gt;Nagios core 1.0&lt;/p&gt;&#xA;&lt;p&gt;Nagios core 2.0&lt;/p&gt;&#xA;&lt;p&gt;Nagios core 3.0&lt;/p&gt;&#xA;&lt;p&gt;Nagios XI&lt;/p&gt;&#xA;&lt;p&gt;Nagios core 4.0&lt;/p&gt;&#xA;&lt;p&gt;目前nagios有两大阵营：&lt;/p&gt;&#xA;&lt;p&gt;开源解决方案： Nagios core&lt;/p&gt;&#xA;&lt;p&gt;商业解决方案： Nagios XI&lt;/p&gt;&#xA;&lt;h2 id=&#34;nagios安装配置-1&#34;&gt;Nagios安装配置&lt;/h2&gt;&#xA;&lt;p&gt;安装和配置nagios core,plugins,addons参考&lt;/p&gt;&#xA;&lt;p&gt;官方文档:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/4/en/toc.html&#34;&gt;https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/4/en/toc.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;中文文档：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://nagios-cn.sourceforge.net/nagios-cn/index.html&#34;&gt;http://nagios-cn.sourceforge.net/nagios-cn/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;nagios开源解决方案&#34;&gt;Nagios开源解决方案&lt;/h1&gt;&#xA;&lt;h2 id=&#34;nagios-core&#34;&gt;Nagios core:&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Nagios Core is the monitoring and alerting engine that serves as the primary application around which hundreds of Nagios projects are built.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zabbix</title>
      <link>https://canuxcheng.com/post/metrics_zabbix/</link>
      <pubDate>Fri, 25 Mar 2016 11:15:48 +0000</pubDate>
      <guid>https://canuxcheng.com/post/metrics_zabbix/</guid>
      <description>&lt;h1 id=&#34;zabbix&#34;&gt;Zabbix&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Hexo</title>
      <link>https://canuxcheng.com/post/hexo/</link>
      <pubDate>Tue, 22 Mar 2016 12:59:10 +0000</pubDate>
      <guid>https://canuxcheng.com/post/hexo/</guid>
      <description>&lt;h1 id=&#34;hexo&#34;&gt;Hexo&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什么是hexo&#34;&gt;什么是hexo&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Hexo是用nodejs开发的快速、简洁且高效的博客框架，&#xA;Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;hexo有大量的插件和主题。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hexo.io/plugins/&#34;&gt;plugins&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hexo.io/themes/&#34;&gt;themes&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装hexo&#34;&gt;安装hexo&lt;/h2&gt;&#xA;&lt;p&gt;需要安装依赖nodejs(包括npm)和git。&lt;/p&gt;&#xA;&lt;p&gt;安装hexo命令行插件hexo-cli：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$sudo npm install hexo-cli -g&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Next是一种文雅的Hexo主题。&#xA;一个主题，三种外观，选您所好。&#xA;通过主题中的主题（亦称Scheme），您可以方便地改变您博客的外观，同时几乎所有配置同样适用。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iissnan/hexo-theme-next&#34;&gt;原生的Next&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/crazy-canux/hexo-theme-next&#34;&gt;作者的Next&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;快速使用&#34;&gt;快速使用&lt;/h1&gt;&#xA;&lt;h2 id=&#34;初始化&#34;&gt;初始化&lt;/h2&gt;&#xA;&lt;p&gt;初始化一个hexo的目录：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$hexo init &amp;lt;folder&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;安装依赖&#34;&gt;安装依赖&lt;/h2&gt;&#xA;&lt;p&gt;进入hexo目录安装依赖：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$cd &amp;lt;folder&amp;gt;&#xA;$sudo npm install &amp;lt;package-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;默认安装下列依赖：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;hexo&#xA;hexo-server&#xA;hexo-generator-index&#xA;hexo-generator-archive&#xA;hexo-generator-category&#xA;hexo-generator-tag&#xA;hexo-renderer-ejs&#xA;hexo-renderer-marked&#xA;hexo-renderer-stylus&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;查看文件和目录&#34;&gt;查看文件和目录&lt;/h2&gt;&#xA;&lt;p&gt;安装完成后有下列&lt;/p&gt;&#xA;&lt;p&gt;文件：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;_config.yml&#xA;db.json&#xA;package.json&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;目录：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;node_modules&#xA;scaffolds&#xA;source&#xA;themes&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;生成静态文件&#34;&gt;生成静态文件&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;$hexo g&#xA;$hexo generate&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;启动本地服务器&#34;&gt;启动本地服务器&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;$hexo s&#xA;$hexo server&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;用浏览器打开链接即可本地查看默认博客。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo</title>
      <link>https://canuxcheng.com/post/hugo/</link>
      <pubDate>Mon, 01 Apr 2013 12:49:49 +0000</pubDate>
      <guid>https://canuxcheng.com/post/hugo/</guid>
      <description>&lt;h1 id=&#34;hugo&#34;&gt;Hugo&lt;/h1&gt;&#xA;&lt;p&gt;go开发的静态站点生成器.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo&#34;&gt;https://github.com/gohugoio/hugo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;搭建博客&#34;&gt;搭建博客&lt;/h1&gt;&#xA;&lt;p&gt;创建环境:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# linux, ubuntu18.04默认是非extended, 19.04 默认extended。&#xA;$ sudo apt-get install hugo&#xA;&#xA;# extended支持Sass/scss&#xA;$ sudo snap install hugo --channel=extended&#xA;&#xA;# windows&#xA;PATH:   C:\Hugo\bin\hugo.exe&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;测试安装:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ hugo help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建hugo项目:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ cd /home/canux/sites&#xA;&amp;gt; cd C:\hugo\sites&#xA;$ hugo new site canuxcheng.com&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;生成下列文件和目录:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;config.toml&#xA;archetypes&#xA;content    # md 文件&#xA;data&#xA;layouts&#xA;static&#xA;themes&#xA;bytes&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;theme&#34;&gt;Theme&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugoThemes&#34;&gt;https://github.com/gohugoio/hugoThemes&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;下载所有主题:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;cd blog&#xA;git clone --depth 1 --recursive https://github.com/gohugoio/hugoThemes.git themes&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;下载单个主题：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pelican</title>
      <link>https://canuxcheng.com/post/pelican/</link>
      <pubDate>Mon, 01 Apr 2013 12:49:49 +0000</pubDate>
      <guid>https://canuxcheng.com/post/pelican/</guid>
      <description>&lt;h1 id=&#34;pelican&#34;&gt;Pelican&lt;/h1&gt;&#xA;&lt;p&gt;python开发的静态站点生成器.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;http://blog.getpelican.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/getpelican/pelican&#34;&gt;https://github.com/getpelican/pelican&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://pelican-docs-zh-cn.readthedocs.io/en/latest/getting_started.html&#34;&gt;http://pelican-docs-zh-cn.readthedocs.io/en/latest/getting_started.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://pelican-zh.readthedocs.io/en/latest/zh-cn/&#34;&gt;http://pelican-zh.readthedocs.io/en/latest/zh-cn/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;搭建博客&#34;&gt;搭建博客&lt;/h1&gt;&#xA;&lt;p&gt;创建环境:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$mkdir blog_pelican&#xA;$cd blog_pelican&#xA;$virtualenv .venv&#xA;$source .venv/bin/activate&#xA;$pip install pelican&#xA;$pip install markdown&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;创建pelican项目:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$pelican-quickstart&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;生成下列文件和目录:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;publishconf.py # 主配置文件&#xA;pelicanconf.py # 发布的配置文件&#xA;fabfile.py # fabric配置文件&#xA;Makefile   # make配置文件&#xA;develop_server.sh # 用于开启测试服务器&#xA;content # 用于存放所有文章&#xA;output # 静态生成文件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;发布站点&#34;&gt;发布站点&lt;/h1&gt;&#xA;&lt;p&gt;pelican部署博客:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 将rst或md格式转换成html,默认导入到output.&#xA;$pelican content&#xA;$pelican content -s pelicanconf.py&#xA;&#xA;# 启动web服务器预览&#xA;$cd output&#xA;$python -m pelican.server&#xA;$python2.7 -m SimpleHTTPServer&#xA;$python3 -m http.server&#xA;$firefox http://localhost:8000/&#xA;&#xA;# 部署站点&#xA;# 一般publishconf.py导入pelicanconf.py即可，配置一样．&#xA;$pelican content -s publishconf.py&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;fabric部署博客:&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://canuxcheng.com/about/</link>
      <pubDate>Mon, 01 Apr 2013 12:49:49 +0800</pubDate>
      <guid>https://canuxcheng.com/about/</guid>
      <description>&lt;h1 id=&#34;作者简介synopsis&#34;&gt;作者简介(Synopsis)&lt;/h1&gt;&#xA;&lt;p&gt;程 伟&lt;/p&gt;&#xA;&lt;p&gt;Canux CHENG&lt;/p&gt;&#xA;&lt;p&gt;Interested in：DevSecOps, Cloud, AWS, GCP, Azure, Terraform, Kubernetes, Golang, Python, TS/JS/NodeJS&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;技术交流contact&#34;&gt;技术交流(Contact)&lt;/h1&gt;&#xA;&lt;p&gt;了解项目情况，欢迎追踪我的Github&lt;/p&gt;&#xA;&lt;p&gt;Welcome to follow my github, to see the project.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/crazy-canux&#34;&gt;Follow&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;查看简历，欢迎追踪我的LinkedIn&lt;/p&gt;&#xA;&lt;p&gt;Welcome to follow my LinkedIn, to see my resume.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/canux-cheng-4b5b23ab/&#34;&gt;Follow&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;个人邮箱e-mail&#34;&gt;个人邮箱(E-mail):&lt;/h1&gt;&#xA;&lt;p&gt;技术邮箱(tech)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;mailto:canuxcheng@gmail.com&#34;&gt;canuxcheng@gmail.com&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;职位邮箱(position)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;mailto:canuxcheng@163.com&#34;&gt;canuxcheng@163.com&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;商务邮箱(business)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;mailto:canuxcheng@outlook.com&#34;&gt;canuxcheng@outlook.com&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://canuxcheng.com/post/sec_security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://canuxcheng.com/post/sec_security/</guid>
      <description>&lt;h2 id=&#34;date-2016-07-28-160854&#34;&gt;Title: Security&#xA;Date: 2016-07-28 16:08:54&lt;/h2&gt;&#xA;&lt;h2 id=&#34;draft-false&#34;&gt;title: &amp;ldquo;Csrf&amp;rdquo;&#xA;date: 2018-07-28T16:08:54&#xA;categories: [&amp;ldquo;Security&amp;rdquo;]&#xA;tags: [&amp;ldquo;capture&amp;rdquo;]&#xA;keywords: []&#xA;author: &amp;ldquo;Canux&amp;rdquo;&#xA;draft: false&lt;/h2&gt;&#xA;&lt;h1 id=&#34;security&#34;&gt;Security&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://nvd.nist.gov/&#34;&gt;https://nvd.nist.gov/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://cve.scap.org.cn/&#34;&gt;http://cve.scap.org.cn/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;gfw&#34;&gt;GFW&lt;/h1&gt;&#xA;&lt;h1 id=&#34;ngfw&#34;&gt;NGFW&lt;/h1&gt;&#xA;&lt;h1 id=&#34;utm&#34;&gt;UTM&lt;/h1&gt;&#xA;&lt;p&gt;Unified Threat Management, 安全网关&lt;/p&gt;&#xA;&lt;p&gt;BUV: Block Until Verdict&lt;/p&gt;&#xA;&lt;h1 id=&#34;waf&#34;&gt;WAF&lt;/h1&gt;&#xA;&lt;p&gt;Web Application Firewall, web应用防火墙&lt;/p&gt;&#xA;&lt;h1 id=&#34;ips&#34;&gt;IPS&lt;/h1&gt;&#xA;&lt;p&gt;Intrusion Prevention System, 入侵防御系统&lt;/p&gt;&#xA;&lt;h1 id=&#34;ids&#34;&gt;IDS&lt;/h1&gt;&#xA;&lt;p&gt;Intrusion Detection System, 入侵检测系统&lt;/p&gt;&#xA;&lt;h1 id=&#34;nsm&#34;&gt;NSM&lt;/h1&gt;&#xA;&lt;p&gt;Network Security Monitoring, 网络安全监控&lt;/p&gt;</description>
    </item>
    <item>
      <title>🔍</title>
      <link>https://canuxcheng.com/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://canuxcheng.com/search/</guid>
      <description></description>
    </item>
  </channel>
</rss>
