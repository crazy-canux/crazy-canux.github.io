<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pythons on Canux&#39;s Blog</title>
    <link>http://canuxcheng.com/python/</link>
    <description>Recent content in Pythons on Canux&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	<atom:link href="http://canuxcheng.com/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/debug/</guid>
      <description> Title: Debug Date: 2016-08-06 16:54:08 Tags: Python, Debug
IDE pycharm可以通过breakpoint和step调试.
debug bdb pdb hotshot timeit trace cProfile profile </description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/devops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/devops/</guid>
      <description>Title: DevOps Date: 2016-04-03 10:49:21 Tags: Python, DevOps, Vim, Pycharm
Python python2的最后一个版本是python2.7, 2020年停止更新.
Windows安装：
1 2 3  Python2.7.9之后的版本直接下载msi安装即可． 选择自动设置PATH，默认安装pip和setuptools. 可以使用IDLE或python命令行或cmd执行python命令   Linux安装：
1 2 3 4 5 6  $sudo apt-get install python $sudo yum install python $sudo apt-get install python-dev $sudo apt-get install python3-dev $sudo yum install python-devel   标准库的路径：
1 2  C:\Python27\Lib /usr/lib/python2.7/   python的IDE：
 Windows: IDLE Linux: Vim Pycharm/IntelliJ  python命令 1 2 3 4 5 6 7 8 9 10  $ python/ipython # 进入python解释器 &amp;gt;&amp;gt;&amp;gt;exit()/Ctrl+d # 退出python解释器 &amp;gt;&amp;gt;&amp;gt;help() # 进入help工具 help&amp;gt;quit # 退出help工具 $ pydoc --help # 文档工具 # -c　cmd, __name__ !</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/document/</guid>
      <description>Title: Document Date: 2016-08-03 21:57:26 Tags: Python, Document, reST, Sphinx, readthedoc
Document python项目文档相关的工具．
pydoc python自带的文档命令行接口
1 2  $ pydoc --help $ pydoc -p &amp;lt;port&amp;gt;   TPL Sphinx https://github.com/sphinx-doc/sphinx
https://zh-sphinx-doc.readthedocs.io/en/latest/contents.html
Sphinx就是python处理reStructuredText格式的工具。
安装：
1  $pip install -U Sphinx   使用sphinx：
1 2 3 4 5 6 7 8 9  $cd your-project/docs $sphinx-quickstart # 以下选项需要手动设定，其它都可以用默认值： &amp;gt; Project name: pydeveloper &amp;gt; Author name(s): Canux CHENG &amp;gt; Project version: 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/pep257/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/pep257/</guid>
      <description>Title: PEP257 Date: 2016-08-15 11:28:13 Tags: Python, PEP, PEP257
PEP 257 &amp;ndash; Docstring Conventions https://www.python.org/dev/peps/pep-0257/</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/pep8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/pep8/</guid>
      <description> Title: PEP8 Date: 2016-08-15 11:28:06 Tags: Python, PEP, PEP8, PEP7, PEP20
PEP 8 &amp;ndash; Style Guide for Python Code https://www.python.org/dev/peps/pep-0008/
pep7是C风格指南，pep20是zen of python.
1 2  # 查看pep20 &amp;gt;import this  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_concurrency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_concurrency/</guid>
      <description>Title: PSL_Concurrency Date: 2016-08-15 11:04:12 Tags: Python, Concurrency
Concurrent Execution 进程：每个进程都有自己的地址空间，内存，数据栈以及其它记录其运行轨迹的辅助数据
线程：线程（有时被称为轻量级进程）跟进程有些相似，不同的是，所有的线程运行在同一个进程中，共享相同的运行环境
IPC: 进程/线程之间交换信息叫进程间通信．
python的多线程由于GIL只有并发没有并行，无论有多少cpu,一次只能有一个python解释器(线程)执行.一次只能执行一个线程.一次只能用到一个逻辑cpu.
IO密集型任务消耗IO,但是不消耗CPU,cpu切换消耗少,适合用多线程.
python的多进程可以并行,每个进程启动一个解释器进程.
多进程开销大，消耗内存.
计算密集型消耗cpu,任务个数不超过cpu个数．适合用多进程，把每个cpu跑满.
multiprocessing 多进程就是同时执行多个任务.
python可以通过多进程取代多线程，从而绕过多线程的GIL.
python是静态语言，
1  import multiprocessing   classes:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # multiprocessing.Process proc = Process(group=None, target=None, name=None, args=(), kwargs={}) # methods: run(self) start(self) # 启动一个进程 join(self, timeout=None) # 父进程等待子进程结束 is_alive() terminate(self) # data descriptor: authkey daemon # proc.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_cryptographic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_cryptographic/</guid>
      <description>Title: PSL_Cryptographic Date: 2016-08-14 21:15:14 Tags: Python, Cryptographic
Cryptographic Services hashlib 哈希算法和摘要算法标准库，就是把任意长度的数据转换为一个长度固定的数据串．
MD5: Message Digest Algorithm 5.
SHA1: Secure Hash Algorithm.
1  import hashlib   classes:
1 2 3 4 5 6 7 8 9 10  # methods: # 哈希对象有下列方法： update(arg) # 更新字符串 md5.update(&amp;#39;string or read from a file&amp;#39;) # 放入需要转换的内容 digest() # 字符串 hexdigest() # 十六进制字符串 md5.hexdigest() # 获取md5十六进制字符串 copy() # 复制哈希对象   functions:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_data/</guid>
      <description>Title: PSL_Data Date: 2016-08-14 20:57:36 Tags: Python, Data
Data Types datetime 1  import datetime   classes:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  # datetime.date date(year, month, day) # methods: ctime(...) ... # data descriptors: day month year # datetime.datetime(datetime.date) datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]]) # methods: datetime.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_file/</guid>
      <description>Title: PSL_File Date: 2016-08-14 20:51:28 Tags: Python, File, glob, tempfile, csv, json, yaml
File and Directory Access os.path windows的路径要写成：
1 2 3  C:\\test\\sub\\ import os   function:
1 2 3 4 5 6 7 8 9 10 11 12  os.path.expanduser(path) # 把path中~或~user扩展成绝对路径 expanduser(&amp;#34;~/src&amp;#34;) -&amp;gt; /home/user/src os.path.expandvars(path) # 把path中的shell变量$var 或 ${var} 还原． os.path.dirname(filename) # 返回filename的路径 dirname(&amp;#34;/home/user/file.py&amp;#34;) -&amp;gt; /home/user os.path.join(a, *p) # 拼结一个完整的路径　os.path.join(a, os.pardir) # 返回上级目录的路径 os.path.realpath(filename) # 返回filename的真实路径+文件名 realpath(&amp;#39;__file__&amp;#39;) os.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_gui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_gui/</guid>
      <description> Title: PSL_GUI Date: 2016-08-15 10:28:54 Tags: Python, GUI
GUI Tkinter ttk Tix ScrolledText turtle TPL 相关的第三方库
wxWidgets python2的库叫wxPython.
https://www.wxpython.org/
1 2  # Windows下载安装包安装即可． $ sudo apt-get install python-wxgtk2.8   python３启用新的项目phoneix.
https://github.com/wxWidgets/Phoenix
gtk 1  PyGTK   qt 1  PyQt  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_math/</guid>
      <description>Title: PSL_Math Date: 2016-08-12 16:56:45 Tags: Python, Math
Numeric and Mathematical Modules random 1  import random   classes:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  # random.Random Random() # methods: seed([self,], a=None) randint(a, b) # 随机一个[a,b]中的整数． choice(self, seq) # 从seq中随机选择一个元素 uniform(self, a, b) sample(self, population, k) randint(self, a, b) randrange(self, start, stop=None, step=1, _int=&amp;lt;type &amp;#39;int&amp;#39;&amp;gt;, _maxwidth=9007199254740992L) # random.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_misc/</guid>
      <description>Title: PSL_Misc Date: 2016-08-15 10:28:46 Tags: Python, Misc
PSL Python Standard Library: Python标准库
Internationalization gettext locale Program Frameworks cmd shlex 类shell的词法分析．
classes:
1  shlex   functions:
1 2  split(s, comments=False, posix=True) # split(&amp;#34;command **kwargs&amp;#34;) -&amp;gt; [&amp;#39;command&amp;#39;, &amp;#39;arg1&amp;#39;, ...]   data:
Custom Python Interpreters code codeop Python Language Services keyword 1  import keyword   functions:
1  keyword.iskeyword(keyword) # x.__contains__(y) &amp;lt;==&amp;gt; y in x   data:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_multimedia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_multimedia/</guid>
      <description> Title: PSL_Multimedia Date: 2016-08-12 15:51:56 Tags: Python, Multimedia
Multimedia Services audioop aifc sunau wave chunk colorsys imghdr sndhdr ossaudiodev </description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_network/</guid>
      <description> Title: PSL_Network Date: 2016-08-12 14:21:36 Tags: Python, Network
Internet Protocols and Support socketserver/http/ftp,url,html参考https://super-devops.readthedocs.io/en/latest/.
pop,imap/smtp参考https://super-devops.readthedocs.io/en/latest/.
webbrowser cgi cgitb wsgiref xmlrpclib SimpleXMLRPCServer DocXMLRPCServer socketserver nntp标准库 network news transfer protocol
nntplib 1  import nntplib   telnet标准库 telnet 1  import telnetlib   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_python/</guid>
      <description>Title: PSL_Python Date: 2016-08-15 11:04:12 Tags: Python
Python Runtime Services __builtin__  builtin/builtins - Built-in functions, exceptions, and other objects.
 python2叫__builtin__
python3叫builtins
__main__  main - Top-level script environment.
 1 2  if __name__ == &amp;#34;__main__&amp;#34;: main()   当作为顶层脚本运行时(main), 当作为一个模块运行时候就是模块名称．
__future__ 把下一个版本的新特性导入到当前版本。
1 2 3 4 5 6 7 8 9 10 11  from __future__ import &amp;lt;feature_name&amp;gt; # feature name: all_feature_names # 一次导入所有feature absolute_import # 绝对导入 division generators nested_scopes print_function unicode_literals # python2中u&amp;#39;string&amp;#39;才表示unicode, &amp;#39;string&amp;#39;表示str，python3中所有字符串都是unicode。 with_statement   data:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_string/</guid>
      <description>Title: PSL_String Date: 2016-08-12 16:49:07 Tags: Python, String
String Services string 1  import string   classes:
functions:
data:
1 2 3 4 5  ascii_letters ascii_lowercase ascii_uppercase digits ...   re 1  import re   classes:
functions:
1 2 3 4 5 6 7 8 9 10 11  compile(pattern, flags=0) escape(pattern) findall(pattern, string, flags=0) finditer(pattern, string, flags=0) match(pattern, string, flags=0) # if not match, return None, else return object.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_system/</guid>
      <description>Title: PSL_System Date: 2016-08-15 11:04:12 Tags: Python, System
Generic Operating System Services os 1 2 3 4 5 6 7 8 9 10 11 12 13 14  import os os.path # 参考PSL_File os.name os.curdir os.pardir # 表示上一级路径.., 需要用abspath解析 # os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), os.pardir)) os.sep os.extsep os.altsep os.pathsep os.linesep os.defpath os.devnull   classes:
functions:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  WCOREDUMP(.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_test/</guid>
      <description>Title: PSL_Test Date: 2016-04-11 22:58:13 Tags: Python, Test, TDD
Test python的单元测试库．
2to3 1  $2to3   pydoc 1  import pydoc   test 1  import test   doctest python内置的文档测试库．
1  import doctest   unittest python内置的单元测试库．
1  import unittest   TPL 相关的第三方库
unittest2 unittest2是unittest的升级版．
python3集成了unittest2到unittest,像使用unittest一样使用即可．
1 2 3 4 5 6  # python2.7 $pip install unittest2 import unittest2 # python3 import unittest   unittest也叫pyunit，类似于Junit(java)都是基于Kent Beck和Erich Gamma的XUnit框架．</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/psl_builtins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/psl_builtins/</guid>
      <description>Title: PSL_builtins Date: 2016-08-15 11:16:29 Tags: Python, builtin, builtins
__builtins__ python的内置模块，所有python的内置功能都在这个模块中，不需要import导入就可以使用。
包括内置类类型以及所属的内置方法，和内置函数.
  builtin - 包括内置类类型以及所属的内置方法，和内置函数.解释器不会自动导入．
builtins - 仅仅是builtin的一个引用．解释器自动导入的．
  内置常量
内置函数(BIF)
内置类型(BIT)
工厂函数：python内置的类型都有对应的类的实现，同名的类的方法就是工厂函数．
内置类型的内置方法(BIM)
内置异常
该模块是通过C/C++实现的．
内置函数 python2和python3共同的内置函数：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75  __import__(name, globals={}, locals={}, fromlist=[], level=-1) # import关键字实际调用该函数 compile(source, filename, mode[, flags[, dont_inherit]]) # 编译source返回一个code对象(代码对象)． # mode: exec, 用于模块 python2可以用exec关键字执行,python3改成exec()函数; module = &amp;#34;for i in xrange(10): print(i)&amp;#34; code = compile(module, &amp;#39;&amp;#39;, &amp;#39;exec&amp;#39;) type(code) # code exec code # mode: single, 用于单行语句, 也是用exec执行; code = compile(&amp;#34;print &amp;#39;test&amp;#39;&amp;#34;, &amp;#39;&amp;#39;, single) type(code) # code exec code # mode: eval, 用于表达式 可以用eval()函数执行． eg: expression = &amp;#34;3 * 4&amp;#34; code = compile(expression, &amp;#39;&amp;#39;, &amp;#39;eval&amp;#39;) type(code) # code eval(code) eval(source[, globals[, locals]]) # 返回python表达式的结果，source可以是compile()返回的代码对象，也可以是一个表达式． format(value[, format_spec]) # 返回格式化后的字符串形式． ## 环境变量相关 globals() # 返回当前作用域的全局名称空间的字典． locals() # 返回当前作用域的局部名称空间的字典． ## 数字类型的数学运算 abs(number) # 返回int/long的绝对值 divmod(x, y) # 返回x/y 的　(商，余数) 组成的元组 pow(x, y[, z]) # 返回x**y或(x**y) % z round(number[, ndigits]) # 返回number四舍五入后的结果，ndigits表示小数点后的位数，默认是0.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/package/</guid>
      <description>Title: Package Date: 2016-06-22 05:17:19 Tags: Python, Package
Package PEP426是python最新的打包标准，定义了wheel为最新的python包。
https://www.python.org/dev/peps/pep-0426/
ensurepip 内置模块.提供使用pip从pypi安装模块。
distutils 内置的模块.处理简单的包安装,一般使用setuptools代替该模块。
venv python3新增了虚拟环境的包．python2中使用virtualenv.
zipapp python3新增管理可执行的python的zip包．
TPL 相关的第三方库
virtualenv python3.5开始并入了虚拟化标准库venv.
分离的虚拟的python环境,自动安装setuptools和pip和wheel
https://github.com/pypa/virtualenv
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  $cd project # 默认python2.7 $virtualenv .venv # 指定python3, 会安装pip/setuptools/wheel到当前环境. $virtualenv -p `which python3` .venv # 激活虚拟环境 $source .venv/bin/activate # 先升级pip和setuptools $pip install pip $pip install setuptools $pip install wheel # 导出项目用的所有依赖库． $pip freeze &amp;gt; requirements.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/python/</guid>
      <description>Title: Python Date: 2016-06-21 21:18:09 Tags: Python
Python概述 https://docs.python.org/2.7/index.html
http://python.usyiyi.cn/translate/python_278/index.html
https://docs.python.org/3.5/index.html
http://python.usyiyi.cn/translate/python_352/index.html
python是一门优雅而健壮的语言.
继承了编译语言(静态语言)的强大性和通用性.
同时也借鉴了脚本语言(动态语言)的易用性．
python特点：
 高级 面向对象 可升级 可扩展 可移植性 易学 易读 易维护 健壮性 高效的快速原型开发工具 内存管理器 解释性和编译性  python基本语法 python源程序叫xxx.py
python中一切皆对象．
python大小写敏感．
python通过缩进和冒号:区分语法块，而不是大括号{}.
python中的表达式(条件/循环表达式等)不需要用小括号()括起来．
python标识符(变量，函数，参数，类等)由字母和下划线开头，还可以包含数字．不能是关键字．
python不支持方法或函数重载．
python不支持char和type类型．
python没有switch语句．
python支持多继承．
python不支持++/&amp;ndash;自增和自减运算符．
python支持连续比较，a&amp;lt;b&amp;lt;c.
lexical analysis https://docs.python.org/2/reference/lexical_analysis.html
Logical lines and physical lines：
1 2 3 4  # python通过行尾的令牌NEWLINE表示逻辑行 expression # 以操作系统的换行符表示物理行． \n   encoding declarations:
1 2 3  # python脚本中的第一行或第二行的 coding[=:]\s*([-\w.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/python_oop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/python_oop/</guid>
      <description>Title: Python_OOP Date: 2016-06-21 21:18:09 Tags: Python, Encapsulation, Inheritance, Polymorphism
面向对象/OOP OOD: Object Oriented Design.
面向过程的设计支持任何语言，但是如果语言本身内置面向过程的结构，就会更容易编程．
OOP: Object Oriented Programming.
python内置OOP的结构，但是不必一定要使用类和OOP.
面向对象的两个主题就是类和类实例．
创建实例的过程叫实例化．
属性就是属于另一个对象的数据或函数元素．属性分为数据属性和函数属性．
类/Class 类是现实世界的抽象的实体以编程的形式出现，实例是这些对象的具体化．
类是一种数据结构的定义，实例是申明了一个这种类型的变量．
类的定义：
新式类都必须继承一个父类，所有类的基类是object.
1 2 3  class ClassName(object): &amp;#34;&amp;#34;&amp;#34;Doc string.&amp;#34;&amp;#34;&amp;#34; class_suite   类的初始化方法init(相当于构造器):
如果定义了__init__方法在实例化的时候会首先调用该方法，进行一些初始化的工作.
init方法的第一个参数必须是实例self,　而且不能有return语句．
init方法一般用来设置实例属性(也就是数据属性).
1 2 3  class ClassName(object): def __init__(self, *args, **kwargs): pass   特殊方法new:
如果定义了__new__方法，会在init方法之前运行，并且返回一个实例，也就是__init__的self.
new方法的第一个参数必须是类cls. 并且需要返回一个实例．
new方法在object中被定义为staticmethod．
相当于析构器的特殊方法del:
__del__特殊方法要在实例对象的所有引用都被清除后才会执行．
不要在del中做与实例没有关系的事情，一般不建议实现该方法．
1 2 3 4 5 6 7 8  class ClassName(object): def __new__(cls, *args, **kwargs): .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://canuxcheng.com/python/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://canuxcheng.com/python/summary/</guid>
      <description> Title: Summary Date: 2016-06-21 21:18:20 Tags: Python, Summary
python难点总结 多线程  GIL
GIL: Global Interpretror Lock. 全局解释器锁．
python不建议使用多线程，用多进程代替．
  协程  coroutine
协程就是同时开启两个任务，但一次只顺序执行一个． 如果执行的任务阻塞，就切换到下一个继续执行．节省时间．
  </description>
    </item>
    
  </channel>
</rss>